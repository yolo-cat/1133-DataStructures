<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/0729-Tree/0729-HeapApplication/src/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0729-Tree/0729-HeapApplication/src/Main.java" />
              <option name="updatedContent" value="public class Main {&#10;    public static void main(String[] args) {&#10;        ProducerConsumerGUI.main(args);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0729-Tree/src/BinaryTreeArray.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0729-Tree/src/BinaryTreeArray.java" />
              <option name="originalContent" value="import java.util.*;&#10;import java.util.stream.IntStream;&#10;&#10;public class BinaryTreeArray {&#10;    private Integer[] treeArray;&#10;&#10;    public BinaryTreeArray(Integer[] arr) {&#10;        this.treeArray = arr;&#10;    }&#10;&#10;    // 工具方法：取得有效索引範圍（1 ~ arr.length-1）&#10;    private int getLeft(int index) { return 2 * index; }&#10;    private int getRight(int index) { return 2 * index + 1; }&#10;    private boolean isValidIndex(int index) { return index &gt; 0 &amp;&amp; index &lt; treeArray.length; }&#10;&#10;    // 前序走訪&#10;    public List&lt;Integer&gt; preorder() {&#10;        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();&#10;        preorderHelper(1, result);&#10;        return result;&#10;    }&#10;&#10;    private void preorderHelper(int index, List&lt;Integer&gt; result) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        result.add(treeArray[index]);&#10;        preorderHelper(getLeft(index), result);&#10;        preorderHelper(getRight(index), result);&#10;    }&#10;&#10;    // 中序走訪&#10;    public List&lt;Integer&gt; inorder() {&#10;        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();&#10;        inorderHelper(1, result);&#10;        return result;&#10;    }&#10;&#10;    private void inorderHelper(int index, List&lt;Integer&gt; result) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        inorderHelper(getLeft(index), result);&#10;        result.add(treeArray[index]);&#10;        inorderHelper(getRight(index), result);&#10;    }&#10;&#10;    // 後序走訪&#10;    public List&lt;Integer&gt; postorder() {&#10;        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();&#10;        postorderHelper(1, result);&#10;        return result;&#10;    }&#10;&#10;    private void postorderHelper(int index, List&lt;Integer&gt; result) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        postorderHelper(getLeft(index), result);&#10;        postorderHelper(getRight(index), result);&#10;        result.add(treeArray[index]);&#10;    }&#10;&#10;    // 靜態方法：將字串陣列轉為 Integer 陣列（支援 null）&#10;    public static Integer[] parseInput(String input) {&#10;        String[] parts = input.split(&quot;,&quot;);&#10;        Integer[] arr = new Integer[parts.length + 1]; // arr[0] 保留&#10;        arr[0] = 0; // 節點數量初始化為0&#10;        for (int i = 0; i &lt; parts.length; i++) {&#10;            String s = parts[i].trim();&#10;            if (s.equalsIgnoreCase(&quot;null&quot;)) arr[i + 1] = null;&#10;            else arr[i + 1] = Integer.parseInt(s);&#10;            if (!s.equalsIgnoreCase(&quot;null&quot;)) arr[0]++;&#10;        }&#10;        return arr;&#10;    }&#10;&#10;    // 刪除指定索引的節點&#10;    // 若為樹葉節點則直接刪除，若為中間節點則刪除整個子樹&#10;    public void delete(int index) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        int left = getLeft(index);&#10;        int right = getRight(index);&#10;        boolean isLeaf = (!isValidIndex(left) || treeArray[left] == null)&#10;                &amp;&amp; (!isValidIndex(right) || treeArray[right] == null);&#10;        if (isLeaf) {&#10;            treeArray[index] = null;&#10;        } else {&#10;            deleteSubtree(index);&#10;        }&#10;    }&#10;&#10;    // 遞迴刪除以 index 為根的子樹&#10;    private void deleteSubtree(int index) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        treeArray[index] = null;&#10;        deleteSubtree(getLeft(index));&#10;        deleteSubtree(getRight(index));&#10;    }&#10;&#10;    // 測試主程式&#10;    public static void main(String[] args) {&#10;        Scanner sc = new Scanner(System.in);&#10;        System.out.println(&quot;請輸入以逗號分隔的陣列（用null表示空節點）：&quot;);&#10;        String input = sc.nextLine();&#10;        Integer[] arr = parseInput(input);&#10;        BinaryTreeArray tree = new BinaryTreeArray(arr);&#10;        System.out.println(&quot;索引:   &quot; + Arrays.toString(IntStream.range(1, arr.length).toArray()));&#10;        System.out.println(&quot;內容:   &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;        System.out.println(&quot;節點數: &quot; + arr[0]);&#10;        System.out.println(&quot;中序: &quot; + tree.inorder());&#10;        System.out.println(&quot;前序: &quot; + tree.preorder());&#10;        System.out.println(&quot;後序: &quot; + tree.postorder());&#10;&#10;        while (true) {&#10;            System.out.println(&quot;請選擇操作: 1) 增加節點 2) 刪除節點 3) 退出&quot;);&#10;            String op = sc.nextLine();&#10;            if (op.equals(&quot;1&quot;)) {&#10;                System.out.print(&quot;請輸入要插入的索引: &quot;);&#10;                int idx = Integer.parseInt(sc.nextLine());&#10;                System.out.print(&quot;請輸入要插入的值(整數): &quot;);&#10;                String valStr = sc.nextLine();&#10;                Integer val = valStr.equalsIgnoreCase(&quot;null&quot;) ? null : Integer.parseInt(valStr);&#10;                if (idx &gt; 0 &amp;&amp; idx &lt; arr.length) {&#10;                    // 若原本為null且新值非null，節點數+1&#10;                    if (arr[idx] == null &amp;&amp; val != null) arr[0]++;&#10;                    // 若原本非null且新值為null，節點數-1&#10;                    if (arr[idx] != null &amp;&amp; val == null) arr[0]--;&#10;                    arr[idx] = val;&#10;                    System.out.println(&quot;已插入於索引 &quot; + idx);&#10;                } else {&#10;                    System.out.println(&quot;索引超出範圍&quot;);&#10;                }&#10;            } else if (op.equals(&quot;2&quot;)) {&#10;                System.out.print(&quot;請輸入要刪除的索引: &quot;);&#10;                int idx = Integer.parseInt(sc.nextLine());&#10;                // 遞迴計算刪除節點數&#10;                int[] delCount = new int[]{0};&#10;                countDelete(arr, idx, delCount);&#10;                tree.delete(idx);&#10;                arr[0] -= delCount[0];&#10;                System.out.println(&quot;已刪除索引 &quot; + idx);&#10;            } else if (op.equals(&quot;3&quot;)) {&#10;                System.out.println(&quot;程式結束&quot;);&#10;                break;&#10;            } else {&#10;                System.out.println(&quot;無效選項&quot;);&#10;            }&#10;            System.out.println(&quot;索引:   &quot; + Arrays.toString(IntStream.range(1, arr.length).toArray()));&#10;            System.out.println(&quot;內容:   &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;            System.out.println(&quot;節點數: &quot; + arr[0]);&#10;            System.out.println(&quot;中序: &quot; + tree.inorder());&#10;            System.out.println(&quot;前序: &quot; + tree.preorder());&#10;            System.out.println(&quot;後序: &quot; + tree.postorder());&#10;        }&#10;    }&#10;&#10;    // 遞迴計算將被刪除的節點數&#10;    private static void countDelete(Integer[] arr, int idx, int[] count) {&#10;        if (idx &lt;= 0 || idx &gt;= arr.length || arr[idx] == null) return;&#10;        count[0]++;&#10;        countDelete(arr, 2 * idx, count);&#10;        countDelete(arr, 2 * idx + 1, count);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import java.util.*;&#10;import java.util.stream.IntStream;&#10;&#10;public class BinaryTreeArray {&#10;    private Integer[] treeArray;&#10;&#10;    public BinaryTreeArray(Integer[] arr) {&#10;        this.treeArray = arr;&#10;    }&#10;&#10;    // 工具方法：取得有效索引範圍（1 ~ arr.length-1）&#10;    private int getLeft(int index) { return 2 * index; }&#10;    private int getRight(int index) { return 2 * index + 1; }&#10;    private boolean isValidIndex(int index) { return index &gt; 0 &amp;&amp; index &lt; treeArray.length; }&#10;&#10;    // 前序走訪&#10;    public List&lt;Integer&gt; preorder() {&#10;        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();&#10;        preorderHelper(1, result);&#10;        return result;&#10;    }&#10;&#10;    private void preorderHelper(int index, List&lt;Integer&gt; result) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        result.add(treeArray[index]);&#10;        preorderHelper(getLeft(index), result);&#10;        preorderHelper(getRight(index), result);&#10;    }&#10;&#10;    // 中序走訪&#10;    public List&lt;Integer&gt; inorder() {&#10;        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();&#10;        inorderHelper(1, result);&#10;        return result;&#10;    }&#10;&#10;    private void inorderHelper(int index, List&lt;Integer&gt; result) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        inorderHelper(getLeft(index), result);&#10;        result.add(treeArray[index]);&#10;        inorderHelper(getRight(index), result);&#10;    }&#10;&#10;    // 後序走訪&#10;    public List&lt;Integer&gt; postorder() {&#10;        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();&#10;        postorderHelper(1, result);&#10;        return result;&#10;    }&#10;&#10;    private void postorderHelper(int index, List&lt;Integer&gt; result) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        postorderHelper(getLeft(index), result);&#10;        postorderHelper(getRight(index), result);&#10;        result.add(treeArray[index]);&#10;    }&#10;&#10;    // 靜態方法：將字串陣列轉為 Integer 陣列（支援 null）&#10;    public static Integer[] parseInput(String input) {&#10;        String[] parts = input.split(&quot;,&quot;);&#10;        Integer[] arr = new Integer[parts.length + 1]; // arr[0] 保留&#10;        arr[0] = 0; // 節點數量初始化為0&#10;        for (int i = 0; i &lt; parts.length; i++) {&#10;            String s = parts[i].trim();&#10;            if (s.equalsIgnoreCase(&quot;null&quot;)) arr[i + 1] = null;&#10;            else arr[i + 1] = Integer.parseInt(s);&#10;            if (!s.equalsIgnoreCase(&quot;null&quot;)) arr[0]++;&#10;        }&#10;        return arr;&#10;    }&#10;&#10;    // 刪除指定索引的節點&#10;    // 若為樹葉節點則直接刪除，若為中間節點則刪除整個子樹&#10;    public void delete(int index) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        int left = getLeft(index);&#10;        int right = getRight(index);&#10;        boolean isLeaf = (!isValidIndex(left) || treeArray[left] == null)&#10;                &amp;&amp; (!isValidIndex(right) || treeArray[right] == null);&#10;        if (isLeaf) {&#10;            treeArray[index] = null;&#10;        } else {&#10;            deleteSubtree(index);&#10;        }&#10;    }&#10;&#10;    // 遞迴刪除以 index 為根的子樹&#10;    private void deleteSubtree(int index) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        treeArray[index] = null;&#10;        deleteSubtree(getLeft(index));&#10;        deleteSubtree(getRight(index));&#10;    }&#10;&#10;    // 測試主程式&#10;    public static void main(String[] args) {&#10;        Scanner sc = new Scanner(System.in);&#10;        System.out.println(&quot;請輸入以逗號分隔的陣列（用null表示空節點）：&quot;);&#10;        System.out.println(&quot;或輸入 auto:N 由程式自動產生 N 個不重覆隨機數字&quot;);&#10;        String input = sc.nextLine();&#10;        Integer[] arr;&#10;        if (input.trim().toLowerCase().startsWith(&quot;auto:&quot;)) {&#10;            int n = 0;&#10;            try {&#10;                n = Integer.parseInt(input.trim().substring(5));&#10;            } catch (Exception e) {&#10;                System.out.println(&quot;格式錯誤，請輸入 auto:N，例如 auto:10&quot;);&#10;                return;&#10;            }&#10;            if (n &lt;= 0) {&#10;                System.out.println(&quot;N 必須大於 0&quot;);&#10;                return;&#10;            }&#10;            Set&lt;Integer&gt; nums = new LinkedHashSet&lt;&gt;();&#10;            Random rand = new Random();&#10;            while (nums.size() &lt; n) {&#10;                nums.add(rand.nextInt(10000)); // 可調整範圍&#10;            }&#10;            arr = new Integer[n + 1];&#10;            arr[0] = n;&#10;            int i = 1;&#10;            for (int num : nums) arr[i++] = num;&#10;        } else {&#10;            arr = parseInput(input);&#10;        }&#10;        BinaryTreeArray tree = new BinaryTreeArray(arr);&#10;        System.out.println(&quot;索引:   &quot; + Arrays.toString(IntStream.range(1, arr.length).toArray()));&#10;        System.out.println(&quot;內容:   &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;        System.out.println(&quot;節點數: &quot; + arr[0]);&#10;        System.out.println(&quot;中序: &quot; + tree.inorder());&#10;        System.out.println(&quot;前序: &quot; + tree.preorder());&#10;        System.out.println(&quot;後序: &quot; + tree.postorder());&#10;&#10;        while (true) {&#10;            System.out.println(&quot;請選擇操作: 1) 增加節點 2) 刪除節點 3) 退出&quot;);&#10;            String op = sc.nextLine();&#10;            if (op.equals(&quot;1&quot;)) {&#10;                System.out.print(&quot;請輸入要插入的索引: &quot;);&#10;                int idx = Integer.parseInt(sc.nextLine());&#10;                System.out.print(&quot;請輸入要插入的值(整數): &quot;);&#10;                String valStr = sc.nextLine();&#10;                Integer val = valStr.equalsIgnoreCase(&quot;null&quot;) ? null : Integer.parseInt(valStr);&#10;                if (idx &gt; 0 &amp;&amp; idx &lt; arr.length) {&#10;                    // 若原本為null且新值非null，節點數+1&#10;                    if (arr[idx] == null &amp;&amp; val != null) arr[0]++;&#10;                    // 若原本非null且新值為null，節點數-1&#10;                    if (arr[idx] != null &amp;&amp; val == null) arr[0]--;&#10;                    arr[idx] = val;&#10;                    System.out.println(&quot;已插入於索引 &quot; + idx);&#10;                } else {&#10;                    System.out.println(&quot;索引超出範圍&quot;);&#10;                }&#10;            } else if (op.equals(&quot;2&quot;)) {&#10;                System.out.print(&quot;請輸入要刪除的索引: &quot;);&#10;                int idx = Integer.parseInt(sc.nextLine());&#10;                // 遞迴計算刪除節點數&#10;                int[] delCount = new int[]{0};&#10;                countDelete(arr, idx, delCount);&#10;                tree.delete(idx);&#10;                arr[0] -= delCount[0];&#10;                System.out.println(&quot;已刪除索引 &quot; + idx);&#10;            } else if (op.equals(&quot;3&quot;)) {&#10;                System.out.println(&quot;程式結束&quot;);&#10;                break;&#10;            } else {&#10;                System.out.println(&quot;無效選項&quot;);&#10;            }&#10;            System.out.println(&quot;索引:   &quot; + Arrays.toString(IntStream.range(1, arr.length).toArray()));&#10;            System.out.println(&quot;內容:   &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;            System.out.println(&quot;節點數: &quot; + arr[0]);&#10;            System.out.println(&quot;中序: &quot; + tree.inorder());&#10;            System.out.println(&quot;前序: &quot; + tree.preorder());&#10;            System.out.println(&quot;後序: &quot; + tree.postorder());&#10;        }&#10;    }&#10;&#10;    // 遞迴計算將被刪除的節點數&#10;    private static void countDelete(Integer[] arr, int idx, int[] count) {&#10;        if (idx &lt;= 0 || idx &gt;= arr.length || arr[idx] == null) return;&#10;        count[0]++;&#10;        countDelete(arr, 2 * idx, count);&#10;        countDelete(arr, 2 * idx + 1, count);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0729-Tree/src/BinaryTreeArrayGUI.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0729-Tree/src/BinaryTreeArrayGUI.java" />
              <option name="originalContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.*;&#10;import java.util.*;&#10;import java.util.stream.IntStream;&#10;&#10;public class BinaryTreeArrayGUI extends JFrame {&#10;    private BinaryTreeArray tree;&#10;    private Integer[] arr;&#10;    private JTextField inputField;&#10;    private JTextField insertIdxField, insertValField;&#10;    private JTextField deleteIdxField;&#10;    private JTextArea outputArea;&#10;    private JLabel nodeCountLabel;&#10;    private TreeVisualizationPanel treePanel;&#10;    private JRadioButton inorderBtn, preorderBtn, postorderBtn;&#10;    private JButton visitBtn;&#10;    private JButton stepBtn, resetBtn;&#10;    private javax.swing.Timer walkTimer;&#10;    private java.util.List&lt;Integer&gt; currentTraversalPath;&#10;&#10;    public BinaryTreeArrayGUI() {&#10;        setTitle(&quot;Binary Tree/Heap 教學系統&quot;);&#10;        setDefaultCloseOperation(EXIT_ON_CLOSE);&#10;        setSize(1000, 800);&#10;        setLayout(new BorderLayout(10, 10));&#10;&#10;        // 設定主要背景色&#10;        getContentPane().setBackground(new Color(248, 249, 250));&#10;&#10;        // 頂部輸入面板&#10;        JPanel topPanel = new JPanel(new GridBagLayout());&#10;        topPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;建立二元樹&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        topPanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;&#10;        inputField = new JTextField(25);&#10;        inputField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        JButton buildBtn = new JButton(&quot;建立/重設樹&quot;);&#10;        buildBtn.setBackground(new Color(144, 238, 144));  // 淡綠色背景&#10;        buildBtn.setForeground(Color.BLACK);  // 黑色文字&#10;        buildBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;&#10;        JButton autoBtn = new JButton(&quot;自動產生隨機數&quot;);&#10;        autoBtn.setBackground(new Color(144, 238, 144));  // 淡綠色背景&#10;        autoBtn.setForeground(Color.BLACK);  // 黑色文字&#10;        autoBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        JTextField autoNField = new JTextField(5);&#10;        autoNField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        topPanel.add(new JLabel(&quot;輸入陣列(逗號分隔, null為空):&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(inputField, gbc);&#10;        gbc.gridx = 2;&#10;        topPanel.add(buildBtn, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        topPanel.add(new JLabel(&quot;或產生 N 個隨機數:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(autoNField, gbc);&#10;        gbc.gridx = 2;&#10;        topPanel.add(autoBtn, gbc);&#10;&#10;        add(topPanel, BorderLayout.NORTH);&#10;&#10;        // 中央操作面板&#10;        JPanel centerPanel = new JPanel(new BorderLayout());&#10;&#10;        // 左側操作區&#10;        JPanel leftPanel = new JPanel(new GridBagLayout());&#10;        leftPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;節點操作&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        leftPanel.setBackground(Color.WHITE);&#10;        leftPanel.setPreferredSize(new Dimension(300, 0));&#10;&#10;        GridBagConstraints leftGbc = new GridBagConstraints();&#10;        leftGbc.insets = new Insets(10, 10, 5, 10);&#10;        leftGbc.anchor = GridBagConstraints.WEST;&#10;        leftGbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        // 插入/修改節點區域&#10;        JPanel insertPanel = new JPanel(new GridBagLayout());&#10;        insertPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createLineBorder(new Color(144, 238, 144), 1), &quot;插入/修改節點&quot;));&#10;        insertPanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints insertGbc = new GridBagConstraints();&#10;        insertGbc.insets = new Insets(5, 5, 5, 5);&#10;        insertGbc.anchor = GridBagConstraints.WEST;&#10;&#10;        insertIdxField = new JTextField(12);&#10;        insertValField = new JTextField(12);&#10;        insertIdxField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        insertValField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        insertIdxField.setHorizontalAlignment(JTextField.LEFT);&#10;        insertValField.setHorizontalAlignment(JTextField.LEFT);&#10;&#10;        JButton insertBtn = new JButton(&quot;插入/修改&quot;);&#10;        insertBtn.setBackground(new Color(144, 238, 144));&#10;        insertBtn.setForeground(Color.BLACK);&#10;        insertBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        insertBtn.setPreferredSize(new Dimension(120, 30));&#10;&#10;        insertGbc.gridx = 0; insertGbc.gridy = 0;&#10;        insertPanel.add(new JLabel(&quot;索引:&quot;), insertGbc);&#10;        insertGbc.gridx = 1;&#10;        insertPanel.add(insertIdxField, insertGbc);&#10;&#10;        insertGbc.gridx = 0; insertGbc.gridy = 1;&#10;        insertPanel.add(new JLabel(&quot;值:&quot;), insertGbc);&#10;        insertGbc.gridx = 1;&#10;        insertPanel.add(insertValField, insertGbc);&#10;&#10;        insertGbc.gridx = 0; insertGbc.gridy = 2; insertGbc.gridwidth = 2;&#10;        insertGbc.fill = GridBagConstraints.HORIZONTAL;&#10;        insertPanel.add(insertBtn, insertGbc);&#10;&#10;        // 刪除節點區域&#10;        JPanel deletePanel = new JPanel(new GridBagLayout());&#10;        deletePanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createLineBorder(new Color(144, 238, 144), 1), &quot;刪除節點&quot;));&#10;        deletePanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints deleteGbc = new GridBagConstraints();&#10;        deleteGbc.insets = new Insets(5, 5, 5, 5);&#10;        deleteGbc.anchor = GridBagConstraints.WEST;&#10;&#10;        deleteIdxField = new JTextField(12);&#10;        deleteIdxField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        deleteIdxField.setHorizontalAlignment(JTextField.LEFT);&#10;&#10;        JButton deleteBtn = new JButton(&quot;刪除節點&quot;);&#10;        deleteBtn.setBackground(new Color(144, 238, 144));&#10;        deleteBtn.setForeground(Color.BLACK);&#10;        deleteBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        deleteBtn.setPreferredSize(new Dimension(120, 30));&#10;&#10;        deleteGbc.gridx = 0; deleteGbc.gridy = 0;&#10;        deletePanel.add(new JLabel(&quot;索引:&quot;), deleteGbc);&#10;        deleteGbc.gridx = 1;&#10;        deletePanel.add(deleteIdxField, deleteGbc);&#10;&#10;        deleteGbc.gridx = 0; deleteGbc.gridy = 1; deleteGbc.gridwidth = 2;&#10;        deleteGbc.fill = GridBagConstraints.HORIZONTAL;&#10;        deletePanel.add(deleteBtn, deleteGbc);&#10;&#10;        // 走訪選項區域&#10;        JPanel visitPanel = new JPanel(new GridBagLayout());&#10;        visitPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createLineBorder(new Color(144, 238, 144), 1), &quot;樹走訪&quot;));&#10;        visitPanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints visitGbc = new GridBagConstraints();&#10;        visitGbc.insets = new Insets(5, 5, 5, 5);&#10;        visitGbc.anchor = GridBagConstraints.WEST;&#10;        visitGbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        inorderBtn = new JRadioButton(&quot;中序 (Inorder)&quot;);&#10;        preorderBtn = new JRadioButton(&quot;前序 (Preorder)&quot;);&#10;        postorderBtn = new JRadioButton(&quot;後序 (Postorder)&quot;);&#10;&#10;        inorderBtn.setBackground(Color.WHITE);&#10;        preorderBtn.setBackground(Color.WHITE);&#10;        postorderBtn.setBackground(Color.WHITE);&#10;&#10;        visitBtn = new JButton(&quot;執行走訪&quot;);&#10;        visitBtn.setBackground(new Color(144, 238, 144));&#10;        visitBtn.setForeground(Color.BLACK);&#10;        visitBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;&#10;        stepBtn = new JButton(&quot;逐步顯示&quot;);&#10;        stepBtn.setBackground(new Color(144, 238, 144));&#10;        stepBtn.setForeground(Color.BLACK);&#10;        stepBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;        stepBtn.setEnabled(false);&#10;&#10;        resetBtn = new JButton(&quot;重置&quot;);&#10;        resetBtn.setBackground(new Color(144, 238, 144));&#10;        resetBtn.setForeground(Color.BLACK);&#10;        resetBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;        resetBtn.setEnabled(false);&#10;&#10;        visitGbc.gridx = 0; visitGbc.gridy = 0; visitGbc.gridwidth = 3;&#10;        visitPanel.add(inorderBtn, visitGbc);&#10;        visitGbc.gridy = 1;&#10;        visitPanel.add(preorderBtn, visitGbc);&#10;        visitGbc.gridy = 2;&#10;        visitPanel.add(postorderBtn, visitGbc);&#10;&#10;        // 控制按鈕區域&#10;        JPanel controlPanel = new JPanel(new GridLayout(1, 3, 3, 3));&#10;        controlPanel.setBackground(Color.WHITE);&#10;        controlPanel.add(visitBtn);&#10;        controlPanel.add(stepBtn);&#10;        controlPanel.add(resetBtn);&#10;&#10;        visitGbc.gridy = 3; visitGbc.insets = new Insets(10, 5, 5, 5);&#10;        visitPanel.add(controlPanel, visitGbc);&#10;&#10;        // 將各個面板添加到左側主面板&#10;        leftGbc.gridx = 0; leftGbc.gridy = 0; leftGbc.weightx = 1.0;&#10;        leftPanel.add(insertPanel, leftGbc);&#10;&#10;        leftGbc.gridy = 1; leftGbc.insets = new Insets(5, 10, 5, 10);&#10;        leftPanel.add(deletePanel, leftGbc);&#10;&#10;        leftGbc.gridy = 2; leftGbc.weighty = 1.0;&#10;        leftPanel.add(visitPanel, leftGbc);&#10;&#10;        centerPanel.add(leftPanel, BorderLayout.WEST);&#10;&#10;        // 右側樹狀顯示區&#10;        JPanel rightPanel = new JPanel(new BorderLayout());&#10;        rightPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;樹狀結構視覺化&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        rightPanel.setBackground(Color.WHITE);&#10;&#10;        treePanel = new TreeVisualizationPanel();&#10;        rightPanel.add(treePanel, BorderLayout.CENTER);&#10;&#10;        centerPanel.add(rightPanel, BorderLayout.CENTER);&#10;        add(centerPanel, BorderLayout.CENTER);&#10;&#10;        // 底部資訊面板&#10;        JPanel bottomPanel = new JPanel(new BorderLayout());&#10;&#10;        // 節點數顯示&#10;        JPanel infoPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;        infoPanel.setBackground(new Color(248, 249, 250));&#10;        nodeCountLabel = new JLabel(&quot;節點數: 0&quot;);&#10;        nodeCountLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        nodeCountLabel.setForeground(new Color(0, 123, 255));&#10;        infoPanel.add(nodeCountLabel);&#10;        bottomPanel.add(infoPanel, BorderLayout.NORTH);&#10;&#10;        // 輸出結果區&#10;        JPanel outputPanel = new JPanel(new BorderLayout());&#10;        outputPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;走訪結果&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        outputPanel.setBackground(Color.WHITE);&#10;&#10;        outputArea = new JTextArea(6, 80);&#10;        outputArea.setEditable(false);&#10;        outputArea.setFont(new Font(&quot;Courier New&quot;, Font.PLAIN, 12));&#10;        outputArea.setBackground(new Color(248, 249, 250));&#10;        outputArea.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));&#10;        outputPanel.add(new JScrollPane(outputArea), BorderLayout.CENTER);&#10;&#10;        bottomPanel.add(outputPanel, BorderLayout.CENTER);&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;&#10;        // 事件處理&#10;        buildBtn.addActionListener(e -&gt; buildTreeFromInput());&#10;        autoBtn.addActionListener(e -&gt; buildTreeAuto(autoNField.getText()));&#10;        insertBtn.addActionListener(e -&gt; insertNode());&#10;        deleteBtn.addActionListener(e -&gt; deleteNode());&#10;        visitBtn.addActionListener(e -&gt; visitTree());&#10;        stepBtn.addActionListener(e -&gt; stepTraversal());&#10;        resetBtn.addActionListener(e -&gt; resetTraversal());&#10;&#10;        // 初始化 Timer&#10;        walkTimer = new javax.swing.Timer(800, e -&gt; {&#10;            if (treePanel.hasMoreSteps()) {&#10;                treePanel.showNextVisitStep();&#10;            } else {&#10;                walkTimer.stop();&#10;                stepBtn.setEnabled(false);&#10;            }&#10;        });&#10;&#10;        // 設定視窗居中&#10;        setLocationRelativeTo(null);&#10;    }&#10;&#10;    private void buildTreeFromInput() {&#10;        String input = inputField.getText().trim();&#10;        arr = BinaryTreeArray.parseInput(input);&#10;        tree = new BinaryTreeArray(arr);&#10;        outputArea.setText(&quot;建立樹的陣列參數: &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;        updateDisplay(false);&#10;    }&#10;&#10;    private void buildTreeAuto(String nStr) {&#10;        int n;&#10;        try {&#10;            n = Integer.parseInt(nStr.trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;請輸入正整數N&quot;);&#10;            return;&#10;        }&#10;        if (n &lt;= 0) {&#10;            JOptionPane.showMessageDialog(this, &quot;N必須大於0&quot;);&#10;            return;&#10;        }&#10;        Set&lt;Integer&gt; nums = new LinkedHashSet&lt;&gt;();&#10;        Random rand = new Random();&#10;        while (nums.size() &lt; n) nums.add(rand.nextInt(10000));&#10;        arr = new Integer[n + 1];&#10;        arr[0] = n;&#10;        int i = 1;&#10;        for (int num : nums) arr[i++] = num;&#10;        tree = new BinaryTreeArray(arr);&#10;        inputField.setText(&quot;&quot;);&#10;        outputArea.setText(&quot;建立樹的陣列參數: &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;        updateDisplay(false);&#10;    }&#10;&#10;    private void insertNode() {&#10;        if (arr == null) return;&#10;        int idx;&#10;        try {&#10;            idx = Integer.parseInt(insertIdxField.getText().trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;請輸入索引&quot;);&#10;            return;&#10;        }&#10;        String valStr = insertValField.getText().trim();&#10;        Integer val = valStr.equalsIgnoreCase(&quot;null&quot;) ? null : null;&#10;        if (!valStr.equalsIgnoreCase(&quot;null&quot;)) {&#10;            try {&#10;                val = Integer.parseInt(valStr);&#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &quot;請輸入整數或null&quot;);&#10;                return;&#10;            }&#10;        }&#10;        if (idx &gt; 0 &amp;&amp; idx &lt; arr.length) {&#10;            if (arr[idx] == null &amp;&amp; val != null) arr[0]++;&#10;            if (arr[idx] != null &amp;&amp; val == null) arr[0]--;&#10;            arr[idx] = val;&#10;            tree = new BinaryTreeArray(arr);&#10;            updateDisplay(false);&#10;        } else {&#10;            JOptionPane.showMessageDialog(this, &quot;索引超出範圍&quot;);&#10;        }&#10;    }&#10;&#10;    private void deleteNode() {&#10;        if (arr == null) return;&#10;        int idx;&#10;        try {&#10;            idx = Integer.parseInt(deleteIdxField.getText().trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;請輸入索引&quot;);&#10;            return;&#10;        }&#10;        int[] delCount = new int[]{0};&#10;        countDelete(arr, idx, delCount);&#10;        tree.delete(idx);&#10;        arr[0] -= delCount[0];&#10;        updateDisplay(false);&#10;    }&#10;&#10;    private void updateDisplay(boolean showTraversal) {&#10;        if (arr == null) return;&#10;        nodeCountLabel.setText(&quot;節點數: &quot; + arr[0]);&#10;&#10;        // 更新樹狀視覺化&#10;        treePanel.setTreeArray(arr);&#10;&#10;        if (tree != null &amp;&amp; showTraversal) {&#10;            StringBuilder sb = new StringBuilder();&#10;            if (inorderBtn.isSelected()) {&#10;                sb.append(&quot;中序: &quot;).append(tree.inorder()).append(&quot;\n&quot;);&#10;            }&#10;            if (preorderBtn.isSelected()) {&#10;                sb.append(&quot;前序: &quot;).append(tree.preorder()).append(&quot;\n&quot;);&#10;            }&#10;            if (postorderBtn.isSelected()) {&#10;                sb.append(&quot;後序: &quot;).append(tree.postorder()).append(&quot;\n&quot;);&#10;            }&#10;            if (sb.length() == 0) {&#10;                sb.append(&quot;請至少選擇一種走訪方式&quot;);&#10;            }&#10;            outputArea.setText(sb.toString());&#10;        }&#10;    }&#10;&#10;    // 遞迴計算將被刪除的節點數&#10;    private static void countDelete(Integer[] arr, int idx, int[] count) {&#10;        if (idx &lt;= 0 || idx &gt;= arr.length || arr[idx] == null) return;&#10;        count[0]++;&#10;        countDelete(arr, 2 * idx, count);&#10;        countDelete(arr, 2 * idx + 1, count);&#10;    }&#10;&#10;    private void visitTree() {&#10;        if (tree == null) return;&#10;&#10;        currentTraversalPath = new ArrayList&lt;&gt;();&#10;        StringBuilder sb = new StringBuilder();&#10;&#10;        if (inorderBtn.isSelected()) {&#10;            java.util.List&lt;Integer&gt; inorderResult = tree.inorder();&#10;            currentTraversalPath.addAll(inorderResult);&#10;            sb.append(&quot;中序: &quot;).append(inorderResult).append(&quot;\n&quot;);&#10;        }&#10;        if (preorderBtn.isSelected()) {&#10;            java.util.List&lt;Integer&gt; preorderResult = tree.preorder();&#10;            if (!inorderBtn.isSelected()) currentTraversalPath.addAll(preorderResult);&#10;            sb.append(&quot;前序: &quot;).append(preorderResult).append(&quot;\n&quot;);&#10;        }&#10;        if (postorderBtn.isSelected()) {&#10;            java.util.List&lt;Integer&gt; postorderResult = tree.postorder();&#10;            if (!inorderBtn.isSelected() &amp;&amp; !preorderBtn.isSelected()) currentTraversalPath.addAll(postorderResult);&#10;            sb.append(&quot;後序: &quot;).append(postorderResult).append(&quot;\n&quot;);&#10;        }&#10;&#10;        if (sb.length() == 0) {&#10;            sb.append(&quot;請至少選擇一種走訪方式&quot;);&#10;            outputArea.setText(sb.toString());&#10;            return;&#10;        }&#10;&#10;        // 設定走訪路徑到視覺化面板&#10;        treePanel.setVisitPath(currentTraversalPath);&#10;        outputArea.setText(sb.toString());&#10;&#10;        // 啟用控制按鈕&#10;        stepBtn.setEnabled(true);&#10;        resetBtn.setEnabled(true);&#10;    }&#10;&#10;    private void stepTraversal() {&#10;        if (currentTraversalPath != null &amp;&amp; !currentTraversalPath.isEmpty()) {&#10;            if (treePanel.hasMoreSteps()) {&#10;                treePanel.showNextVisitStep();&#10;                if (!treePanel.hasMoreSteps()) {&#10;                    stepBtn.setEnabled(false);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private void resetTraversal() {&#10;        if (walkTimer.isRunning()) {&#10;            walkTimer.stop();&#10;        }&#10;        treePanel.clearVisitPath();&#10;        stepBtn.setEnabled(currentTraversalPath != null &amp;&amp; !currentTraversalPath.isEmpty());&#10;        resetBtn.setEnabled(false);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            BinaryTreeArrayGUI gui = new BinaryTreeArrayGUI();&#10;            gui.setVisible(true);&#10;        });&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.*;&#10;import java.util.*;&#10;import java.util.stream.IntStream;&#10;&#10;public class BinaryTreeArrayGUI extends JFrame {&#10;    private BinaryTreeArray tree;&#10;    private Integer[] arr;&#10;    private JTextField inputField;&#10;    private JTextField insertIdxField, insertValField;&#10;    private JTextField deleteIdxField;&#10;    private JTextArea outputArea;&#10;    private JLabel nodeCountLabel;&#10;    private TreeVisualizationPanel treePanel;&#10;    private JRadioButton inorderBtn, preorderBtn, postorderBtn;&#10;    private JButton visitBtn;&#10;    private JButton stepBtn, resetBtn;&#10;    private javax.swing.Timer walkTimer;&#10;    private java.util.List&lt;Integer&gt; currentTraversalPath;&#10;&#10;    public BinaryTreeArrayGUI() {&#10;        setTitle(&quot;Binary Tree/Heap 教學系統&quot;);&#10;        setDefaultCloseOperation(EXIT_ON_CLOSE);&#10;        setSize(1000, 800);&#10;        setLayout(new BorderLayout(10, 10));&#10;&#10;        // 設定主要背景色&#10;        getContentPane().setBackground(new Color(248, 249, 250));&#10;&#10;        // 頂部輸入面板&#10;        JPanel topPanel = new JPanel(new GridBagLayout());&#10;        topPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;建立二元樹&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        topPanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;&#10;        inputField = new JTextField(25);&#10;        inputField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        JButton buildBtn = new JButton(&quot;建立/重設樹&quot;);&#10;        buildBtn.setBackground(new Color(144, 238, 144));  // 淡綠色背景&#10;        buildBtn.setForeground(Color.BLACK);  // 黑色文字&#10;        buildBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;&#10;        JButton autoBtn = new JButton(&quot;自動產生隨機數&quot;);&#10;        autoBtn.setBackground(new Color(144, 238, 144));  // 淡綠色背景&#10;        autoBtn.setForeground(Color.BLACK);  // 黑色文字&#10;        autoBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        JTextField autoNField = new JTextField(5);&#10;        autoNField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        topPanel.add(new JLabel(&quot;輸入陣列(逗號分隔, null為空):&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(inputField, gbc);&#10;        gbc.gridx = 2;&#10;        topPanel.add(buildBtn, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        topPanel.add(new JLabel(&quot;或產生 N 個隨機數:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(autoNField, gbc);&#10;        gbc.gridx = 2;&#10;        topPanel.add(autoBtn, gbc);&#10;&#10;        add(topPanel, BorderLayout.NORTH);&#10;&#10;        // 中央操作面板&#10;        JPanel centerPanel = new JPanel(new BorderLayout());&#10;&#10;        // 左側操作區&#10;        JPanel leftPanel = new JPanel(new GridBagLayout());&#10;        leftPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;節點操作&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        leftPanel.setBackground(Color.WHITE);&#10;        leftPanel.setPreferredSize(new Dimension(300, 0));&#10;&#10;        GridBagConstraints leftGbc = new GridBagConstraints();&#10;        leftGbc.insets = new Insets(10, 10, 5, 10);&#10;        leftGbc.anchor = GridBagConstraints.WEST;&#10;        leftGbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        // 插入/修改節點區域&#10;        JPanel insertPanel = new JPanel(new GridBagLayout());&#10;        insertPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createLineBorder(new Color(144, 238, 144), 1), &quot;插入/修改節點&quot;));&#10;        insertPanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints insertGbc = new GridBagConstraints();&#10;        insertGbc.insets = new Insets(8, 8, 8, 8);&#10;        insertGbc.anchor = GridBagConstraints.WEST;&#10;&#10;        insertIdxField = new JTextField(15);&#10;        insertValField = new JTextField(15);&#10;        insertIdxField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        insertValField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        insertIdxField.setHorizontalAlignment(JTextField.LEFT);&#10;        insertValField.setHorizontalAlignment(JTextField.LEFT);&#10;        &#10;        // 設定較大的首選大小&#10;        insertIdxField.setPreferredSize(new Dimension(150, 28));&#10;        insertValField.setPreferredSize(new Dimension(150, 28));&#10;&#10;        JButton insertBtn = new JButton(&quot;插入/修改&quot;);&#10;        insertBtn.setBackground(new Color(144, 238, 144));&#10;        insertBtn.setForeground(Color.BLACK);&#10;        insertBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        insertBtn.setPreferredSize(new Dimension(140, 32));&#10;&#10;        insertGbc.gridx = 0; insertGbc.gridy = 0;&#10;        insertPanel.add(new JLabel(&quot;索引:&quot;), insertGbc);&#10;        insertGbc.gridx = 1; insertGbc.weightx = 1.0; insertGbc.fill = GridBagConstraints.HORIZONTAL;&#10;        insertPanel.add(insertIdxField, insertGbc);&#10;&#10;        insertGbc.gridx = 0; insertGbc.gridy = 1; insertGbc.weightx = 0.0; insertGbc.fill = GridBagConstraints.NONE;&#10;        insertPanel.add(new JLabel(&quot;值:&quot;), insertGbc);&#10;        insertGbc.gridx = 1; insertGbc.weightx = 1.0; insertGbc.fill = GridBagConstraints.HORIZONTAL;&#10;        insertPanel.add(insertValField, insertGbc);&#10;&#10;        insertGbc.gridx = 0; insertGbc.gridy = 2; insertGbc.gridwidth = 2; insertGbc.weightx = 0.0;&#10;        insertGbc.fill = GridBagConstraints.HORIZONTAL; insertGbc.insets = new Insets(12, 8, 8, 8);&#10;        insertPanel.add(insertBtn, insertGbc);&#10;&#10;        // 刪除節點區域&#10;        JPanel deletePanel = new JPanel(new GridBagLayout());&#10;        deletePanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createLineBorder(new Color(144, 238, 144), 1), &quot;刪除節點&quot;));&#10;        deletePanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints deleteGbc = new GridBagConstraints();&#10;        deleteGbc.insets = new Insets(8, 8, 8, 8);&#10;        deleteGbc.anchor = GridBagConstraints.WEST;&#10;&#10;        deleteIdxField = new JTextField(15);&#10;        deleteIdxField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        deleteIdxField.setHorizontalAlignment(JTextField.LEFT);&#10;        deleteIdxField.setPreferredSize(new Dimension(150, 28));&#10;&#10;        JButton deleteBtn = new JButton(&quot;刪除節點&quot;);&#10;        deleteBtn.setBackground(new Color(144, 238, 144));&#10;        deleteBtn.setForeground(Color.BLACK);&#10;        deleteBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        deleteBtn.setPreferredSize(new Dimension(140, 32));&#10;&#10;        deleteGbc.gridx = 0; deleteGbc.gridy = 0;&#10;        deletePanel.add(new JLabel(&quot;索引:&quot;), deleteGbc);&#10;        deleteGbc.gridx = 1; deleteGbc.weightx = 1.0; deleteGbc.fill = GridBagConstraints.HORIZONTAL;&#10;        deletePanel.add(deleteIdxField, deleteGbc);&#10;&#10;        deleteGbc.gridx = 0; deleteGbc.gridy = 1; deleteGbc.gridwidth = 2; deleteGbc.weightx = 0.0;&#10;        deleteGbc.fill = GridBagConstraints.HORIZONTAL; deleteGbc.insets = new Insets(12, 8, 8, 8);&#10;        deletePanel.add(deleteBtn, deleteGbc);&#10;&#10;        // 走訪選項區域&#10;        JPanel visitPanel = new JPanel(new GridBagLayout());&#10;        visitPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createLineBorder(new Color(144, 238, 144), 1), &quot;樹走訪&quot;));&#10;        visitPanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints visitGbc = new GridBagConstraints();&#10;        visitGbc.insets = new Insets(5, 5, 5, 5);&#10;        visitGbc.anchor = GridBagConstraints.WEST;&#10;        visitGbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        inorderBtn = new JRadioButton(&quot;中序 (Inorder)&quot;);&#10;        preorderBtn = new JRadioButton(&quot;前序 (Preorder)&quot;);&#10;        postorderBtn = new JRadioButton(&quot;後序 (Postorder)&quot;);&#10;&#10;        inorderBtn.setBackground(Color.WHITE);&#10;        preorderBtn.setBackground(Color.WHITE);&#10;        postorderBtn.setBackground(Color.WHITE);&#10;&#10;        visitBtn = new JButton(&quot;執行走訪&quot;);&#10;        visitBtn.setBackground(new Color(144, 238, 144));&#10;        visitBtn.setForeground(Color.BLACK);&#10;        visitBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;&#10;        stepBtn = new JButton(&quot;逐步顯示&quot;);&#10;        stepBtn.setBackground(new Color(144, 238, 144));&#10;        stepBtn.setForeground(Color.BLACK);&#10;        stepBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;        stepBtn.setEnabled(false);&#10;&#10;        resetBtn = new JButton(&quot;重置&quot;);&#10;        resetBtn.setBackground(new Color(144, 238, 144));&#10;        resetBtn.setForeground(Color.BLACK);&#10;        resetBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;        resetBtn.setEnabled(false);&#10;&#10;        visitGbc.gridx = 0; visitGbc.gridy = 0; visitGbc.gridwidth = 3;&#10;        visitPanel.add(inorderBtn, visitGbc);&#10;        visitGbc.gridy = 1;&#10;        visitPanel.add(preorderBtn, visitGbc);&#10;        visitGbc.gridy = 2;&#10;        visitPanel.add(postorderBtn, visitGbc);&#10;&#10;        // 控制按鈕區域&#10;        JPanel controlPanel = new JPanel(new GridLayout(1, 3, 3, 3));&#10;        controlPanel.setBackground(Color.WHITE);&#10;        controlPanel.add(visitBtn);&#10;        controlPanel.add(stepBtn);&#10;        controlPanel.add(resetBtn);&#10;&#10;        visitGbc.gridy = 3; visitGbc.insets = new Insets(10, 5, 5, 5);&#10;        visitPanel.add(controlPanel, visitGbc);&#10;&#10;        // 將各個面板添加到左側主面板&#10;        leftGbc.gridx = 0; leftGbc.gridy = 0; leftGbc.weightx = 1.0;&#10;        leftPanel.add(insertPanel, leftGbc);&#10;&#10;        leftGbc.gridy = 1; leftGbc.insets = new Insets(5, 10, 5, 10);&#10;        leftPanel.add(deletePanel, leftGbc);&#10;&#10;        leftGbc.gridy = 2; leftGbc.weighty = 1.0;&#10;        leftPanel.add(visitPanel, leftGbc);&#10;&#10;        centerPanel.add(leftPanel, BorderLayout.WEST);&#10;&#10;        // 右側樹狀顯示區&#10;        JPanel rightPanel = new JPanel(new BorderLayout());&#10;        rightPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;樹狀結構視覺化&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        rightPanel.setBackground(Color.WHITE);&#10;&#10;        treePanel = new TreeVisualizationPanel();&#10;        rightPanel.add(treePanel, BorderLayout.CENTER);&#10;&#10;        centerPanel.add(rightPanel, BorderLayout.CENTER);&#10;        add(centerPanel, BorderLayout.CENTER);&#10;&#10;        // 底部資訊面板&#10;        JPanel bottomPanel = new JPanel(new BorderLayout());&#10;&#10;        // 節點數顯示&#10;        JPanel infoPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;        infoPanel.setBackground(new Color(248, 249, 250));&#10;        nodeCountLabel = new JLabel(&quot;節點數: 0&quot;);&#10;        nodeCountLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        nodeCountLabel.setForeground(new Color(0, 123, 255));&#10;        infoPanel.add(nodeCountLabel);&#10;        bottomPanel.add(infoPanel, BorderLayout.NORTH);&#10;&#10;        // 輸出結果區&#10;        JPanel outputPanel = new JPanel(new BorderLayout());&#10;        outputPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;走訪結果&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        outputPanel.setBackground(Color.WHITE);&#10;&#10;        outputArea = new JTextArea(6, 80);&#10;        outputArea.setEditable(false);&#10;        outputArea.setFont(new Font(&quot;Courier New&quot;, Font.PLAIN, 12));&#10;        outputArea.setBackground(new Color(248, 249, 250));&#10;        outputArea.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));&#10;        outputPanel.add(new JScrollPane(outputArea), BorderLayout.CENTER);&#10;&#10;        bottomPanel.add(outputPanel, BorderLayout.CENTER);&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;&#10;        // 事件處理&#10;        buildBtn.addActionListener(e -&gt; buildTreeFromInput());&#10;        autoBtn.addActionListener(e -&gt; buildTreeAuto(autoNField.getText()));&#10;        insertBtn.addActionListener(e -&gt; insertNode());&#10;        deleteBtn.addActionListener(e -&gt; deleteNode());&#10;        visitBtn.addActionListener(e -&gt; visitTree());&#10;        stepBtn.addActionListener(e -&gt; stepTraversal());&#10;        resetBtn.addActionListener(e -&gt; resetTraversal());&#10;&#10;        // 初始化 Timer&#10;        walkTimer = new javax.swing.Timer(800, e -&gt; {&#10;            if (treePanel.hasMoreSteps()) {&#10;                treePanel.showNextVisitStep();&#10;            } else {&#10;                walkTimer.stop();&#10;                stepBtn.setEnabled(false);&#10;            }&#10;        });&#10;&#10;        // 設定視窗居中&#10;        setLocationRelativeTo(null);&#10;    }&#10;&#10;    private void buildTreeFromInput() {&#10;        String input = inputField.getText().trim();&#10;        arr = BinaryTreeArray.parseInput(input);&#10;        tree = new BinaryTreeArray(arr);&#10;        outputArea.setText(&quot;建立樹的陣列參數: &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;        updateDisplay(false);&#10;    }&#10;&#10;    private void buildTreeAuto(String nStr) {&#10;        int n;&#10;        try {&#10;            n = Integer.parseInt(nStr.trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;請輸入正整數N&quot;);&#10;            return;&#10;        }&#10;        if (n &lt;= 0) {&#10;            JOptionPane.showMessageDialog(this, &quot;N必須大於0&quot;);&#10;            return;&#10;        }&#10;        Set&lt;Integer&gt; nums = new LinkedHashSet&lt;&gt;();&#10;        Random rand = new Random();&#10;        while (nums.size() &lt; n) nums.add(rand.nextInt(10000));&#10;        arr = new Integer[n + 1];&#10;        arr[0] = n;&#10;        int i = 1;&#10;        for (int num : nums) arr[i++] = num;&#10;        tree = new BinaryTreeArray(arr);&#10;        inputField.setText(&quot;&quot;);&#10;        outputArea.setText(&quot;建立樹的陣列參數: &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;        updateDisplay(false);&#10;    }&#10;&#10;    private void insertNode() {&#10;        if (arr == null) return;&#10;        int idx;&#10;        try {&#10;            idx = Integer.parseInt(insertIdxField.getText().trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;請輸入索引&quot;);&#10;            return;&#10;        }&#10;        String valStr = insertValField.getText().trim();&#10;        Integer val = valStr.equalsIgnoreCase(&quot;null&quot;) ? null : null;&#10;        if (!valStr.equalsIgnoreCase(&quot;null&quot;)) {&#10;            try {&#10;                val = Integer.parseInt(valStr);&#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &quot;請輸入整數或null&quot;);&#10;                return;&#10;            }&#10;        }&#10;        if (idx &gt; 0 &amp;&amp; idx &lt; arr.length) {&#10;            if (arr[idx] == null &amp;&amp; val != null) arr[0]++;&#10;            if (arr[idx] != null &amp;&amp; val == null) arr[0]--;&#10;            arr[idx] = val;&#10;            tree = new BinaryTreeArray(arr);&#10;            updateDisplay(false);&#10;        } else {&#10;            JOptionPane.showMessageDialog(this, &quot;索引超出範圍&quot;);&#10;        }&#10;    }&#10;&#10;    private void deleteNode() {&#10;        if (arr == null) return;&#10;        int idx;&#10;        try {&#10;            idx = Integer.parseInt(deleteIdxField.getText().trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;請輸入索引&quot;);&#10;            return;&#10;        }&#10;        int[] delCount = new int[]{0};&#10;        countDelete(arr, idx, delCount);&#10;        tree.delete(idx);&#10;        arr[0] -= delCount[0];&#10;        updateDisplay(false);&#10;    }&#10;&#10;    private void updateDisplay(boolean showTraversal) {&#10;        if (arr == null) return;&#10;        nodeCountLabel.setText(&quot;節點數: &quot; + arr[0]);&#10;&#10;        // 更新樹狀視覺化&#10;        treePanel.setTreeArray(arr);&#10;&#10;        if (tree != null &amp;&amp; showTraversal) {&#10;            StringBuilder sb = new StringBuilder();&#10;            if (inorderBtn.isSelected()) {&#10;                sb.append(&quot;中序: &quot;).append(tree.inorder()).append(&quot;\n&quot;);&#10;            }&#10;            if (preorderBtn.isSelected()) {&#10;                sb.append(&quot;前序: &quot;).append(tree.preorder()).append(&quot;\n&quot;);&#10;            }&#10;            if (postorderBtn.isSelected()) {&#10;                sb.append(&quot;後序: &quot;).append(tree.postorder()).append(&quot;\n&quot;);&#10;            }&#10;            if (sb.length() == 0) {&#10;                sb.append(&quot;請至少選擇一種走訪方式&quot;);&#10;            }&#10;            outputArea.setText(sb.toString());&#10;        }&#10;    }&#10;&#10;    // 遞迴計算將被刪除的節點數&#10;    private static void countDelete(Integer[] arr, int idx, int[] count) {&#10;        if (idx &lt;= 0 || idx &gt;= arr.length || arr[idx] == null) return;&#10;        count[0]++;&#10;        countDelete(arr, 2 * idx, count);&#10;        countDelete(arr, 2 * idx + 1, count);&#10;    }&#10;&#10;    private void visitTree() {&#10;        if (tree == null) return;&#10;&#10;        currentTraversalPath = new ArrayList&lt;&gt;();&#10;        StringBuilder sb = new StringBuilder();&#10;&#10;        if (inorderBtn.isSelected()) {&#10;            java.util.List&lt;Integer&gt; inorderResult = tree.inorder();&#10;            currentTraversalPath.addAll(inorderResult);&#10;            sb.append(&quot;中序: &quot;).append(inorderResult).append(&quot;\n&quot;);&#10;        }&#10;        if (preorderBtn.isSelected()) {&#10;            java.util.List&lt;Integer&gt; preorderResult = tree.preorder();&#10;            if (!inorderBtn.isSelected()) currentTraversalPath.addAll(preorderResult);&#10;            sb.append(&quot;前序: &quot;).append(preorderResult).append(&quot;\n&quot;);&#10;        }&#10;        if (postorderBtn.isSelected()) {&#10;            java.util.List&lt;Integer&gt; postorderResult = tree.postorder();&#10;            if (!inorderBtn.isSelected() &amp;&amp; !preorderBtn.isSelected()) currentTraversalPath.addAll(postorderResult);&#10;            sb.append(&quot;後序: &quot;).append(postorderResult).append(&quot;\n&quot;);&#10;        }&#10;&#10;        if (sb.length() == 0) {&#10;            sb.append(&quot;請至少選擇一種走訪方式&quot;);&#10;            outputArea.setText(sb.toString());&#10;            return;&#10;        }&#10;&#10;        // 設定走訪路徑到視覺化面板&#10;        treePanel.setVisitPath(currentTraversalPath);&#10;        outputArea.setText(sb.toString());&#10;&#10;        // 啟用控制按鈕&#10;        stepBtn.setEnabled(true);&#10;        resetBtn.setEnabled(true);&#10;    }&#10;&#10;    private void stepTraversal() {&#10;        if (currentTraversalPath != null &amp;&amp; !currentTraversalPath.isEmpty()) {&#10;            if (treePanel.hasMoreSteps()) {&#10;                treePanel.showNextVisitStep();&#10;                if (!treePanel.hasMoreSteps()) {&#10;                    stepBtn.setEnabled(false);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private void resetTraversal() {&#10;        if (walkTimer.isRunning()) {&#10;            walkTimer.stop();&#10;        }&#10;        treePanel.clearVisitPath();&#10;        stepBtn.setEnabled(currentTraversalPath != null &amp;&amp; !currentTraversalPath.isEmpty());&#10;        resetBtn.setEnabled(false);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            BinaryTreeArrayGUI gui = new BinaryTreeArrayGUI();&#10;            gui.setVisible(true);&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0729-Tree/src/TreeVisualizationPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0729-Tree/src/TreeVisualizationPanel.java" />
              <option name="originalContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.geom.Ellipse2D;&#10;import java.awt.geom.Line2D;&#10;import java.util.ArrayList;&#10;&#10;public class TreeVisualizationPanel extends JPanel {&#10;    private Integer[] treeArray;&#10;    private java.util.List&lt;Integer&gt; visitPath;&#10;    private int currentVisitIndex;&#10;    private static final int NODE_RADIUS = 20;&#10;    private static final int LEVEL_HEIGHT = 80;&#10;    private static final int MIN_HORIZONTAL_SPACING = 50;&#10;&#10;    public TreeVisualizationPanel() {&#10;        setBackground(new Color(248, 249, 250));&#10;        setPreferredSize(new Dimension(600, 400));&#10;        visitPath = new ArrayList&lt;&gt;();&#10;        currentVisitIndex = -1;&#10;    }&#10;&#10;    public void setTreeArray(Integer[] arr) {&#10;        this.treeArray = arr;&#10;        clearVisitPath();&#10;        repaint();&#10;    }&#10;&#10;    public void setVisitPath(java.util.List&lt;Integer&gt; path) {&#10;        this.visitPath = path;&#10;        this.currentVisitIndex = -1;&#10;        repaint();&#10;    }&#10;&#10;    public void showNextVisitStep() {&#10;        if (currentVisitIndex &lt; visitPath.size() - 1) {&#10;            currentVisitIndex++;&#10;            repaint();&#10;        }&#10;    }&#10;&#10;    public void clearVisitPath() {&#10;        this.visitPath.clear();&#10;        this.currentVisitIndex = -1;&#10;        repaint();&#10;    }&#10;&#10;    public boolean hasMoreSteps() {&#10;        return currentVisitIndex &lt; visitPath.size() - 1;&#10;    }&#10;&#10;    @Override&#10;    protected void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;        if (treeArray == null || treeArray.length &lt;= 1) return;&#10;&#10;        Graphics2D g2d = (Graphics2D) g.create();&#10;        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;        g2d.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;&#10;        // 計算樹的最大層數&#10;        int maxLevel = (int) (Math.log(treeArray.length - 1) / Math.log(2)) + 1;&#10;&#10;        // 先畫連接線，再畫節點（避免線條覆蓋節點）&#10;        drawConnections(g2d, maxLevel);&#10;        drawNodes(g2d, maxLevel);&#10;&#10;        g2d.dispose();&#10;    }&#10;&#10;    private void drawConnections(Graphics2D g2d, int maxLevel) {&#10;        g2d.setColor(Color.BLACK);&#10;        g2d.setStroke(new BasicStroke(2));&#10;&#10;        for (int i = 1; i &lt; treeArray.length; i++) {&#10;            if (treeArray[i] == null) continue;&#10;&#10;            int leftChild = 2 * i;&#10;            int rightChild = 2 * i + 1;&#10;&#10;            Point parentPos = getNodePosition(i, maxLevel);&#10;&#10;            // 畫左子節點連線&#10;            if (leftChild &lt; treeArray.length &amp;&amp; treeArray[leftChild] != null) {&#10;                Point leftPos = getNodePosition(leftChild, maxLevel);&#10;                g2d.draw(new Line2D.Double(parentPos.x, parentPos.y, leftPos.x, leftPos.y));&#10;            }&#10;&#10;            // 畫右子節點連線&#10;            if (rightChild &lt; treeArray.length &amp;&amp; treeArray[rightChild] != null) {&#10;                Point rightPos = getNodePosition(rightChild, maxLevel);&#10;                g2d.draw(new Line2D.Double(parentPos.x, parentPos.y, rightPos.x, rightPos.y));&#10;            }&#10;        }&#10;    }&#10;&#10;    private void drawNodes(Graphics2D g2d, int maxLevel) {&#10;        for (int i = 1; i &lt; treeArray.length; i++) {&#10;            if (treeArray[i] == null) continue;&#10;&#10;            Point pos = getNodePosition(i, maxLevel);&#10;            boolean isRoot = (i == 1);&#10;            boolean isLeaf = isLeafNode(i);&#10;            boolean isCurrentVisit = currentVisitIndex &gt;= 0 &amp;&amp; currentVisitIndex &lt; visitPath.size()&#10;                                   &amp;&amp; visitPath.get(currentVisitIndex).equals(treeArray[i]);&#10;            boolean isVisited = isNodeVisited(treeArray[i]);&#10;&#10;            // 設定節點顏色&#10;            if (isCurrentVisit) {&#10;                g2d.setColor(new Color(255, 215, 0));  // 當前走訪節點：金黃色&#10;            } else if (isVisited) {&#10;                g2d.setColor(new Color(144, 238, 144));  // 已走訪節點：淡綠色&#10;            } else if (isRoot) {&#10;                g2d.setColor(Color.BLACK);  // 根節點黑色背景&#10;            } else if (isLeaf) {&#10;                g2d.setColor(Color.WHITE);  // 葉節點白色背景&#10;            } else {&#10;                g2d.setColor(new Color(200, 200, 200));  // 中間節點灰色背景&#10;            }&#10;&#10;            // 畫節點圓圈&#10;            Ellipse2D circle = new Ellipse2D.Double(&#10;                pos.x - NODE_RADIUS, pos.y - NODE_RADIUS,&#10;                2 * NODE_RADIUS, 2 * NODE_RADIUS&#10;            );&#10;            g2d.fill(circle);&#10;&#10;            // 畫節點邊框&#10;            if (isCurrentVisit) {&#10;                g2d.setColor(new Color(255, 140, 0));  // 當前節點橙色邊框&#10;                g2d.setStroke(new BasicStroke(4));&#10;            } else {&#10;                g2d.setColor(Color.BLACK);&#10;                g2d.setStroke(new BasicStroke(2));&#10;            }&#10;            g2d.draw(circle);&#10;&#10;            // 設定文字顏色&#10;            if (isRoot &amp;&amp; !isCurrentVisit &amp;&amp; !isVisited) {&#10;                g2d.setColor(Color.WHITE);  // 根節點白色文字&#10;            } else {&#10;                g2d.setColor(Color.BLACK);  // 其他節點黑色文字&#10;            }&#10;&#10;            // 畫節點值&#10;            String text = treeArray[i].toString();&#10;            FontMetrics fm = g2d.getFontMetrics();&#10;            int textWidth = fm.stringWidth(text);&#10;            int textHeight = fm.getAscent();&#10;            g2d.drawString(text,&#10;                pos.x - textWidth / 2,&#10;                pos.y + textHeight / 2 - 2);&#10;        }&#10;    }&#10;&#10;    private boolean isNodeVisited(Integer value) {&#10;        for (int i = 0; i &lt;= currentVisitIndex &amp;&amp; i &lt; visitPath.size(); i++) {&#10;            if (visitPath.get(i).equals(value)) {&#10;                return true;&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;&#10;    private Point getNodePosition(int index, int maxLevel) {&#10;        int level = (int) (Math.log(index) / Math.log(2));&#10;        int nodesInLevel = 1 &lt;&lt; level;&#10;        int positionInLevel = index - (1 &lt;&lt; level);&#10;&#10;        int panelWidth = getWidth();&#10;        int panelHeight = getHeight();&#10;&#10;        // 計算水平位置&#10;        int totalWidth = panelWidth - 2 * NODE_RADIUS;&#10;        int spacing = Math.max(MIN_HORIZONTAL_SPACING, totalWidth / (nodesInLevel + 1));&#10;        int x = NODE_RADIUS + spacing * (positionInLevel + 1);&#10;&#10;        // 確保節點在面板範圍內&#10;        if (nodesInLevel &gt; 1) {&#10;            x = NODE_RADIUS + (totalWidth * (positionInLevel + 1)) / (nodesInLevel + 1);&#10;        } else {&#10;            x = panelWidth / 2;&#10;        }&#10;&#10;        // 計算垂直位置&#10;        int y = NODE_RADIUS + 30 + level * LEVEL_HEIGHT;&#10;&#10;        return new Point(x, y);&#10;    }&#10;&#10;    private boolean isLeafNode(int index) {&#10;        int leftChild = 2 * index;&#10;        int rightChild = 2 * index + 1;&#10;&#10;        boolean hasLeftChild = leftChild &lt; treeArray.length &amp;&amp; treeArray[leftChild] != null;&#10;        boolean hasRightChild = rightChild &lt; treeArray.length &amp;&amp; treeArray[rightChild] != null;&#10;&#10;        return !hasLeftChild &amp;&amp; !hasRightChild;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.geom.Ellipse2D;&#10;import java.awt.geom.Line2D;&#10;import java.util.ArrayList;&#10;&#10;public class TreeVisualizationPanel extends JPanel {&#10;    private Integer[] treeArray;&#10;    private java.util.List&lt;Integer&gt; visitPath;&#10;    private int currentVisitIndex;&#10;    private static final int NODE_RADIUS = 20;&#10;    private static final int LEVEL_HEIGHT = 80;&#10;    private static final int MIN_HORIZONTAL_SPACING = 50;&#10;&#10;    public TreeVisualizationPanel() {&#10;        setBackground(new Color(248, 249, 250));&#10;        setPreferredSize(new Dimension(600, 400));&#10;        visitPath = new ArrayList&lt;&gt;();&#10;        currentVisitIndex = -1;&#10;    }&#10;&#10;    public void setTreeArray(Integer[] arr) {&#10;        this.treeArray = arr;&#10;        clearVisitPath();&#10;        repaint();&#10;    }&#10;&#10;    public void setVisitPath(java.util.List&lt;Integer&gt; path) {&#10;        this.visitPath = path;&#10;        this.currentVisitIndex = -1;&#10;        repaint();&#10;    }&#10;&#10;    public void showNextVisitStep() {&#10;        if (currentVisitIndex &lt; visitPath.size() - 1) {&#10;            currentVisitIndex++;&#10;            repaint();&#10;        }&#10;    }&#10;&#10;    public void clearVisitPath() {&#10;        this.visitPath.clear();&#10;        this.currentVisitIndex = -1;&#10;        repaint();&#10;    }&#10;&#10;    public boolean hasMoreSteps() {&#10;        return currentVisitIndex &lt; visitPath.size() - 1;&#10;    }&#10;&#10;    @Override&#10;    protected void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;        if (treeArray == null || treeArray.length &lt;= 1) return;&#10;&#10;        Graphics2D g2d = (Graphics2D) g.create();&#10;        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;        g2d.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;&#10;        // 計算樹的最大層數&#10;        int maxLevel = (int) (Math.log(treeArray.length - 1) / Math.log(2)) + 1;&#10;&#10;        // 先畫連接線，再畫節點（避免線條覆蓋節點）&#10;        drawConnections(g2d, maxLevel);&#10;        drawNodes(g2d, maxLevel);&#10;&#10;        g2d.dispose();&#10;    }&#10;&#10;    private void drawConnections(Graphics2D g2d, int maxLevel) {&#10;        g2d.setColor(Color.BLACK);&#10;        g2d.setStroke(new BasicStroke(2));&#10;&#10;        for (int i = 1; i &lt; treeArray.length; i++) {&#10;            if (treeArray[i] == null) continue;&#10;&#10;            int leftChild = 2 * i;&#10;            int rightChild = 2 * i + 1;&#10;&#10;            Point parentPos = getNodePosition(i, maxLevel);&#10;&#10;            // 畫左子節點連線&#10;            if (leftChild &lt; treeArray.length &amp;&amp; treeArray[leftChild] != null) {&#10;                Point leftPos = getNodePosition(leftChild, maxLevel);&#10;                g2d.draw(new Line2D.Double(parentPos.x, parentPos.y, leftPos.x, leftPos.y));&#10;            }&#10;&#10;            // 畫右子節點連線&#10;            if (rightChild &lt; treeArray.length &amp;&amp; treeArray[rightChild] != null) {&#10;                Point rightPos = getNodePosition(rightChild, maxLevel);&#10;                g2d.draw(new Line2D.Double(parentPos.x, parentPos.y, rightPos.x, rightPos.y));&#10;            }&#10;        }&#10;    }&#10;&#10;    private void drawNodes(Graphics2D g2d, int maxLevel) {&#10;        for (int i = 1; i &lt; treeArray.length; i++) {&#10;            if (treeArray[i] == null) continue;&#10;&#10;            Point pos = getNodePosition(i, maxLevel);&#10;            boolean isRoot = (i == 1);&#10;            boolean isLeaf = isLeafNode(i);&#10;            boolean isCurrentVisit = currentVisitIndex &gt;= 0 &amp;&amp; currentVisitIndex &lt; visitPath.size()&#10;                                   &amp;&amp; visitPath.get(currentVisitIndex).equals(treeArray[i]);&#10;            boolean isVisited = isNodeVisited(treeArray[i]);&#10;&#10;            // 設定節點顏色&#10;            if (isCurrentVisit) {&#10;                g2d.setColor(new Color(255, 215, 0));  // 當前走訪節點：金黃色&#10;            } else if (isVisited) {&#10;                g2d.setColor(new Color(144, 238, 144));  // 已走訪節點：淡綠色&#10;            } else if (isRoot) {&#10;                g2d.setColor(Color.BLACK);  // 根節點黑色背景&#10;            } else if (isLeaf) {&#10;                g2d.setColor(Color.WHITE);  // 葉節點白色背景&#10;            } else {&#10;                g2d.setColor(new Color(200, 200, 200));  // 中間節點灰色背景&#10;            }&#10;&#10;            // 畫節點圓圈&#10;            Ellipse2D circle = new Ellipse2D.Double(&#10;                pos.x - NODE_RADIUS, pos.y - NODE_RADIUS,&#10;                2 * NODE_RADIUS, 2 * NODE_RADIUS&#10;            );&#10;            g2d.fill(circle);&#10;&#10;            // 畫節點邊框&#10;            if (isCurrentVisit) {&#10;                g2d.setColor(new Color(255, 140, 0));  // 當前節點橙色邊框&#10;                g2d.setStroke(new BasicStroke(4));&#10;            } else {&#10;                g2d.setColor(Color.BLACK);&#10;                g2d.setStroke(new BasicStroke(2));&#10;            }&#10;            g2d.draw(circle);&#10;&#10;            // 設定文字顏色&#10;            if (isRoot &amp;&amp; !isCurrentVisit &amp;&amp; !isVisited) {&#10;                g2d.setColor(Color.WHITE);  // 根節點白色文字&#10;            } else {&#10;                g2d.setColor(Color.BLACK);  // 其他節點黑色文字&#10;            }&#10;&#10;            // 畫節點值&#10;            String text = treeArray[i].toString();&#10;            FontMetrics fm = g2d.getFontMetrics();&#10;            int textWidth = fm.stringWidth(text);&#10;            int textHeight = fm.getAscent();&#10;            g2d.drawString(text,&#10;                pos.x - textWidth / 2,&#10;                pos.y + textHeight / 2 - 2);&#10;&#10;            // 畫陣列編號標示&#10;            g2d.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 10));&#10;            g2d.setColor(new Color(100, 100, 100));  // 灰色文字&#10;            String indexText = &quot;[&quot; + i + &quot;]&quot;;&#10;            FontMetrics indexFm = g2d.getFontMetrics();&#10;            int indexWidth = indexFm.stringWidth(indexText);&#10;            // 將編號放在節點右上角&#10;            g2d.drawString(indexText,&#10;                pos.x + NODE_RADIUS - indexWidth + 8,&#10;                pos.y - NODE_RADIUS + 12);&#10;            &#10;            // 恢復原本字體&#10;            g2d.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        }&#10;    }&#10;&#10;    private boolean isNodeVisited(Integer value) {&#10;        for (int i = 0; i &lt;= currentVisitIndex &amp;&amp; i &lt; visitPath.size(); i++) {&#10;            if (visitPath.get(i).equals(value)) {&#10;                return true;&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;&#10;    private Point getNodePosition(int index, int maxLevel) {&#10;        int level = (int) (Math.log(index) / Math.log(2));&#10;        int nodesInLevel = 1 &lt;&lt; level;&#10;        int positionInLevel = index - (1 &lt;&lt; level);&#10;&#10;        int panelWidth = getWidth();&#10;        int panelHeight = getHeight();&#10;&#10;        // 計算水平位置&#10;        int totalWidth = panelWidth - 2 * NODE_RADIUS;&#10;        int spacing = Math.max(MIN_HORIZONTAL_SPACING, totalWidth / (nodesInLevel + 1));&#10;        int x = NODE_RADIUS + spacing * (positionInLevel + 1);&#10;&#10;        // 確保節點在面板範圍內&#10;        if (nodesInLevel &gt; 1) {&#10;            x = NODE_RADIUS + (totalWidth * (positionInLevel + 1)) / (nodesInLevel + 1);&#10;        } else {&#10;            x = panelWidth / 2;&#10;        }&#10;&#10;        // 計算垂直位置&#10;        int y = NODE_RADIUS + 30 + level * LEVEL_HEIGHT;&#10;&#10;        return new Point(x, y);&#10;    }&#10;&#10;    private boolean isLeafNode(int index) {&#10;        int leftChild = 2 * index;&#10;        int rightChild = 2 * index + 1;&#10;&#10;        boolean hasLeftChild = leftChild &lt; treeArray.length &amp;&amp; treeArray[leftChild] != null;&#10;        boolean hasRightChild = rightChild &lt; treeArray.length &amp;&amp; treeArray[rightChild] != null;&#10;&#10;        return !hasLeftChild &amp;&amp; !hasRightChild;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0811-Graph/ArticulationPoints/src/ArticulationPointsPerformanceAnalysis.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0811-Graph/ArticulationPoints/src/ArticulationPointsPerformanceAnalysis.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0811-Graph/ArticulationPoints/src/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0811-Graph/ArticulationPoints/src/Main.java" />
              <option name="originalContent" value="// Main.java&#10;    import java.util.*;&#10;&#10;    public class Main {&#10;        public static void main(String[] args) {&#10;            int V = 5;&#10;            BruteForceArticulationPoints brute = new BruteForceArticulationPoints(V);&#10;            TarjanArticulationPoints tarjan = new TarjanArticulationPoints(V);&#10;&#10;            // 建立圖&#10;            brute.addEdge(0, 1);&#10;            brute.addEdge(0, 2);&#10;            brute.addEdge(1, 2);&#10;            brute.addEdge(1, 3);&#10;            brute.addEdge(3, 4);&#10;&#10;            tarjan.addEdge(0, 1);&#10;            tarjan.addEdge(0, 2);&#10;            tarjan.addEdge(1, 2);&#10;            tarjan.addEdge(1, 3);&#10;            tarjan.addEdge(3, 4);&#10;&#10;            // 測試暴力法&#10;            System.out.println(&quot;Brute Force Articulation Points: &quot; + brute.findArticulationPoints());&#10;&#10;            // 測試 Tarjan&#10;            System.out.println(&quot;Tarjan Articulation Points: &quot; + tarjan.findArticulationPoints());&#10;&#10;            // 效能比較&#10;            int[] sizes = {10, 50, 100, 200, 500, 1000};&#10;            for (int v : sizes) {&#10;                int e = Math.min(v * (v-1) / 4, v*10); // 控制邊數不超過完全圖&#10;                runBenchmark(v, e);&#10;            }&#10;        }&#10;&#10;        // 效能測試與比較&#10;        public static void runBenchmark(int V, int E) {&#10;            Random rand = new Random();&#10;            BruteForceArticulationPoints brute = new BruteForceArticulationPoints(V);&#10;            TarjanArticulationPoints tarjan = new TarjanArticulationPoints(V);&#10;            Set&lt;String&gt; edgeSet = new HashSet&lt;&gt;();&#10;            // 隨機產生無重複邊&#10;            while (edgeSet.size() &lt; E) {&#10;                int u = rand.nextInt(V);&#10;                int v = rand.nextInt(V);&#10;                if (u != v) {&#10;                    String key = u &lt; v ? u + &quot;,&quot; + v : v + &quot;,&quot; + u;&#10;                    if (!edgeSet.contains(key)) {&#10;                        brute.addEdge(u, v);&#10;                        tarjan.addEdge(u, v);&#10;                        edgeSet.add(key);&#10;                    }&#10;                }&#10;            }&#10;            long t1 = System.nanoTime();&#10;            brute.findArticulationPoints();&#10;            long t2 = System.nanoTime();&#10;            tarjan.findArticulationPoints();&#10;            long t3 = System.nanoTime();&#10;            System.out.printf(&quot;V=%d, E=%d | Brute: %.2f ms | Tarjan: %.2f ms\n&quot;,&#10;                    V, E, (t2-t1)/1e6, (t3-t2)/1e6);&#10;        }&#10;    }&#10;&#10;    // 暴力法&#10;    class BruteForceArticulationPoints {&#10;        private int V;&#10;        private List&lt;List&lt;Integer&gt;&gt; adj;&#10;&#10;        public BruteForceArticulationPoints(int V) {&#10;            this.V = V;&#10;            adj = new ArrayList&lt;&gt;();&#10;            for (int i = 0; i &lt; V; i++) adj.add(new ArrayList&lt;&gt;());&#10;        }&#10;&#10;        public void addEdge(int u, int v) {&#10;            adj.get(u).add(v);&#10;            adj.get(v).add(u);&#10;        }&#10;&#10;        private void dfs(int u, boolean[] visited, int skip) {&#10;            if (u == skip) return;&#10;            visited[u] = true;&#10;            for (int v : adj.get(u)) {&#10;                if (!visited[v] &amp;&amp; v != skip) dfs(v, visited, skip);&#10;            }&#10;        }&#10;&#10;        public Set&lt;Integer&gt; findArticulationPoints() {&#10;            Set&lt;Integer&gt; result = new HashSet&lt;&gt;();&#10;            for (int i = 0; i &lt; V; i++) {&#10;                boolean[] visited = new boolean[V];&#10;                int start = (i == 0) ? 1 : 0;&#10;                dfs(start, visited, i);&#10;                for (int j = 0; j &lt; V; j++) {&#10;                    if (j != i &amp;&amp; !visited[j]) {&#10;                        result.add(i);&#10;                        break;&#10;                    }&#10;                }&#10;            }&#10;            return result;&#10;        }&#10;    }&#10;&#10;    // Tarjan 演算法&#10;    class TarjanArticulationPoints {&#10;        private int V, time;&#10;        private List&lt;List&lt;Integer&gt;&gt; adj;&#10;        private boolean[] visited, isAP;&#10;        private int[] disc, low, parent;&#10;&#10;        public TarjanArticulationPoints(int V) {&#10;            this.V = V;&#10;            adj = new ArrayList&lt;&gt;();&#10;            for (int i = 0; i &lt; V; i++) adj.add(new ArrayList&lt;&gt;());&#10;        }&#10;&#10;        public void addEdge(int u, int v) {&#10;            adj.get(u).add(v);&#10;            adj.get(v).add(u);&#10;        }&#10;&#10;        public Set&lt;Integer&gt; findArticulationPoints() {&#10;            time = 0;&#10;            visited = new boolean[V];&#10;            disc = new int[V];&#10;            low = new int[V];&#10;            parent = new int[V];&#10;            isAP = new boolean[V];&#10;            Arrays.fill(parent, -1);&#10;&#10;            for (int i = 0; i &lt; V; i++) {&#10;                if (!visited[i]) dfs(i);&#10;            }&#10;&#10;            Set&lt;Integer&gt; result = new HashSet&lt;&gt;();&#10;            for (int i = 0; i &lt; V; i++) if (isAP[i]) result.add(i);&#10;            return result;&#10;        }&#10;&#10;        private void dfs(int u) {&#10;            visited[u] = true;&#10;            disc[u] = low[u] = ++time;&#10;            int children = 0;&#10;            for (int v : adj.get(u)) {&#10;                if (!visited[v]) {&#10;                    children++;&#10;                    parent[v] = u;&#10;                    dfs(v);&#10;                    low[u] = Math.min(low[u], low[v]);&#10;                    if (parent[u] == -1 &amp;&amp; children &gt; 1) isAP[u] = true;&#10;                    if (parent[u] != -1 &amp;&amp; low[v] &gt;= disc[u]) isAP[u] = true;&#10;                } else if (v != parent[u]) {&#10;                    low[u] = Math.min(low[u], disc[v]);&#10;                }&#10;            }&#10;        }&#10;    }" />
              <option name="updatedContent" value="// Main.java&#10;    import java.util.*;&#10;&#10;    public class Main {&#10;        public static void main(String[] args) {&#10;            int V = 5;&#10;            BruteForceArticulationPoints brute = new BruteForceArticulationPoints(V);&#10;            TarjanArticulationPoints tarjan = new TarjanArticulationPoints(V);&#10;&#10;            // 建立圖&#10;            brute.addEdge(0, 1);&#10;            brute.addEdge(0, 2);&#10;            brute.addEdge(1, 2);&#10;            brute.addEdge(1, 3);&#10;            brute.addEdge(3, 4);&#10;&#10;            tarjan.addEdge(0, 1);&#10;            tarjan.addEdge(0, 2);&#10;            tarjan.addEdge(1, 2);&#10;            tarjan.addEdge(1, 3);&#10;            tarjan.addEdge(3, 4);&#10;&#10;            // 測試暴力法&#10;            System.out.println(&quot;Brute Force Articulation Points: &quot; + brute.findArticulationPoints());&#10;&#10;            // 測試 Tarjan&#10;            System.out.println(&quot;Tarjan Articulation Points: &quot; + tarjan.findArticulationPoints());&#10;&#10;            // 效能比較&#10;            int[] sizes = {10, 50, 100, 200, 500, 1000};&#10;            for (int v : sizes) {&#10;                int e = Math.min(v * (v-1) / 4, v*10); // 控制邊數不超過完全圖&#10;                runBenchmark(v, e);&#10;            }&#10;        }&#10;&#10;        // 效能測試與比較&#10;        public static void runBenchmark(int V, int E) {&#10;            Random rand = new Random();&#10;            BruteForceArticulationPoints brute = new BruteForceArticulationPoints(V);&#10;            TarjanArticulationPoints tarjan = new TarjanArticulationPoints(V);&#10;            Set&lt;String&gt; edgeSet = new HashSet&lt;&gt;();&#10;            // 隨機產生無重複邊&#10;            while (edgeSet.size() &lt; E) {&#10;                int u = rand.nextInt(V);&#10;                int v = rand.nextInt(V);&#10;                if (u != v) {&#10;                    String key = u &lt; v ? u + &quot;,&quot; + v : v + &quot;,&quot; + u;&#10;                    if (!edgeSet.contains(key)) {&#10;                        brute.addEdge(u, v);&#10;                        tarjan.addEdge(u, v);&#10;                        edgeSet.add(key);&#10;                    }&#10;                }&#10;            }&#10;            long t1 = System.nanoTime();&#10;            brute.findArticulationPoints();&#10;            long t2 = System.nanoTime();&#10;            tarjan.findArticulationPoints();&#10;            long t3 = System.nanoTime();&#10;            System.out.printf(&quot;V=%d, E=%d | Brute: %d ns | Tarjan: %d ns\n&quot;,&#10;                    V, E, (t2-t1), (t3-t2));&#10;        }&#10;    }&#10;&#10;    // 暴力法&#10;    class BruteForceArticulationPoints {&#10;        private int V;&#10;        private List&lt;List&lt;Integer&gt;&gt; adj;&#10;&#10;        public BruteForceArticulationPoints(int V) {&#10;            this.V = V;&#10;            adj = new ArrayList&lt;&gt;();&#10;            for (int i = 0; i &lt; V; i++) adj.add(new ArrayList&lt;&gt;());&#10;        }&#10;&#10;        public void addEdge(int u, int v) {&#10;            adj.get(u).add(v);&#10;            adj.get(v).add(u);&#10;        }&#10;&#10;        private void dfs(int u, boolean[] visited, int skip) {&#10;            if (u == skip) return;&#10;            visited[u] = true;&#10;            for (int v : adj.get(u)) {&#10;                if (!visited[v] &amp;&amp; v != skip) dfs(v, visited, skip);&#10;            }&#10;        }&#10;&#10;        public Set&lt;Integer&gt; findArticulationPoints() {&#10;            Set&lt;Integer&gt; result = new HashSet&lt;&gt;();&#10;            for (int i = 0; i &lt; V; i++) {&#10;                boolean[] visited = new boolean[V];&#10;                int start = (i == 0) ? 1 : 0;&#10;                dfs(start, visited, i);&#10;                for (int j = 0; j &lt; V; j++) {&#10;                    if (j != i &amp;&amp; !visited[j]) {&#10;                        result.add(i);&#10;                        break;&#10;                    }&#10;                }&#10;            }&#10;            return result;&#10;        }&#10;    }&#10;&#10;    // Tarjan 演算法&#10;    class TarjanArticulationPoints {&#10;        private int V, time;&#10;        private List&lt;List&lt;Integer&gt;&gt; adj;&#10;        private boolean[] visited, isAP;&#10;        private int[] disc, low, parent;&#10;&#10;        public TarjanArticulationPoints(int V) {&#10;            this.V = V;&#10;            adj = new ArrayList&lt;&gt;();&#10;            for (int i = 0; i &lt; V; i++) adj.add(new ArrayList&lt;&gt;());&#10;        }&#10;&#10;        public void addEdge(int u, int v) {&#10;            adj.get(u).add(v);&#10;            adj.get(v).add(u);&#10;        }&#10;&#10;        public Set&lt;Integer&gt; findArticulationPoints() {&#10;            time = 0;&#10;            visited = new boolean[V];&#10;            disc = new int[V];&#10;            low = new int[V];&#10;            parent = new int[V];&#10;            isAP = new boolean[V];&#10;            Arrays.fill(parent, -1);&#10;&#10;            for (int i = 0; i &lt; V; i++) {&#10;                if (!visited[i]) dfs(i);&#10;            }&#10;&#10;            Set&lt;Integer&gt; result = new HashSet&lt;&gt;();&#10;            for (int i = 0; i &lt; V; i++) if (isAP[i]) result.add(i);&#10;            return result;&#10;        }&#10;&#10;        private void dfs(int u) {&#10;            visited[u] = true;&#10;            disc[u] = low[u] = ++time;&#10;            int children = 0;&#10;            for (int v : adj.get(u)) {&#10;                if (!visited[v]) {&#10;                    children++;&#10;                    parent[v] = u;&#10;                    dfs(v);&#10;                    low[u] = Math.min(low[u], low[v]);&#10;                    if (parent[u] == -1 &amp;&amp; children &gt; 1) isAP[u] = true;&#10;                    if (parent[u] != -1 &amp;&amp; low[v] &gt;= disc[u]) isAP[u] = true;&#10;                } else if (v != parent[u]) {&#10;                    low[u] = Math.min(low[u], disc[v]);&#10;                }&#10;            }&#10;        }&#10;    }" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0811-Graph/ArticulationPoints/src/PerformanceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0811-Graph/ArticulationPoints/src/PerformanceTest.java" />
              <option name="originalContent" value="&#10;&#10;" />
              <option name="updatedContent" value="import java.util.*;&#10;&#10;public class PerformanceTest {&#10;    &#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;割點算法性能測試&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(60));&#10;        &#10;        // 測試不同規模的圖&#10;        int[] vertices = {10, 20, 50, 100, 200, 500, 1000};&#10;        double[] densities = {0.1, 0.3, 0.5, 0.7}; // 圖的密度 (邊數 / 最大可能邊數)&#10;        &#10;        System.out.printf(&quot;%-10s %-10s %-10s %-15s %-15s %-15s%n&quot;, &#10;                         &quot;Vertices&quot;, &quot;Edges&quot;, &quot;Density&quot;, &quot;Brute(ms)&quot;, &quot;Tarjan(ms)&quot;, &quot;Speedup&quot;);&#10;        System.out.println(&quot;-&quot;.repeat(80));&#10;        &#10;        for (int v : vertices) {&#10;            for (double density : densities) {&#10;                int maxEdges = v * (v - 1) / 2; // 完全圖的邊數&#10;                int edges = (int)(maxEdges * density);&#10;                &#10;                // 生成隨機圖&#10;                GraphGenerator generator = new GraphGenerator(v, edges);&#10;                List&lt;int[]&gt; edgeList = generator.generateConnectedGraph();&#10;                &#10;                // 測試暴力法&#10;                long bruteTime = testBruteForce(v, edgeList);&#10;                &#10;                // 測試 Tarjan 算法&#10;                long tarjanTime = testTarjan(v, edgeList);&#10;                &#10;                // 計算加速比&#10;                double speedup = (double)bruteTime / tarjanTime;&#10;                &#10;                System.out.printf(&quot;%-10d %-10d %-10.1f %-15d %-15d %-15.2fx%n&quot;, &#10;                                 v, edgeList.size(), density, bruteTime, tarjanTime, speedup);&#10;                &#10;                // 當暴力法時間過長時跳過更大的圖&#10;                if (bruteTime &gt; 5000) { // 超過5秒&#10;                    System.out.println(&quot;暴力法時間過長，跳過更大規模的測試&quot;);&#10;                    return;&#10;                }&#10;            }&#10;            System.out.println();&#10;        }&#10;        &#10;        System.out.println(&quot;\n結論分析:&quot;);&#10;        System.out.println(&quot;- 當圖規模較小時 (V &lt; 50)，兩种方法差異不大&quot;);&#10;        System.out.println(&quot;- 當圖規模較大時 (V &gt;= 100)，Tarjan 算法明顯更快&quot;);&#10;        System.out.println(&quot;- 建議: V &gt;= 50 或 E &gt;= 500 時使用 Tarjan 算法&quot;);&#10;    }&#10;    &#10;    private static long testBruteForce(int vertices, List&lt;int[]&gt; edges) {&#10;        BruteForceArticulationPoints brute = new BruteForceArticulationPoints(vertices);&#10;        &#10;        for (int[] edge : edges) {&#10;            brute.addEdge(edge[0], edge[1]);&#10;        }&#10;        &#10;        long startTime = System.nanoTime();&#10;        &#10;        // 執行多次測試取平均值&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            brute.findArticulationPoints();&#10;        }&#10;        &#10;        long endTime = System.nanoTime();&#10;        return (endTime - startTime) / 1_000_000 / 3; // 轉換為毫秒並取平均&#10;    }&#10;    &#10;    private static long testTarjan(int vertices, List&lt;int[]&gt; edges) {&#10;        TarjanArticulationPoints tarjan = new TarjanArticulationPoints(vertices);&#10;        &#10;        for (int[] edge : edges) {&#10;            tarjan.addEdge(edge[0], edge[1]);&#10;        }&#10;        &#10;        long startTime = System.nanoTime();&#10;        &#10;        // 執行多次測試取平均值&#10;        for (int i = 0; i &lt; 3; i++) {&#10;            tarjan.findArticulationPoints();&#10;        }&#10;        &#10;        long endTime = System.nanoTime();&#10;        return (endTime - startTime) / 1_000_000 / 3; // 轉換為毫秒並取平均&#10;    }&#10;}&#10;&#10;// 圖生成器類別&#10;class GraphGenerator {&#10;    private int vertices;&#10;    private int targetEdges;&#10;    private Random random;&#10;    &#10;    public GraphGenerator(int vertices, int targetEdges) {&#10;        this.vertices = vertices;&#10;        this.targetEdges = targetEdges;&#10;        this.random = new Random(42); // 固定種子確保結果可重現&#10;    }&#10;    &#10;    public List&lt;int[]&gt; generateConnectedGraph() {&#10;        Set&lt;String&gt; edgeSet = new HashSet&lt;&gt;();&#10;        List&lt;int[]&gt; edges = new ArrayList&lt;&gt;();&#10;        &#10;        // 首先創建一個連通的生成樹&#10;        for (int i = 1; i &lt; vertices; i++) {&#10;            int parent = random.nextInt(i);&#10;            String edge = Math.min(i, parent) + &quot;-&quot; + Math.max(i, parent);&#10;            edgeSet.add(edge);&#10;            edges.add(new int[]{i, parent});&#10;        }&#10;        &#10;        // 添加額外的邊直到達到目標邊數&#10;        while (edges.size() &lt; targetEdges &amp;&amp; edges.size() &lt; vertices * (vertices - 1) / 2) {&#10;            int u = random.nextInt(vertices);&#10;            int v = random.nextInt(vertices);&#10;            &#10;            if (u != v) {&#10;                String edge = Math.min(u, v) + &quot;-&quot; + Math.max(u, v);&#10;                if (!edgeSet.contains(edge)) {&#10;                    edgeSet.add(edge);&#10;                    edges.add(new int[]{u, v});&#10;                }&#10;            }&#10;        }&#10;        &#10;        return edges;&#10;    }&#10;}&#10;&#10;// 暴力法&#10;class BruteForceArticulationPoints {&#10;    private int V;&#10;    private List&lt;List&lt;Integer&gt;&gt; adj;&#10;&#10;    public BruteForceArticulationPoints(int V) {&#10;        this.V = V;&#10;        adj = new ArrayList&lt;&gt;();&#10;        for (int i = 0; i &lt; V; i++) adj.add(new ArrayList&lt;&gt;());&#10;    }&#10;&#10;    public void addEdge(int u, int v) {&#10;        adj.get(u).add(v);&#10;        adj.get(v).add(u);&#10;    }&#10;&#10;    private void dfs(int u, boolean[] visited, int skip) {&#10;        if (u == skip) return;&#10;        visited[u] = true;&#10;        for (int v : adj.get(u)) {&#10;            if (!visited[v] &amp;&amp; v != skip) dfs(v, visited, skip);&#10;        }&#10;    }&#10;&#10;    public Set&lt;Integer&gt; findArticulationPoints() {&#10;        Set&lt;Integer&gt; result = new HashSet&lt;&gt;();&#10;        for (int i = 0; i &lt; V; i++) {&#10;            boolean[] visited = new boolean[V];&#10;            int start = (i == 0) ? 1 : 0;&#10;            if (start &lt; V) {&#10;                dfs(start, visited, i);&#10;                for (int j = 0; j &lt; V; j++) {&#10;                    if (j != i &amp;&amp; !visited[j]) {&#10;                        result.add(i);&#10;                        break;&#10;                    }&#10;                }&#10;            }&#10;        }&#10;        return result;&#10;    }&#10;}&#10;&#10;// Tarjan 演算法&#10;class TarjanArticulationPoints {&#10;    private int V, time;&#10;    private List&lt;List&lt;Integer&gt;&gt; adj;&#10;    private boolean[] visited, isAP;&#10;    private int[] disc, low, parent;&#10;&#10;    public TarjanArticulationPoints(int V) {&#10;        this.V = V;&#10;        adj = new ArrayList&lt;&gt;();&#10;        for (int i = 0; i &lt; V; i++) adj.add(new ArrayList&lt;&gt;());&#10;    }&#10;&#10;    public void addEdge(int u, int v) {&#10;        adj.get(u).add(v);&#10;        adj.get(v).add(u);&#10;    }&#10;&#10;    public Set&lt;Integer&gt; findArticulationPoints() {&#10;        time = 0;&#10;        visited = new boolean[V];&#10;        disc = new int[V];&#10;        low = new int[V];&#10;        parent = new int[V];&#10;        isAP = new boolean[V];&#10;        Arrays.fill(parent, -1);&#10;&#10;        for (int i = 0; i &lt; V; i++) {&#10;            if (!visited[i]) dfs(i);&#10;        }&#10;&#10;        Set&lt;Integer&gt; result = new HashSet&lt;&gt;();&#10;        for (int i = 0; i &lt; V; i++) if (isAP[i]) result.add(i);&#10;        return result;&#10;    }&#10;&#10;    private void dfs(int u) {&#10;        visited[u] = true;&#10;        disc[u] = low[u] = ++time;&#10;        int children = 0;&#10;        for (int v : adj.get(u)) {&#10;            if (!visited[v]) {&#10;                children++;&#10;                parent[v] = u;&#10;                dfs(v);&#10;                low[u] = Math.min(low[u], low[v]);&#10;                if (parent[u] == -1 &amp;&amp; children &gt; 1) isAP[u] = true;&#10;                if (parent[u] != -1 &amp;&amp; low[v] &gt;= disc[u]) isAP[u] = true;&#10;            } else if (v != parent[u]) {&#10;                low[u] = Math.min(low[u], disc[v]);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0811-Graph/ArticulationPoints/src/SimplePerformanceTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0811-Graph/ArticulationPoints/src/SimplePerformanceTest.java" />
              <option name="updatedContent" value="import java.util.*;&#10;&#10;public class SimplePerformanceTest {&#10;    &#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;割點算法性能測試比較&quot;);&#10;        System.out.println(&quot;=&quot;.repeat(50));&#10;        &#10;        // 測試不同規模的圖&#10;        int[] testSizes = {10, 20, 30, 50, 100};&#10;        &#10;        System.out.printf(&quot;%-8s %-8s %-12s %-12s %-10s%n&quot;, &#10;                         &quot;節點數&quot;, &quot;邊數&quot;, &quot;暴力法(ms)&quot;, &quot;Tarjan(ms)&quot;, &quot;加速比&quot;);&#10;        System.out.println(&quot;-&quot;.repeat(50));&#10;        &#10;        for (int v : testSizes) {&#10;            // 創建稠密圖 (約50%密度)&#10;            int edgeCount = v * (v - 1) / 4; // 約一半的可能邊數&#10;            &#10;            // 生成測試圖&#10;            TestGraph graph = createTestGraph(v, edgeCount);&#10;            &#10;            // 測試暴力法&#10;            long bruteTime = testBruteForceMethod(graph);&#10;            &#10;            // 測試 Tarjan 算法  &#10;            long tarjanTime = testTarjanMethod(graph);&#10;            &#10;            // 計算加速比&#10;            double speedup = (tarjanTime == 0) ? 0 : (double)bruteTime / tarjanTime;&#10;            &#10;            System.out.printf(&quot;%-8d %-8d %-12d %-12d %-10.1fx%n&quot;, &#10;                             v, graph.edges.size(), bruteTime, tarjanTime, speedup);&#10;            &#10;            // 如果暴力法太慢就停止測試更大的圖&#10;            if (bruteTime &gt; 1000) {&#10;                System.out.println(&quot;\n暴力法時間過長，停止測試更大規模的圖&quot;);&#10;                break;&#10;            }&#10;        }&#10;        &#10;        System.out.println(&quot;\n性能分析結論:&quot;);&#10;        System.out.println(&quot;1. 小規模圖 (V ≤ 30): 兩種方法差異不大&quot;);&#10;        System.out.println(&quot;2. 中等規模圖 (30 &lt; V ≤ 100): Tarjan算法開始顯示優勢&quot;);&#10;        System.out.println(&quot;3. 大規模圖 (V &gt; 100): 強烈建議使用Tarjan算法&quot;);&#10;        System.out.println(&quot;\n建議使用原則:&quot;);&#10;        System.out.println(&quot;- 節點數 ≤ 50: 可使用暴力法 (實現簡單)&quot;);&#10;        System.out.println(&quot;- 節點數 &gt; 50: 建議使用Tarjan算法 (效能優異)&quot;);&#10;    }&#10;    &#10;    static class TestGraph {&#10;        int vertices;&#10;        List&lt;int[]&gt; edges;&#10;        &#10;        TestGraph(int v) {&#10;            vertices = v;&#10;            edges = new ArrayList&lt;&gt;();&#10;        }&#10;    }&#10;    &#10;    static TestGraph createTestGraph(int vertices, int targetEdges) {&#10;        TestGraph graph = new TestGraph(vertices);&#10;        Set&lt;String&gt; edgeSet = new HashSet&lt;&gt;();&#10;        Random rand = new Random(42); // 固定種子保證結果一致&#10;        &#10;        // 首先確保圖連通 - 創建生成樹&#10;        for (int i = 1; i &lt; vertices; i++) {&#10;            int parent = rand.nextInt(i);&#10;            String edgeKey = Math.min(i, parent) + &quot;-&quot; + Math.max(i, parent);&#10;            if (!edgeSet.contains(edgeKey)) {&#10;                edgeSet.add(edgeKey);&#10;                graph.edges.add(new int[]{i, parent});&#10;            }&#10;        }&#10;        &#10;        // 添加額外的邊&#10;        while (graph.edges.size() &lt; targetEdges) {&#10;            int u = rand.nextInt(vertices);&#10;            int v = rand.nextInt(vertices);&#10;            if (u != v) {&#10;                String edgeKey = Math.min(u, v) + &quot;-&quot; + Math.max(u, v);&#10;                if (!edgeSet.contains(edgeKey)) {&#10;                    edgeSet.add(edgeKey);&#10;                    graph.edges.add(new int[]{u, v});&#10;                }&#10;            }&#10;        }&#10;        &#10;        return graph;&#10;    }&#10;    &#10;    static long testBruteForceMethod(TestGraph graph) {&#10;        BruteForceAP bruteForce = new BruteForceAP(graph.vertices);&#10;        &#10;        // 建立圖&#10;        for (int[] edge : graph.edges) {&#10;            bruteForce.addEdge(edge[0], edge[1]);&#10;        }&#10;        &#10;        // 測試執行時間&#10;        long startTime = System.nanoTime();&#10;        bruteForce.findArticulationPoints();&#10;        long endTime = System.nanoTime();&#10;        &#10;        return (endTime - startTime) / 1_000_000; // 轉換為毫秒&#10;    }&#10;    &#10;    static long testTarjanMethod(TestGraph graph) {&#10;        TarjanAP tarjan = new TarjanAP(graph.vertices);&#10;        &#10;        // 建立圖&#10;        for (int[] edge : graph.edges) {&#10;            tarjan.addEdge(edge[0], edge[1]);&#10;        }&#10;        &#10;        // 測試執行時間&#10;        long startTime = System.nanoTime();&#10;        tarjan.findArticulationPoints();&#10;        long endTime = System.nanoTime();&#10;        &#10;        return (endTime - startTime) / 1_000_000; // 轉換為毫秒&#10;    }&#10;}&#10;&#10;// 暴力法實現&#10;class BruteForceAP {&#10;    private int V;&#10;    private List&lt;List&lt;Integer&gt;&gt; adj;&#10;&#10;    public BruteForceAP(int V) {&#10;        this.V = V;&#10;        adj = new ArrayList&lt;&gt;();&#10;        for (int i = 0; i &lt; V; i++) {&#10;            adj.add(new ArrayList&lt;&gt;());&#10;        }&#10;    }&#10;&#10;    public void addEdge(int u, int v) {&#10;        adj.get(u).add(v);&#10;        adj.get(v).add(u);&#10;    }&#10;&#10;    private void dfs(int u, boolean[] visited, int skip) {&#10;        if (u == skip) return;&#10;        visited[u] = true;&#10;        for (int v : adj.get(u)) {&#10;            if (!visited[v] &amp;&amp; v != skip) {&#10;                dfs(v, visited, skip);&#10;            }&#10;        }&#10;    }&#10;&#10;    public Set&lt;Integer&gt; findArticulationPoints() {&#10;        Set&lt;Integer&gt; result = new HashSet&lt;&gt;();&#10;        &#10;        for (int i = 0; i &lt; V; i++) {&#10;            boolean[] visited = new boolean[V];&#10;            &#10;            // 找一個不是當前測試節點的起始點&#10;            int start = (i == 0) ? 1 : 0;&#10;            if (start &gt;= V) continue;&#10;            &#10;            // 從起始點開始DFS，跳過當前測試的節點&#10;            dfs(start, visited, i);&#10;            &#10;            // 檢查是否有節點無法訪問到&#10;            for (int j = 0; j &lt; V; j++) {&#10;                if (j != i &amp;&amp; !visited[j]) {&#10;                    result.add(i);&#10;                    break;&#10;                }&#10;            }&#10;        }&#10;        &#10;        return result;&#10;    }&#10;}&#10;&#10;// Tarjan算法實現&#10;class TarjanAP {&#10;    private int V, time;&#10;    private List&lt;List&lt;Integer&gt;&gt; adj;&#10;    private boolean[] visited, isAP;&#10;    private int[] disc, low, parent;&#10;&#10;    public TarjanAP(int V) {&#10;        this.V = V;&#10;        adj = new ArrayList&lt;&gt;();&#10;        for (int i = 0; i &lt; V; i++) {&#10;            adj.add(new ArrayList&lt;&gt;());&#10;        }&#10;    }&#10;&#10;    public void addEdge(int u, int v) {&#10;        adj.get(u).add(v);&#10;        adj.get(v).add(u);&#10;    }&#10;&#10;    public Set&lt;Integer&gt; findArticulationPoints() {&#10;        // 初始化&#10;        time = 0;&#10;        visited = new boolean[V];&#10;        disc = new int[V];&#10;        low = new int[V];&#10;        parent = new int[V];&#10;        isAP = new boolean[V];&#10;        Arrays.fill(parent, -1);&#10;&#10;        // 對所有未訪問的節點執行DFS&#10;        for (int i = 0; i &lt; V; i++) {&#10;            if (!visited[i]) {&#10;                dfs(i);&#10;            }&#10;        }&#10;&#10;        // 收集所有割點&#10;        Set&lt;Integer&gt; result = new HashSet&lt;&gt;();&#10;        for (int i = 0; i &lt; V; i++) {&#10;            if (isAP[i]) {&#10;                result.add(i);&#10;            }&#10;        }&#10;        &#10;        return result;&#10;    }&#10;&#10;    private void dfs(int u) {&#10;        visited[u] = true;&#10;        disc[u] = low[u] = ++time;&#10;        int children = 0;&#10;&#10;        for (int v : adj.get(u)) {&#10;            if (!visited[v]) {&#10;                children++;&#10;                parent[v] = u;&#10;                dfs(v);&#10;&#10;                low[u] = Math.min(low[u], low[v]);&#10;&#10;                // 根節點是割點的條件：有超過一個子樹&#10;                if (parent[u] == -1 &amp;&amp; children &gt; 1) {&#10;                    isAP[u] = true;&#10;                }&#10;&#10;                // 非根節點是割點的條件：low[v] &gt;= disc[u]&#10;                if (parent[u] != -1 &amp;&amp; low[v] &gt;= disc[u]) {&#10;                    isAP[u] = true;&#10;                }&#10;            } else if (v != parent[u]) {&#10;                // 後向邊：更新low值&#10;                low[u] = Math.min(low[u], disc[v]);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>