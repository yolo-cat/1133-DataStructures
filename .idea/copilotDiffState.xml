<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/0729-Tree/0729-HeapApplication/src/EnhancedConsumer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0729-Tree/0729-HeapApplication/src/EnhancedConsumer.java" />
              <option name="originalContent" value="public class EnhancedConsumer extends Thread {&#10;    private final MinHeapBuffer buffer;&#10;    private final int consumeIntervalMs;&#10;    private final ProducerConsumerGUI gui;&#10;    private volatile boolean running = true;&#10;&#10;    public EnhancedConsumer(MinHeapBuffer buffer, int consumeIntervalMs, ProducerConsumerGUI gui) {&#10;        this.buffer = buffer;&#10;        this.consumeIntervalMs = consumeIntervalMs;&#10;        this.gui = gui;&#10;    }&#10;&#10;    public void stopConsumer() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try {&#10;            while (running) {&#10;                Item item = buffer.take();&#10;                String message = &quot;消費: &quot; + item;&#10;                System.out.println(message);&#10;                if (gui != null) {&#10;                    gui.appendToConsumer(message);&#10;                }&#10;                Thread.sleep(consumeIntervalMs);&#10;            }&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="public class EnhancedConsumer extends Thread {&#10;    private final ProcessedQueue processedQueue;&#10;    private final int consumeIntervalMs;&#10;    private final ProducerConsumerGUI gui;&#10;    private volatile boolean running = true;&#10;&#10;    public EnhancedConsumer(ProcessedQueue processedQueue, int consumeIntervalMs, ProducerConsumerGUI gui) {&#10;        this.processedQueue = processedQueue;&#10;        this.consumeIntervalMs = consumeIntervalMs;&#10;        this.gui = gui;&#10;    }&#10;&#10;    public void stopConsumer() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try {&#10;            while (running) {&#10;                Item item = processedQueue.take();&#10;                String message = &quot;消費: &quot; + item;&#10;                System.out.println(message);&#10;                if (gui != null) {&#10;                    gui.appendToConsumer(message);&#10;                }&#10;                Thread.sleep(consumeIntervalMs);&#10;            }&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0729-Tree/0729-HeapApplication/src/Machine.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0729-Tree/0729-HeapApplication/src/Machine.java" />
              <option name="originalContent" value="public class Machine extends Thread {&#10;    private final MinHeapBuffer buffer;&#10;    private final ProcessedQueue processedQueue;&#10;    private final int processIntervalMs;&#10;    private final ProducerConsumerGUI gui;&#10;    private volatile boolean running = true;&#10;&#10;    public Machine(MinHeapBuffer buffer, ProcessedQueue processedQueue, int processIntervalMs, ProducerConsumerGUI gui) {&#10;        this.buffer = buffer;&#10;        this.processedQueue = processedQueue;&#10;        this.processIntervalMs = processIntervalMs;&#10;        this.gui = gui;&#10;    }&#10;&#10;    public void stopMachine() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try {&#10;            while (running) {&#10;                Item item = buffer.take();&#10;" />
              <option name="updatedContent" value="public class Machine extends Thread {&#10;    private final MinHeapBuffer buffer;&#10;    private final ProcessedQueue processedQueue;&#10;    private final int processIntervalMs;&#10;    private final ProducerConsumerGUI gui;&#10;    private volatile boolean running = true;&#10;&#10;    public Machine(MinHeapBuffer buffer, ProcessedQueue processedQueue, int processIntervalMs, ProducerConsumerGUI gui) {&#10;        this.buffer = buffer;&#10;        this.processedQueue = processedQueue;&#10;        this.processIntervalMs = processIntervalMs;&#10;        this.gui = gui;&#10;    }&#10;&#10;    public void stopMachine() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try {&#10;            while (running) {&#10;                Item item = buffer.take();&#10;                if (gui != null) {&#10;                    gui.triggerBufferToMachineAnimation(item); // 觸發緩衝區到機台的動畫&#10;                }&#10;                String message = &quot;機台處理: &quot; + item;&#10;                System.out.println(message);&#10;                if (gui != null) {&#10;                    gui.appendToMachine(message);&#10;                }&#10;                // 處理後放入暫存區&#10;                processedQueue.put(item);&#10;                if (gui != null) {&#10;                    gui.triggerMachineToConsumerAnimation(item); // 觸發機台到消費者的動畫&#10;                }&#10;                Thread.sleep(processIntervalMs);&#10;            }&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0729-Tree/0729-HeapApplication/src/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0729-Tree/0729-HeapApplication/src/Main.java" />
              <option name="updatedContent" value="public class Main {&#10;    public static void main(String[] args) {&#10;        ProducerConsumerGUI.main(args);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0729-Tree/0729-HeapApplication/src/MinHeapBuffer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0729-Tree/0729-HeapApplication/src/MinHeapBuffer.java" />
              <option name="originalContent" value="import java.util.PriorityQueue;&#10;import java.util.Queue;&#10;&#10;public class MinHeapBuffer {&#10;    private final int capacity;&#10;    private final Queue&lt;Item&gt; heap;&#10;&#10;    public MinHeapBuffer(int capacity) {&#10;        this.capacity = capacity;&#10;        this.heap = new PriorityQueue&lt;&gt;();&#10;    }&#10;&#10;    public synchronized void put(Item item) throws InterruptedException {&#10;        while (heap.size() &gt;= capacity) {&#10;            wait();&#10;        }&#10;        heap.offer(item);&#10;        notifyAll();&#10;    }&#10;&#10;    public synchronized Item take() throws InterruptedException {&#10;        while (heap.isEmpty()) {&#10;            wait();&#10;        }&#10;        Item item = heap.poll();&#10;        notifyAll();&#10;        return item;&#10;    }&#10;&#10;    public synchronized int size() {&#10;        return heap.size();&#10;    }&#10;&#10;    public synchronized boolean isFull() {&#10;        return heap.size() &gt;= capacity;&#10;    }&#10;&#10;    public synchronized boolean isEmpty() {&#10;        return heap.isEmpty();&#10;    }&#10;" />
              <option name="updatedContent" value="import java.util.PriorityQueue;&#10;import java.util.Queue;&#10;&#10;public class MinHeapBuffer {&#10;    private final int capacity;&#10;    private final Queue&lt;Item&gt; heap;&#10;&#10;    public MinHeapBuffer(int capacity) {&#10;        this.capacity = capacity;&#10;        this.heap = new PriorityQueue&lt;&gt;();&#10;    }&#10;&#10;    public synchronized void put(Item item) throws InterruptedException {&#10;        while (heap.size() &gt;= capacity) {&#10;            wait();&#10;        }&#10;        heap.offer(item);&#10;        notifyAll();&#10;    }&#10;&#10;    public synchronized Item take() throws InterruptedException {&#10;        while (heap.isEmpty()) {&#10;            wait();&#10;        }&#10;        Item item = heap.poll();&#10;        notifyAll();&#10;        return item;&#10;    }&#10;&#10;    public synchronized int size() {&#10;        return heap.size();&#10;    }&#10;&#10;    public synchronized boolean isFull() {&#10;        return heap.size() &gt;= capacity;&#10;    }&#10;&#10;    public synchronized boolean isEmpty() {&#10;        return heap.isEmpty();&#10;    }&#10;&#10;    public synchronized String itemsInfo() {&#10;        StringBuilder sb = new StringBuilder();&#10;        for (Item item : heap) {&#10;            sb.append(item.toString()).append(&quot;\n&quot;);&#10;        }&#10;        return sb.toString();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0729-Tree/0729-HeapApplication/src/ProcessedQueue.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0729-Tree/0729-HeapApplication/src/ProcessedQueue.java" />
              <option name="updatedContent" value="import java.util.LinkedList;&#10;import java.util.Queue;&#10;&#10;public class ProcessedQueue {&#10;    private final Queue&lt;Item&gt; queue = new LinkedList&lt;&gt;();&#10;    private final int capacity;&#10;&#10;    public ProcessedQueue(int capacity) {&#10;        this.capacity = capacity;&#10;    }&#10;&#10;    public synchronized void put(Item item) throws InterruptedException {&#10;        while (queue.size() &gt;= capacity) {&#10;            wait();&#10;        }&#10;        queue.offer(item);&#10;        notifyAll();&#10;    }&#10;&#10;    public synchronized Item take() throws InterruptedException {&#10;        while (queue.isEmpty()) {&#10;            wait();&#10;        }&#10;        Item item = queue.poll();&#10;        notifyAll();&#10;        return item;&#10;    }&#10;&#10;    public synchronized int size() {&#10;        return queue.size();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0729-Tree/src/BinaryTreeArray.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0729-Tree/src/BinaryTreeArray.java" />
              <option name="originalContent" value="import java.util.*;&#10;import java.util.stream.IntStream;&#10;&#10;public class BinaryTreeArray {&#10;    private Integer[] treeArray;&#10;&#10;    public BinaryTreeArray(Integer[] arr) {&#10;        this.treeArray = arr;&#10;    }&#10;&#10;    // 工具方法：取得有效索引範圍（1 ~ arr.length-1）&#10;    private int getLeft(int index) { return 2 * index; }&#10;    private int getRight(int index) { return 2 * index + 1; }&#10;    private boolean isValidIndex(int index) { return index &gt; 0 &amp;&amp; index &lt; treeArray.length; }&#10;&#10;    // 前序走訪&#10;    public List&lt;Integer&gt; preorder() {&#10;        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();&#10;        preorderHelper(1, result);&#10;        return result;&#10;    }&#10;&#10;    private void preorderHelper(int index, List&lt;Integer&gt; result) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        result.add(treeArray[index]);&#10;        preorderHelper(getLeft(index), result);&#10;        preorderHelper(getRight(index), result);&#10;    }&#10;&#10;    // 中序走訪&#10;    public List&lt;Integer&gt; inorder() {&#10;        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();&#10;        inorderHelper(1, result);&#10;        return result;&#10;    }&#10;&#10;    private void inorderHelper(int index, List&lt;Integer&gt; result) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        inorderHelper(getLeft(index), result);&#10;        result.add(treeArray[index]);&#10;        inorderHelper(getRight(index), result);&#10;    }&#10;&#10;    // 後序走訪&#10;    public List&lt;Integer&gt; postorder() {&#10;        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();&#10;        postorderHelper(1, result);&#10;        return result;&#10;    }&#10;&#10;    private void postorderHelper(int index, List&lt;Integer&gt; result) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        postorderHelper(getLeft(index), result);&#10;        postorderHelper(getRight(index), result);&#10;        result.add(treeArray[index]);&#10;    }&#10;&#10;    // 靜態方法：將字串陣列轉為 Integer 陣列（支援 null）&#10;    public static Integer[] parseInput(String input) {&#10;        String[] parts = input.split(&quot;,&quot;);&#10;        Integer[] arr = new Integer[parts.length + 1]; // arr[0] 保留&#10;        arr[0] = 0; // 節點數量初始化為0&#10;        for (int i = 0; i &lt; parts.length; i++) {&#10;            String s = parts[i].trim();&#10;            if (s.equalsIgnoreCase(&quot;null&quot;)) arr[i + 1] = null;&#10;            else arr[i + 1] = Integer.parseInt(s);&#10;            if (!s.equalsIgnoreCase(&quot;null&quot;)) arr[0]++;&#10;        }&#10;        return arr;&#10;    }&#10;&#10;    // 刪除指定索引的節點&#10;    // 若為樹葉節點則直接刪除，若為中間節點則刪除整個子樹&#10;    public void delete(int index) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        int left = getLeft(index);&#10;        int right = getRight(index);&#10;        boolean isLeaf = (!isValidIndex(left) || treeArray[left] == null)&#10;                &amp;&amp; (!isValidIndex(right) || treeArray[right] == null);&#10;        if (isLeaf) {&#10;            treeArray[index] = null;&#10;        } else {&#10;            deleteSubtree(index);&#10;        }&#10;    }&#10;&#10;    // 遞迴刪除以 index 為根的子樹&#10;    private void deleteSubtree(int index) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        treeArray[index] = null;&#10;        deleteSubtree(getLeft(index));&#10;        deleteSubtree(getRight(index));&#10;    }&#10;&#10;    // 測試主程式&#10;    public static void main(String[] args) {&#10;        Scanner sc = new Scanner(System.in);&#10;        System.out.println(&quot;請輸入以逗號分隔的陣列（用null表示空節點）：&quot;);&#10;        String input = sc.nextLine();&#10;        Integer[] arr = parseInput(input);&#10;        BinaryTreeArray tree = new BinaryTreeArray(arr);&#10;        System.out.println(&quot;索引:   &quot; + Arrays.toString(IntStream.range(1, arr.length).toArray()));&#10;        System.out.println(&quot;內容:   &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;        System.out.println(&quot;節點數: &quot; + arr[0]);&#10;        System.out.println(&quot;中序: &quot; + tree.inorder());&#10;        System.out.println(&quot;前序: &quot; + tree.preorder());&#10;        System.out.println(&quot;後序: &quot; + tree.postorder());&#10;&#10;        while (true) {&#10;            System.out.println(&quot;請選擇操作: 1) 增加節點 2) 刪除節點 3) 退出&quot;);&#10;            String op = sc.nextLine();&#10;            if (op.equals(&quot;1&quot;)) {&#10;                System.out.print(&quot;請輸入要插入的索引: &quot;);&#10;                int idx = Integer.parseInt(sc.nextLine());&#10;                System.out.print(&quot;請輸入要插入的值(整數): &quot;);&#10;                String valStr = sc.nextLine();&#10;                Integer val = valStr.equalsIgnoreCase(&quot;null&quot;) ? null : Integer.parseInt(valStr);&#10;                if (idx &gt; 0 &amp;&amp; idx &lt; arr.length) {&#10;                    // 若原本為null且新值非null，節點數+1&#10;                    if (arr[idx] == null &amp;&amp; val != null) arr[0]++;&#10;                    // 若原本非null且新值為null，節點數-1&#10;                    if (arr[idx] != null &amp;&amp; val == null) arr[0]--;&#10;                    arr[idx] = val;&#10;                    System.out.println(&quot;已插入於索引 &quot; + idx);&#10;                } else {&#10;                    System.out.println(&quot;索引超出範圍&quot;);&#10;                }&#10;            } else if (op.equals(&quot;2&quot;)) {&#10;                System.out.print(&quot;請輸入要刪除的索引: &quot;);&#10;                int idx = Integer.parseInt(sc.nextLine());&#10;                // 遞迴計算刪除節點數&#10;                int[] delCount = new int[]{0};&#10;                countDelete(arr, idx, delCount);&#10;                tree.delete(idx);&#10;                arr[0] -= delCount[0];&#10;                System.out.println(&quot;已刪除索引 &quot; + idx);&#10;            } else if (op.equals(&quot;3&quot;)) {&#10;                System.out.println(&quot;程式結束&quot;);&#10;                break;&#10;            } else {&#10;                System.out.println(&quot;無效選項&quot;);&#10;            }&#10;            System.out.println(&quot;索引:   &quot; + Arrays.toString(IntStream.range(1, arr.length).toArray()));&#10;            System.out.println(&quot;內容:   &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;            System.out.println(&quot;節點數: &quot; + arr[0]);&#10;            System.out.println(&quot;中序: &quot; + tree.inorder());&#10;            System.out.println(&quot;前序: &quot; + tree.preorder());&#10;            System.out.println(&quot;後序: &quot; + tree.postorder());&#10;        }&#10;    }&#10;&#10;    // 遞迴計算將被刪除的節點數&#10;    private static void countDelete(Integer[] arr, int idx, int[] count) {&#10;        if (idx &lt;= 0 || idx &gt;= arr.length || arr[idx] == null) return;&#10;        count[0]++;&#10;        countDelete(arr, 2 * idx, count);&#10;        countDelete(arr, 2 * idx + 1, count);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import java.util.*;&#10;import java.util.stream.IntStream;&#10;&#10;public class BinaryTreeArray {&#10;    private Integer[] treeArray;&#10;&#10;    public BinaryTreeArray(Integer[] arr) {&#10;        this.treeArray = arr;&#10;    }&#10;&#10;    // 工具方法：取得有效索引範圍（1 ~ arr.length-1）&#10;    private int getLeft(int index) { return 2 * index; }&#10;    private int getRight(int index) { return 2 * index + 1; }&#10;    private boolean isValidIndex(int index) { return index &gt; 0 &amp;&amp; index &lt; treeArray.length; }&#10;&#10;    // 前序走訪&#10;    public List&lt;Integer&gt; preorder() {&#10;        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();&#10;        preorderHelper(1, result);&#10;        return result;&#10;    }&#10;&#10;    private void preorderHelper(int index, List&lt;Integer&gt; result) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        result.add(treeArray[index]);&#10;        preorderHelper(getLeft(index), result);&#10;        preorderHelper(getRight(index), result);&#10;    }&#10;&#10;    // 中序走訪&#10;    public List&lt;Integer&gt; inorder() {&#10;        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();&#10;        inorderHelper(1, result);&#10;        return result;&#10;    }&#10;&#10;    private void inorderHelper(int index, List&lt;Integer&gt; result) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        inorderHelper(getLeft(index), result);&#10;        result.add(treeArray[index]);&#10;        inorderHelper(getRight(index), result);&#10;    }&#10;&#10;    // 後序走訪&#10;    public List&lt;Integer&gt; postorder() {&#10;        List&lt;Integer&gt; result = new ArrayList&lt;&gt;();&#10;        postorderHelper(1, result);&#10;        return result;&#10;    }&#10;&#10;    private void postorderHelper(int index, List&lt;Integer&gt; result) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        postorderHelper(getLeft(index), result);&#10;        postorderHelper(getRight(index), result);&#10;        result.add(treeArray[index]);&#10;    }&#10;&#10;    // 靜態方法：將字串陣列轉為 Integer 陣列（支援 null）&#10;    public static Integer[] parseInput(String input) {&#10;        String[] parts = input.split(&quot;,&quot;);&#10;        Integer[] arr = new Integer[parts.length + 1]; // arr[0] 保留&#10;        arr[0] = 0; // 節點數量初始化為0&#10;        for (int i = 0; i &lt; parts.length; i++) {&#10;            String s = parts[i].trim();&#10;            if (s.equalsIgnoreCase(&quot;null&quot;)) arr[i + 1] = null;&#10;            else arr[i + 1] = Integer.parseInt(s);&#10;            if (!s.equalsIgnoreCase(&quot;null&quot;)) arr[0]++;&#10;        }&#10;        return arr;&#10;    }&#10;&#10;    // 刪除指定索引的節點&#10;    // 若為樹葉節點則直接刪除，若為中間節點則刪除整個子樹&#10;    public void delete(int index) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        int left = getLeft(index);&#10;        int right = getRight(index);&#10;        boolean isLeaf = (!isValidIndex(left) || treeArray[left] == null)&#10;                &amp;&amp; (!isValidIndex(right) || treeArray[right] == null);&#10;        if (isLeaf) {&#10;            treeArray[index] = null;&#10;        } else {&#10;            deleteSubtree(index);&#10;        }&#10;    }&#10;&#10;    // 遞迴刪除以 index 為根的子樹&#10;    private void deleteSubtree(int index) {&#10;        if (!isValidIndex(index) || treeArray[index] == null) return;&#10;        treeArray[index] = null;&#10;        deleteSubtree(getLeft(index));&#10;        deleteSubtree(getRight(index));&#10;    }&#10;&#10;    // 測試主程式&#10;    public static void main(String[] args) {&#10;        Scanner sc = new Scanner(System.in);&#10;        System.out.println(&quot;請輸入以逗號分隔的陣列（用null表示空節點）：&quot;);&#10;        System.out.println(&quot;或輸入 auto:N 由程式自動產生 N 個不重覆隨機數字&quot;);&#10;        String input = sc.nextLine();&#10;        Integer[] arr;&#10;        if (input.trim().toLowerCase().startsWith(&quot;auto:&quot;)) {&#10;            int n = 0;&#10;            try {&#10;                n = Integer.parseInt(input.trim().substring(5));&#10;            } catch (Exception e) {&#10;                System.out.println(&quot;格式錯誤，請輸入 auto:N，例如 auto:10&quot;);&#10;                return;&#10;            }&#10;            if (n &lt;= 0) {&#10;                System.out.println(&quot;N 必須大於 0&quot;);&#10;                return;&#10;            }&#10;            Set&lt;Integer&gt; nums = new LinkedHashSet&lt;&gt;();&#10;            Random rand = new Random();&#10;            while (nums.size() &lt; n) {&#10;                nums.add(rand.nextInt(10000)); // 可調整範圍&#10;            }&#10;            arr = new Integer[n + 1];&#10;            arr[0] = n;&#10;            int i = 1;&#10;            for (int num : nums) arr[i++] = num;&#10;        } else {&#10;            arr = parseInput(input);&#10;        }&#10;        BinaryTreeArray tree = new BinaryTreeArray(arr);&#10;        System.out.println(&quot;索引:   &quot; + Arrays.toString(IntStream.range(1, arr.length).toArray()));&#10;        System.out.println(&quot;內容:   &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;        System.out.println(&quot;節點數: &quot; + arr[0]);&#10;        System.out.println(&quot;中序: &quot; + tree.inorder());&#10;        System.out.println(&quot;前序: &quot; + tree.preorder());&#10;        System.out.println(&quot;後序: &quot; + tree.postorder());&#10;&#10;        while (true) {&#10;            System.out.println(&quot;請選擇操作: 1) 增加節點 2) 刪除節點 3) 退出&quot;);&#10;            String op = sc.nextLine();&#10;            if (op.equals(&quot;1&quot;)) {&#10;                System.out.print(&quot;請輸入要插入的索引: &quot;);&#10;                int idx = Integer.parseInt(sc.nextLine());&#10;                System.out.print(&quot;請輸入要插入的值(整數): &quot;);&#10;                String valStr = sc.nextLine();&#10;                Integer val = valStr.equalsIgnoreCase(&quot;null&quot;) ? null : Integer.parseInt(valStr);&#10;                if (idx &gt; 0 &amp;&amp; idx &lt; arr.length) {&#10;                    // 若原本為null且新值非null，節點數+1&#10;                    if (arr[idx] == null &amp;&amp; val != null) arr[0]++;&#10;                    // 若原本非null且新值為null，節點數-1&#10;                    if (arr[idx] != null &amp;&amp; val == null) arr[0]--;&#10;                    arr[idx] = val;&#10;                    System.out.println(&quot;已插入於索引 &quot; + idx);&#10;                } else {&#10;                    System.out.println(&quot;索引超出範圍&quot;);&#10;                }&#10;            } else if (op.equals(&quot;2&quot;)) {&#10;                System.out.print(&quot;請輸入要刪除的索引: &quot;);&#10;                int idx = Integer.parseInt(sc.nextLine());&#10;                // 遞迴計算刪除節點數&#10;                int[] delCount = new int[]{0};&#10;                countDelete(arr, idx, delCount);&#10;                tree.delete(idx);&#10;                arr[0] -= delCount[0];&#10;                System.out.println(&quot;已刪除索引 &quot; + idx);&#10;            } else if (op.equals(&quot;3&quot;)) {&#10;                System.out.println(&quot;程式結束&quot;);&#10;                break;&#10;            } else {&#10;                System.out.println(&quot;無效選項&quot;);&#10;            }&#10;            System.out.println(&quot;索引:   &quot; + Arrays.toString(IntStream.range(1, arr.length).toArray()));&#10;            System.out.println(&quot;內容:   &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;            System.out.println(&quot;節點數: &quot; + arr[0]);&#10;            System.out.println(&quot;中序: &quot; + tree.inorder());&#10;            System.out.println(&quot;前序: &quot; + tree.preorder());&#10;            System.out.println(&quot;後序: &quot; + tree.postorder());&#10;        }&#10;    }&#10;&#10;    // 遞迴計算將被刪除的節點數&#10;    private static void countDelete(Integer[] arr, int idx, int[] count) {&#10;        if (idx &lt;= 0 || idx &gt;= arr.length || arr[idx] == null) return;&#10;        count[0]++;&#10;        countDelete(arr, 2 * idx, count);&#10;        countDelete(arr, 2 * idx + 1, count);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0729-Tree/src/BinaryTreeArrayGUI.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0729-Tree/src/BinaryTreeArrayGUI.java" />
              <option name="originalContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.*;&#10;import java.util.*;&#10;import java.util.stream.IntStream;&#10;&#10;public class BinaryTreeArrayGUI extends JFrame {&#10;    private BinaryTreeArray tree;&#10;    private Integer[] arr;&#10;    private JTextField inputField;&#10;    private JTextField insertIdxField, insertValField;&#10;    private JTextField deleteIdxField;&#10;    private JTextArea outputArea;&#10;    private JLabel nodeCountLabel;&#10;    private TreeVisualizationPanel treePanel;&#10;    private JRadioButton inorderBtn, preorderBtn, postorderBtn;&#10;    private JButton visitBtn;&#10;    private JButton stepBtn, resetBtn;&#10;    private javax.swing.Timer walkTimer;&#10;    private java.util.List&lt;Integer&gt; currentTraversalPath;&#10;&#10;    public BinaryTreeArrayGUI() {&#10;        setTitle(&quot;Binary Tree/Heap 教學系統&quot;);&#10;        setDefaultCloseOperation(EXIT_ON_CLOSE);&#10;        setSize(1000, 800);&#10;        setLayout(new BorderLayout(10, 10));&#10;&#10;        // 設定主要背景色&#10;        getContentPane().setBackground(new Color(248, 249, 250));&#10;&#10;        // 頂部輸入面板&#10;        JPanel topPanel = new JPanel(new GridBagLayout());&#10;        topPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;建立二元樹&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        topPanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;&#10;        inputField = new JTextField(25);&#10;        inputField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        JButton buildBtn = new JButton(&quot;建立/重設樹&quot;);&#10;        buildBtn.setBackground(new Color(144, 238, 144));  // 淡綠色背景&#10;        buildBtn.setForeground(Color.BLACK);  // 黑色文字&#10;        buildBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;&#10;        JButton autoBtn = new JButton(&quot;自動產生隨機數&quot;);&#10;        autoBtn.setBackground(new Color(144, 238, 144));  // 淡綠色背景&#10;        autoBtn.setForeground(Color.BLACK);  // 黑色文字&#10;        autoBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        JTextField autoNField = new JTextField(5);&#10;        autoNField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        topPanel.add(new JLabel(&quot;輸入陣列(逗號分隔, null為空):&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(inputField, gbc);&#10;        gbc.gridx = 2;&#10;        topPanel.add(buildBtn, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        topPanel.add(new JLabel(&quot;或產生 N 個隨機數:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(autoNField, gbc);&#10;        gbc.gridx = 2;&#10;        topPanel.add(autoBtn, gbc);&#10;&#10;        add(topPanel, BorderLayout.NORTH);&#10;&#10;        // 中央操作面板&#10;        JPanel centerPanel = new JPanel(new BorderLayout());&#10;&#10;        // 左側操作區&#10;        JPanel leftPanel = new JPanel(new GridBagLayout());&#10;        leftPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;節點操作&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        leftPanel.setBackground(Color.WHITE);&#10;        leftPanel.setPreferredSize(new Dimension(300, 0));&#10;&#10;        GridBagConstraints leftGbc = new GridBagConstraints();&#10;        leftGbc.insets = new Insets(10, 10, 5, 10);&#10;        leftGbc.anchor = GridBagConstraints.WEST;&#10;        leftGbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        // 插入/修改節點區域&#10;        JPanel insertPanel = new JPanel(new GridBagLayout());&#10;        insertPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createLineBorder(new Color(144, 238, 144), 1), &quot;插入/修改節點&quot;));&#10;        insertPanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints insertGbc = new GridBagConstraints();&#10;        insertGbc.insets = new Insets(5, 5, 5, 5);&#10;        insertGbc.anchor = GridBagConstraints.WEST;&#10;&#10;        insertIdxField = new JTextField(12);&#10;        insertValField = new JTextField(12);&#10;        insertIdxField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        insertValField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        insertIdxField.setHorizontalAlignment(JTextField.LEFT);&#10;        insertValField.setHorizontalAlignment(JTextField.LEFT);&#10;&#10;        JButton insertBtn = new JButton(&quot;插入/修改&quot;);&#10;        insertBtn.setBackground(new Color(144, 238, 144));&#10;        insertBtn.setForeground(Color.BLACK);&#10;        insertBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        insertBtn.setPreferredSize(new Dimension(120, 30));&#10;&#10;        insertGbc.gridx = 0; insertGbc.gridy = 0;&#10;        insertPanel.add(new JLabel(&quot;索引:&quot;), insertGbc);&#10;        insertGbc.gridx = 1;&#10;        insertPanel.add(insertIdxField, insertGbc);&#10;&#10;        insertGbc.gridx = 0; insertGbc.gridy = 1;&#10;        insertPanel.add(new JLabel(&quot;值:&quot;), insertGbc);&#10;        insertGbc.gridx = 1;&#10;        insertPanel.add(insertValField, insertGbc);&#10;&#10;        insertGbc.gridx = 0; insertGbc.gridy = 2; insertGbc.gridwidth = 2;&#10;        insertGbc.fill = GridBagConstraints.HORIZONTAL;&#10;        insertPanel.add(insertBtn, insertGbc);&#10;&#10;        // 刪除節點區域&#10;        JPanel deletePanel = new JPanel(new GridBagLayout());&#10;        deletePanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createLineBorder(new Color(144, 238, 144), 1), &quot;刪除節點&quot;));&#10;        deletePanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints deleteGbc = new GridBagConstraints();&#10;        deleteGbc.insets = new Insets(5, 5, 5, 5);&#10;        deleteGbc.anchor = GridBagConstraints.WEST;&#10;&#10;        deleteIdxField = new JTextField(12);&#10;        deleteIdxField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        deleteIdxField.setHorizontalAlignment(JTextField.LEFT);&#10;&#10;        JButton deleteBtn = new JButton(&quot;刪除節點&quot;);&#10;        deleteBtn.setBackground(new Color(144, 238, 144));&#10;        deleteBtn.setForeground(Color.BLACK);&#10;        deleteBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        deleteBtn.setPreferredSize(new Dimension(120, 30));&#10;&#10;        deleteGbc.gridx = 0; deleteGbc.gridy = 0;&#10;        deletePanel.add(new JLabel(&quot;索引:&quot;), deleteGbc);&#10;        deleteGbc.gridx = 1;&#10;        deletePanel.add(deleteIdxField, deleteGbc);&#10;&#10;        deleteGbc.gridx = 0; deleteGbc.gridy = 1; deleteGbc.gridwidth = 2;&#10;        deleteGbc.fill = GridBagConstraints.HORIZONTAL;&#10;        deletePanel.add(deleteBtn, deleteGbc);&#10;&#10;        // 走訪選項區域&#10;        JPanel visitPanel = new JPanel(new GridBagLayout());&#10;        visitPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createLineBorder(new Color(144, 238, 144), 1), &quot;樹走訪&quot;));&#10;        visitPanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints visitGbc = new GridBagConstraints();&#10;        visitGbc.insets = new Insets(5, 5, 5, 5);&#10;        visitGbc.anchor = GridBagConstraints.WEST;&#10;        visitGbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        inorderBtn = new JRadioButton(&quot;中序 (Inorder)&quot;);&#10;        preorderBtn = new JRadioButton(&quot;前序 (Preorder)&quot;);&#10;        postorderBtn = new JRadioButton(&quot;後序 (Postorder)&quot;);&#10;&#10;        inorderBtn.setBackground(Color.WHITE);&#10;        preorderBtn.setBackground(Color.WHITE);&#10;        postorderBtn.setBackground(Color.WHITE);&#10;&#10;        visitBtn = new JButton(&quot;執行走訪&quot;);&#10;        visitBtn.setBackground(new Color(144, 238, 144));&#10;        visitBtn.setForeground(Color.BLACK);&#10;        visitBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;&#10;        stepBtn = new JButton(&quot;逐步顯示&quot;);&#10;        stepBtn.setBackground(new Color(144, 238, 144));&#10;        stepBtn.setForeground(Color.BLACK);&#10;        stepBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;        stepBtn.setEnabled(false);&#10;&#10;        resetBtn = new JButton(&quot;重置&quot;);&#10;        resetBtn.setBackground(new Color(144, 238, 144));&#10;        resetBtn.setForeground(Color.BLACK);&#10;        resetBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;        resetBtn.setEnabled(false);&#10;&#10;        visitGbc.gridx = 0; visitGbc.gridy = 0; visitGbc.gridwidth = 3;&#10;        visitPanel.add(inorderBtn, visitGbc);&#10;        visitGbc.gridy = 1;&#10;        visitPanel.add(preorderBtn, visitGbc);&#10;        visitGbc.gridy = 2;&#10;        visitPanel.add(postorderBtn, visitGbc);&#10;&#10;        // 控制按鈕區域&#10;        JPanel controlPanel = new JPanel(new GridLayout(1, 3, 3, 3));&#10;        controlPanel.setBackground(Color.WHITE);&#10;        controlPanel.add(visitBtn);&#10;        controlPanel.add(stepBtn);&#10;        controlPanel.add(resetBtn);&#10;&#10;        visitGbc.gridy = 3; visitGbc.insets = new Insets(10, 5, 5, 5);&#10;        visitPanel.add(controlPanel, visitGbc);&#10;&#10;        // 將各個面板添加到左側主面板&#10;        leftGbc.gridx = 0; leftGbc.gridy = 0; leftGbc.weightx = 1.0;&#10;        leftPanel.add(insertPanel, leftGbc);&#10;&#10;        leftGbc.gridy = 1; leftGbc.insets = new Insets(5, 10, 5, 10);&#10;        leftPanel.add(deletePanel, leftGbc);&#10;&#10;        leftGbc.gridy = 2; leftGbc.weighty = 1.0;&#10;        leftPanel.add(visitPanel, leftGbc);&#10;&#10;        centerPanel.add(leftPanel, BorderLayout.WEST);&#10;&#10;        // 右側樹狀顯示區&#10;        JPanel rightPanel = new JPanel(new BorderLayout());&#10;        rightPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;樹狀結構視覺化&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        rightPanel.setBackground(Color.WHITE);&#10;&#10;        treePanel = new TreeVisualizationPanel();&#10;        rightPanel.add(treePanel, BorderLayout.CENTER);&#10;&#10;        centerPanel.add(rightPanel, BorderLayout.CENTER);&#10;        add(centerPanel, BorderLayout.CENTER);&#10;&#10;        // 底部資訊面板&#10;        JPanel bottomPanel = new JPanel(new BorderLayout());&#10;&#10;        // 節點數顯示&#10;        JPanel infoPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;        infoPanel.setBackground(new Color(248, 249, 250));&#10;        nodeCountLabel = new JLabel(&quot;節點數: 0&quot;);&#10;        nodeCountLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        nodeCountLabel.setForeground(new Color(0, 123, 255));&#10;        infoPanel.add(nodeCountLabel);&#10;        bottomPanel.add(infoPanel, BorderLayout.NORTH);&#10;&#10;        // 輸出結果區&#10;        JPanel outputPanel = new JPanel(new BorderLayout());&#10;        outputPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;走訪結果&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        outputPanel.setBackground(Color.WHITE);&#10;&#10;        outputArea = new JTextArea(6, 80);&#10;        outputArea.setEditable(false);&#10;        outputArea.setFont(new Font(&quot;Courier New&quot;, Font.PLAIN, 12));&#10;        outputArea.setBackground(new Color(248, 249, 250));&#10;        outputArea.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));&#10;        outputPanel.add(new JScrollPane(outputArea), BorderLayout.CENTER);&#10;&#10;        bottomPanel.add(outputPanel, BorderLayout.CENTER);&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;&#10;        // 事件處理&#10;        buildBtn.addActionListener(e -&gt; buildTreeFromInput());&#10;        autoBtn.addActionListener(e -&gt; buildTreeAuto(autoNField.getText()));&#10;        insertBtn.addActionListener(e -&gt; insertNode());&#10;        deleteBtn.addActionListener(e -&gt; deleteNode());&#10;        visitBtn.addActionListener(e -&gt; visitTree());&#10;        stepBtn.addActionListener(e -&gt; stepTraversal());&#10;        resetBtn.addActionListener(e -&gt; resetTraversal());&#10;&#10;        // 初始化 Timer&#10;        walkTimer = new javax.swing.Timer(800, e -&gt; {&#10;            if (treePanel.hasMoreSteps()) {&#10;                treePanel.showNextVisitStep();&#10;            } else {&#10;                walkTimer.stop();&#10;                stepBtn.setEnabled(false);&#10;            }&#10;        });&#10;&#10;        // 設定視窗居中&#10;        setLocationRelativeTo(null);&#10;    }&#10;&#10;    private void buildTreeFromInput() {&#10;        String input = inputField.getText().trim();&#10;        arr = BinaryTreeArray.parseInput(input);&#10;        tree = new BinaryTreeArray(arr);&#10;        outputArea.setText(&quot;建立樹的陣列參數: &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;        updateDisplay(false);&#10;    }&#10;&#10;    private void buildTreeAuto(String nStr) {&#10;        int n;&#10;        try {&#10;            n = Integer.parseInt(nStr.trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;請輸入正整數N&quot;);&#10;            return;&#10;        }&#10;        if (n &lt;= 0) {&#10;            JOptionPane.showMessageDialog(this, &quot;N必須大於0&quot;);&#10;            return;&#10;        }&#10;        Set&lt;Integer&gt; nums = new LinkedHashSet&lt;&gt;();&#10;        Random rand = new Random();&#10;        while (nums.size() &lt; n) nums.add(rand.nextInt(10000));&#10;        arr = new Integer[n + 1];&#10;        arr[0] = n;&#10;        int i = 1;&#10;        for (int num : nums) arr[i++] = num;&#10;        tree = new BinaryTreeArray(arr);&#10;        inputField.setText(&quot;&quot;);&#10;        outputArea.setText(&quot;建立樹的陣列參數: &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;        updateDisplay(false);&#10;    }&#10;&#10;    private void insertNode() {&#10;        if (arr == null) return;&#10;        int idx;&#10;        try {&#10;            idx = Integer.parseInt(insertIdxField.getText().trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;請輸入索引&quot;);&#10;            return;&#10;        }&#10;        String valStr = insertValField.getText().trim();&#10;        Integer val = valStr.equalsIgnoreCase(&quot;null&quot;) ? null : null;&#10;        if (!valStr.equalsIgnoreCase(&quot;null&quot;)) {&#10;            try {&#10;                val = Integer.parseInt(valStr);&#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &quot;請輸入整數或null&quot;);&#10;                return;&#10;            }&#10;        }&#10;        if (idx &gt; 0 &amp;&amp; idx &lt; arr.length) {&#10;            if (arr[idx] == null &amp;&amp; val != null) arr[0]++;&#10;            if (arr[idx] != null &amp;&amp; val == null) arr[0]--;&#10;            arr[idx] = val;&#10;            tree = new BinaryTreeArray(arr);&#10;            updateDisplay(false);&#10;        } else {&#10;            JOptionPane.showMessageDialog(this, &quot;索引超出範圍&quot;);&#10;        }&#10;    }&#10;&#10;    private void deleteNode() {&#10;        if (arr == null) return;&#10;        int idx;&#10;        try {&#10;            idx = Integer.parseInt(deleteIdxField.getText().trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;請輸入索引&quot;);&#10;            return;&#10;        }&#10;        int[] delCount = new int[]{0};&#10;        countDelete(arr, idx, delCount);&#10;        tree.delete(idx);&#10;        arr[0] -= delCount[0];&#10;        updateDisplay(false);&#10;    }&#10;&#10;    private void updateDisplay(boolean showTraversal) {&#10;        if (arr == null) return;&#10;        nodeCountLabel.setText(&quot;節點數: &quot; + arr[0]);&#10;&#10;        // 更新樹狀視覺化&#10;        treePanel.setTreeArray(arr);&#10;&#10;        if (tree != null &amp;&amp; showTraversal) {&#10;            StringBuilder sb = new StringBuilder();&#10;            if (inorderBtn.isSelected()) {&#10;                sb.append(&quot;中序: &quot;).append(tree.inorder()).append(&quot;\n&quot;);&#10;            }&#10;            if (preorderBtn.isSelected()) {&#10;                sb.append(&quot;前序: &quot;).append(tree.preorder()).append(&quot;\n&quot;);&#10;            }&#10;            if (postorderBtn.isSelected()) {&#10;                sb.append(&quot;後序: &quot;).append(tree.postorder()).append(&quot;\n&quot;);&#10;            }&#10;            if (sb.length() == 0) {&#10;                sb.append(&quot;請至少選擇一種走訪方式&quot;);&#10;            }&#10;            outputArea.setText(sb.toString());&#10;        }&#10;    }&#10;&#10;    // 遞迴計算將被刪除的節點數&#10;    private static void countDelete(Integer[] arr, int idx, int[] count) {&#10;        if (idx &lt;= 0 || idx &gt;= arr.length || arr[idx] == null) return;&#10;        count[0]++;&#10;        countDelete(arr, 2 * idx, count);&#10;        countDelete(arr, 2 * idx + 1, count);&#10;    }&#10;&#10;    private void visitTree() {&#10;        if (tree == null) return;&#10;&#10;        currentTraversalPath = new ArrayList&lt;&gt;();&#10;        StringBuilder sb = new StringBuilder();&#10;&#10;        if (inorderBtn.isSelected()) {&#10;            java.util.List&lt;Integer&gt; inorderResult = tree.inorder();&#10;            currentTraversalPath.addAll(inorderResult);&#10;            sb.append(&quot;中序: &quot;).append(inorderResult).append(&quot;\n&quot;);&#10;        }&#10;        if (preorderBtn.isSelected()) {&#10;            java.util.List&lt;Integer&gt; preorderResult = tree.preorder();&#10;            if (!inorderBtn.isSelected()) currentTraversalPath.addAll(preorderResult);&#10;            sb.append(&quot;前序: &quot;).append(preorderResult).append(&quot;\n&quot;);&#10;        }&#10;        if (postorderBtn.isSelected()) {&#10;            java.util.List&lt;Integer&gt; postorderResult = tree.postorder();&#10;            if (!inorderBtn.isSelected() &amp;&amp; !preorderBtn.isSelected()) currentTraversalPath.addAll(postorderResult);&#10;            sb.append(&quot;後序: &quot;).append(postorderResult).append(&quot;\n&quot;);&#10;        }&#10;&#10;        if (sb.length() == 0) {&#10;            sb.append(&quot;請至少選擇一種走訪方式&quot;);&#10;            outputArea.setText(sb.toString());&#10;            return;&#10;        }&#10;&#10;        // 設定走訪路徑到視覺化面板&#10;        treePanel.setVisitPath(currentTraversalPath);&#10;        outputArea.setText(sb.toString());&#10;&#10;        // 啟用控制按鈕&#10;        stepBtn.setEnabled(true);&#10;        resetBtn.setEnabled(true);&#10;    }&#10;&#10;    private void stepTraversal() {&#10;        if (currentTraversalPath != null &amp;&amp; !currentTraversalPath.isEmpty()) {&#10;            if (treePanel.hasMoreSteps()) {&#10;                treePanel.showNextVisitStep();&#10;                if (!treePanel.hasMoreSteps()) {&#10;                    stepBtn.setEnabled(false);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private void resetTraversal() {&#10;        if (walkTimer.isRunning()) {&#10;            walkTimer.stop();&#10;        }&#10;        treePanel.clearVisitPath();&#10;        stepBtn.setEnabled(currentTraversalPath != null &amp;&amp; !currentTraversalPath.isEmpty());&#10;        resetBtn.setEnabled(false);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            BinaryTreeArrayGUI gui = new BinaryTreeArrayGUI();&#10;            gui.setVisible(true);&#10;        });&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.event.*;&#10;import java.util.*;&#10;import java.util.stream.IntStream;&#10;&#10;public class BinaryTreeArrayGUI extends JFrame {&#10;    private BinaryTreeArray tree;&#10;    private Integer[] arr;&#10;    private JTextField inputField;&#10;    private JTextField insertIdxField, insertValField;&#10;    private JTextField deleteIdxField;&#10;    private JTextArea outputArea;&#10;    private JLabel nodeCountLabel;&#10;    private TreeVisualizationPanel treePanel;&#10;    private JRadioButton inorderBtn, preorderBtn, postorderBtn;&#10;    private JButton visitBtn;&#10;    private JButton stepBtn, resetBtn;&#10;    private javax.swing.Timer walkTimer;&#10;    private java.util.List&lt;Integer&gt; currentTraversalPath;&#10;&#10;    public BinaryTreeArrayGUI() {&#10;        setTitle(&quot;Binary Tree/Heap 教學系統&quot;);&#10;        setDefaultCloseOperation(EXIT_ON_CLOSE);&#10;        setSize(1000, 800);&#10;        setLayout(new BorderLayout(10, 10));&#10;&#10;        // 設定主要背景色&#10;        getContentPane().setBackground(new Color(248, 249, 250));&#10;&#10;        // 頂部輸入面板&#10;        JPanel topPanel = new JPanel(new GridBagLayout());&#10;        topPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;建立二元樹&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        topPanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints gbc = new GridBagConstraints();&#10;        gbc.insets = new Insets(5, 5, 5, 5);&#10;&#10;        inputField = new JTextField(25);&#10;        inputField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;        JButton buildBtn = new JButton(&quot;建立/重設樹&quot;);&#10;        buildBtn.setBackground(new Color(144, 238, 144));  // 淡綠色背景&#10;        buildBtn.setForeground(Color.BLACK);  // 黑色文字&#10;        buildBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;&#10;        JButton autoBtn = new JButton(&quot;自動產生隨機數&quot;);&#10;        autoBtn.setBackground(new Color(144, 238, 144));  // 淡綠色背景&#10;        autoBtn.setForeground(Color.BLACK);  // 黑色文字&#10;        autoBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        JTextField autoNField = new JTextField(5);&#10;        autoNField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 12));&#10;&#10;        gbc.gridx = 0; gbc.gridy = 0;&#10;        topPanel.add(new JLabel(&quot;輸入陣列(逗號分隔, null為空):&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(inputField, gbc);&#10;        gbc.gridx = 2;&#10;        topPanel.add(buildBtn, gbc);&#10;&#10;        gbc.gridx = 0; gbc.gridy = 1;&#10;        topPanel.add(new JLabel(&quot;或產生 N 個隨機數:&quot;), gbc);&#10;        gbc.gridx = 1;&#10;        topPanel.add(autoNField, gbc);&#10;        gbc.gridx = 2;&#10;        topPanel.add(autoBtn, gbc);&#10;&#10;        add(topPanel, BorderLayout.NORTH);&#10;&#10;        // 中央操作面板&#10;        JPanel centerPanel = new JPanel(new BorderLayout());&#10;&#10;        // 左側操作區&#10;        JPanel leftPanel = new JPanel(new GridBagLayout());&#10;        leftPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;節點操作&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        leftPanel.setBackground(Color.WHITE);&#10;        leftPanel.setPreferredSize(new Dimension(300, 0));&#10;&#10;        GridBagConstraints leftGbc = new GridBagConstraints();&#10;        leftGbc.insets = new Insets(10, 10, 5, 10);&#10;        leftGbc.anchor = GridBagConstraints.WEST;&#10;        leftGbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        // 插入/修改節點區域&#10;        JPanel insertPanel = new JPanel(new GridBagLayout());&#10;        insertPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createLineBorder(new Color(144, 238, 144), 1), &quot;插入/修改節點&quot;));&#10;        insertPanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints insertGbc = new GridBagConstraints();&#10;        insertGbc.insets = new Insets(8, 8, 8, 8);&#10;        insertGbc.anchor = GridBagConstraints.WEST;&#10;&#10;        insertIdxField = new JTextField(15);&#10;        insertValField = new JTextField(15);&#10;        insertIdxField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        insertValField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        insertIdxField.setHorizontalAlignment(JTextField.LEFT);&#10;        insertValField.setHorizontalAlignment(JTextField.LEFT);&#10;        &#10;        // 設定較大的首選大小&#10;        insertIdxField.setPreferredSize(new Dimension(150, 28));&#10;        insertValField.setPreferredSize(new Dimension(150, 28));&#10;&#10;        JButton insertBtn = new JButton(&quot;插入/修改&quot;);&#10;        insertBtn.setBackground(new Color(144, 238, 144));&#10;        insertBtn.setForeground(Color.BLACK);&#10;        insertBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        insertBtn.setPreferredSize(new Dimension(140, 32));&#10;&#10;        insertGbc.gridx = 0; insertGbc.gridy = 0;&#10;        insertPanel.add(new JLabel(&quot;索引:&quot;), insertGbc);&#10;        insertGbc.gridx = 1; insertGbc.weightx = 1.0; insertGbc.fill = GridBagConstraints.HORIZONTAL;&#10;        insertPanel.add(insertIdxField, insertGbc);&#10;&#10;        insertGbc.gridx = 0; insertGbc.gridy = 1; insertGbc.weightx = 0.0; insertGbc.fill = GridBagConstraints.NONE;&#10;        insertPanel.add(new JLabel(&quot;值:&quot;), insertGbc);&#10;        insertGbc.gridx = 1; insertGbc.weightx = 1.0; insertGbc.fill = GridBagConstraints.HORIZONTAL;&#10;        insertPanel.add(insertValField, insertGbc);&#10;&#10;        insertGbc.gridx = 0; insertGbc.gridy = 2; insertGbc.gridwidth = 2; insertGbc.weightx = 0.0;&#10;        insertGbc.fill = GridBagConstraints.HORIZONTAL; insertGbc.insets = new Insets(12, 8, 8, 8);&#10;        insertPanel.add(insertBtn, insertGbc);&#10;&#10;        // 刪除節點區域&#10;        JPanel deletePanel = new JPanel(new GridBagLayout());&#10;        deletePanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createLineBorder(new Color(144, 238, 144), 1), &quot;刪除節點&quot;));&#10;        deletePanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints deleteGbc = new GridBagConstraints();&#10;        deleteGbc.insets = new Insets(8, 8, 8, 8);&#10;        deleteGbc.anchor = GridBagConstraints.WEST;&#10;&#10;        deleteIdxField = new JTextField(15);&#10;        deleteIdxField.setFont(new Font(&quot;Arial&quot;, Font.PLAIN, 14));&#10;        deleteIdxField.setHorizontalAlignment(JTextField.LEFT);&#10;        deleteIdxField.setPreferredSize(new Dimension(150, 28));&#10;&#10;        JButton deleteBtn = new JButton(&quot;刪除節點&quot;);&#10;        deleteBtn.setBackground(new Color(144, 238, 144));&#10;        deleteBtn.setForeground(Color.BLACK);&#10;        deleteBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        deleteBtn.setPreferredSize(new Dimension(140, 32));&#10;&#10;        deleteGbc.gridx = 0; deleteGbc.gridy = 0;&#10;        deletePanel.add(new JLabel(&quot;索引:&quot;), deleteGbc);&#10;        deleteGbc.gridx = 1; deleteGbc.weightx = 1.0; deleteGbc.fill = GridBagConstraints.HORIZONTAL;&#10;        deletePanel.add(deleteIdxField, deleteGbc);&#10;&#10;        deleteGbc.gridx = 0; deleteGbc.gridy = 1; deleteGbc.gridwidth = 2; deleteGbc.weightx = 0.0;&#10;        deleteGbc.fill = GridBagConstraints.HORIZONTAL; deleteGbc.insets = new Insets(12, 8, 8, 8);&#10;        deletePanel.add(deleteBtn, deleteGbc);&#10;&#10;        // 走訪選項區域&#10;        JPanel visitPanel = new JPanel(new GridBagLayout());&#10;        visitPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createLineBorder(new Color(144, 238, 144), 1), &quot;樹走訪&quot;));&#10;        visitPanel.setBackground(Color.WHITE);&#10;&#10;        GridBagConstraints visitGbc = new GridBagConstraints();&#10;        visitGbc.insets = new Insets(5, 5, 5, 5);&#10;        visitGbc.anchor = GridBagConstraints.WEST;&#10;        visitGbc.fill = GridBagConstraints.HORIZONTAL;&#10;&#10;        inorderBtn = new JRadioButton(&quot;中序 (Inorder)&quot;);&#10;        preorderBtn = new JRadioButton(&quot;前序 (Preorder)&quot;);&#10;        postorderBtn = new JRadioButton(&quot;後序 (Postorder)&quot;);&#10;&#10;        inorderBtn.setBackground(Color.WHITE);&#10;        preorderBtn.setBackground(Color.WHITE);&#10;        postorderBtn.setBackground(Color.WHITE);&#10;&#10;        visitBtn = new JButton(&quot;執行走訪&quot;);&#10;        visitBtn.setBackground(new Color(144, 238, 144));&#10;        visitBtn.setForeground(Color.BLACK);&#10;        visitBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;&#10;        stepBtn = new JButton(&quot;逐步顯示&quot;);&#10;        stepBtn.setBackground(new Color(144, 238, 144));&#10;        stepBtn.setForeground(Color.BLACK);&#10;        stepBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;        stepBtn.setEnabled(false);&#10;&#10;        resetBtn = new JButton(&quot;重置&quot;);&#10;        resetBtn.setBackground(new Color(144, 238, 144));&#10;        resetBtn.setForeground(Color.BLACK);&#10;        resetBtn.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 11));&#10;        resetBtn.setEnabled(false);&#10;&#10;        visitGbc.gridx = 0; visitGbc.gridy = 0; visitGbc.gridwidth = 3;&#10;        visitPanel.add(inorderBtn, visitGbc);&#10;        visitGbc.gridy = 1;&#10;        visitPanel.add(preorderBtn, visitGbc);&#10;        visitGbc.gridy = 2;&#10;        visitPanel.add(postorderBtn, visitGbc);&#10;&#10;        // 控制按鈕區域&#10;        JPanel controlPanel = new JPanel(new GridLayout(1, 3, 3, 3));&#10;        controlPanel.setBackground(Color.WHITE);&#10;        controlPanel.add(visitBtn);&#10;        controlPanel.add(stepBtn);&#10;        controlPanel.add(resetBtn);&#10;&#10;        visitGbc.gridy = 3; visitGbc.insets = new Insets(10, 5, 5, 5);&#10;        visitPanel.add(controlPanel, visitGbc);&#10;&#10;        // 將各個面板添加到左側主面板&#10;        leftGbc.gridx = 0; leftGbc.gridy = 0; leftGbc.weightx = 1.0;&#10;        leftPanel.add(insertPanel, leftGbc);&#10;&#10;        leftGbc.gridy = 1; leftGbc.insets = new Insets(5, 10, 5, 10);&#10;        leftPanel.add(deletePanel, leftGbc);&#10;&#10;        leftGbc.gridy = 2; leftGbc.weighty = 1.0;&#10;        leftPanel.add(visitPanel, leftGbc);&#10;&#10;        centerPanel.add(leftPanel, BorderLayout.WEST);&#10;&#10;        // 右側樹狀顯示區&#10;        JPanel rightPanel = new JPanel(new BorderLayout());&#10;        rightPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;樹狀結構視覺化&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        rightPanel.setBackground(Color.WHITE);&#10;&#10;        treePanel = new TreeVisualizationPanel();&#10;        rightPanel.add(treePanel, BorderLayout.CENTER);&#10;&#10;        centerPanel.add(rightPanel, BorderLayout.CENTER);&#10;        add(centerPanel, BorderLayout.CENTER);&#10;&#10;        // 底部資訊面板&#10;        JPanel bottomPanel = new JPanel(new BorderLayout());&#10;&#10;        // 節點數顯示&#10;        JPanel infoPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;        infoPanel.setBackground(new Color(248, 249, 250));&#10;        nodeCountLabel = new JLabel(&quot;節點數: 0&quot;);&#10;        nodeCountLabel.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 14));&#10;        nodeCountLabel.setForeground(new Color(0, 123, 255));&#10;        infoPanel.add(nodeCountLabel);&#10;        bottomPanel.add(infoPanel, BorderLayout.NORTH);&#10;&#10;        // 輸出結果區&#10;        JPanel outputPanel = new JPanel(new BorderLayout());&#10;        outputPanel.setBorder(BorderFactory.createTitledBorder(&#10;            BorderFactory.createEtchedBorder(), &quot;走訪結果&quot;,&#10;            0, 0, new Font(&quot;Arial&quot;, Font.BOLD, 14)));&#10;        outputPanel.setBackground(Color.WHITE);&#10;&#10;        outputArea = new JTextArea(6, 80);&#10;        outputArea.setEditable(false);&#10;        outputArea.setFont(new Font(&quot;Courier New&quot;, Font.PLAIN, 12));&#10;        outputArea.setBackground(new Color(248, 249, 250));&#10;        outputArea.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));&#10;        outputPanel.add(new JScrollPane(outputArea), BorderLayout.CENTER);&#10;&#10;        bottomPanel.add(outputPanel, BorderLayout.CENTER);&#10;        add(bottomPanel, BorderLayout.SOUTH);&#10;&#10;        // 事件處理&#10;        buildBtn.addActionListener(e -&gt; buildTreeFromInput());&#10;        autoBtn.addActionListener(e -&gt; buildTreeAuto(autoNField.getText()));&#10;        insertBtn.addActionListener(e -&gt; insertNode());&#10;        deleteBtn.addActionListener(e -&gt; deleteNode());&#10;        visitBtn.addActionListener(e -&gt; visitTree());&#10;        stepBtn.addActionListener(e -&gt; stepTraversal());&#10;        resetBtn.addActionListener(e -&gt; resetTraversal());&#10;&#10;        // 初始化 Timer&#10;        walkTimer = new javax.swing.Timer(800, e -&gt; {&#10;            if (treePanel.hasMoreSteps()) {&#10;                treePanel.showNextVisitStep();&#10;            } else {&#10;                walkTimer.stop();&#10;                stepBtn.setEnabled(false);&#10;            }&#10;        });&#10;&#10;        // 設定視窗居中&#10;        setLocationRelativeTo(null);&#10;    }&#10;&#10;    private void buildTreeFromInput() {&#10;        String input = inputField.getText().trim();&#10;        arr = BinaryTreeArray.parseInput(input);&#10;        tree = new BinaryTreeArray(arr);&#10;        outputArea.setText(&quot;建立樹的陣列參數: &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;        updateDisplay(false);&#10;    }&#10;&#10;    private void buildTreeAuto(String nStr) {&#10;        int n;&#10;        try {&#10;            n = Integer.parseInt(nStr.trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;請輸入正整數N&quot;);&#10;            return;&#10;        }&#10;        if (n &lt;= 0) {&#10;            JOptionPane.showMessageDialog(this, &quot;N必須大於0&quot;);&#10;            return;&#10;        }&#10;        Set&lt;Integer&gt; nums = new LinkedHashSet&lt;&gt;();&#10;        Random rand = new Random();&#10;        while (nums.size() &lt; n) nums.add(rand.nextInt(10000));&#10;        arr = new Integer[n + 1];&#10;        arr[0] = n;&#10;        int i = 1;&#10;        for (int num : nums) arr[i++] = num;&#10;        tree = new BinaryTreeArray(arr);&#10;        inputField.setText(&quot;&quot;);&#10;        outputArea.setText(&quot;建立樹的陣列參數: &quot; + Arrays.toString(Arrays.copyOfRange(arr, 1, arr.length)));&#10;        updateDisplay(false);&#10;    }&#10;&#10;    private void insertNode() {&#10;        if (arr == null) return;&#10;        int idx;&#10;        try {&#10;            idx = Integer.parseInt(insertIdxField.getText().trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;請輸入索引&quot;);&#10;            return;&#10;        }&#10;        String valStr = insertValField.getText().trim();&#10;        Integer val = valStr.equalsIgnoreCase(&quot;null&quot;) ? null : null;&#10;        if (!valStr.equalsIgnoreCase(&quot;null&quot;)) {&#10;            try {&#10;                val = Integer.parseInt(valStr);&#10;            } catch (Exception e) {&#10;                JOptionPane.showMessageDialog(this, &quot;請輸入整數或null&quot;);&#10;                return;&#10;            }&#10;        }&#10;        if (idx &gt; 0 &amp;&amp; idx &lt; arr.length) {&#10;            if (arr[idx] == null &amp;&amp; val != null) arr[0]++;&#10;            if (arr[idx] != null &amp;&amp; val == null) arr[0]--;&#10;            arr[idx] = val;&#10;            tree = new BinaryTreeArray(arr);&#10;            updateDisplay(false);&#10;        } else {&#10;            JOptionPane.showMessageDialog(this, &quot;索引超出範圍&quot;);&#10;        }&#10;    }&#10;&#10;    private void deleteNode() {&#10;        if (arr == null) return;&#10;        int idx;&#10;        try {&#10;            idx = Integer.parseInt(deleteIdxField.getText().trim());&#10;        } catch (Exception e) {&#10;            JOptionPane.showMessageDialog(this, &quot;請輸入索引&quot;);&#10;            return;&#10;        }&#10;        int[] delCount = new int[]{0};&#10;        countDelete(arr, idx, delCount);&#10;        tree.delete(idx);&#10;        arr[0] -= delCount[0];&#10;        updateDisplay(false);&#10;    }&#10;&#10;    private void updateDisplay(boolean showTraversal) {&#10;        if (arr == null) return;&#10;        nodeCountLabel.setText(&quot;節點數: &quot; + arr[0]);&#10;&#10;        // 更新樹狀視覺化&#10;        treePanel.setTreeArray(arr);&#10;&#10;        if (tree != null &amp;&amp; showTraversal) {&#10;            StringBuilder sb = new StringBuilder();&#10;            if (inorderBtn.isSelected()) {&#10;                sb.append(&quot;中序: &quot;).append(tree.inorder()).append(&quot;\n&quot;);&#10;            }&#10;            if (preorderBtn.isSelected()) {&#10;                sb.append(&quot;前序: &quot;).append(tree.preorder()).append(&quot;\n&quot;);&#10;            }&#10;            if (postorderBtn.isSelected()) {&#10;                sb.append(&quot;後序: &quot;).append(tree.postorder()).append(&quot;\n&quot;);&#10;            }&#10;            if (sb.length() == 0) {&#10;                sb.append(&quot;請至少選擇一種走訪方式&quot;);&#10;            }&#10;            outputArea.setText(sb.toString());&#10;        }&#10;    }&#10;&#10;    // 遞迴計算將被刪除的節點數&#10;    private static void countDelete(Integer[] arr, int idx, int[] count) {&#10;        if (idx &lt;= 0 || idx &gt;= arr.length || arr[idx] == null) return;&#10;        count[0]++;&#10;        countDelete(arr, 2 * idx, count);&#10;        countDelete(arr, 2 * idx + 1, count);&#10;    }&#10;&#10;    private void visitTree() {&#10;        if (tree == null) return;&#10;&#10;        currentTraversalPath = new ArrayList&lt;&gt;();&#10;        StringBuilder sb = new StringBuilder();&#10;&#10;        if (inorderBtn.isSelected()) {&#10;            java.util.List&lt;Integer&gt; inorderResult = tree.inorder();&#10;            currentTraversalPath.addAll(inorderResult);&#10;            sb.append(&quot;中序: &quot;).append(inorderResult).append(&quot;\n&quot;);&#10;        }&#10;        if (preorderBtn.isSelected()) {&#10;            java.util.List&lt;Integer&gt; preorderResult = tree.preorder();&#10;            if (!inorderBtn.isSelected()) currentTraversalPath.addAll(preorderResult);&#10;            sb.append(&quot;前序: &quot;).append(preorderResult).append(&quot;\n&quot;);&#10;        }&#10;        if (postorderBtn.isSelected()) {&#10;            java.util.List&lt;Integer&gt; postorderResult = tree.postorder();&#10;            if (!inorderBtn.isSelected() &amp;&amp; !preorderBtn.isSelected()) currentTraversalPath.addAll(postorderResult);&#10;            sb.append(&quot;後序: &quot;).append(postorderResult).append(&quot;\n&quot;);&#10;        }&#10;&#10;        if (sb.length() == 0) {&#10;            sb.append(&quot;請至少選擇一種走訪方式&quot;);&#10;            outputArea.setText(sb.toString());&#10;            return;&#10;        }&#10;&#10;        // 設定走訪路徑到視覺化面板&#10;        treePanel.setVisitPath(currentTraversalPath);&#10;        outputArea.setText(sb.toString());&#10;&#10;        // 啟用控制按鈕&#10;        stepBtn.setEnabled(true);&#10;        resetBtn.setEnabled(true);&#10;    }&#10;&#10;    private void stepTraversal() {&#10;        if (currentTraversalPath != null &amp;&amp; !currentTraversalPath.isEmpty()) {&#10;            if (treePanel.hasMoreSteps()) {&#10;                treePanel.showNextVisitStep();&#10;                if (!treePanel.hasMoreSteps()) {&#10;                    stepBtn.setEnabled(false);&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private void resetTraversal() {&#10;        if (walkTimer.isRunning()) {&#10;            walkTimer.stop();&#10;        }&#10;        treePanel.clearVisitPath();&#10;        stepBtn.setEnabled(currentTraversalPath != null &amp;&amp; !currentTraversalPath.isEmpty());&#10;        resetBtn.setEnabled(false);&#10;    }&#10;&#10;    public static void main(String[] args) {&#10;        SwingUtilities.invokeLater(() -&gt; {&#10;            BinaryTreeArrayGUI gui = new BinaryTreeArrayGUI();&#10;            gui.setVisible(true);&#10;        });&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0729-Tree/src/TreeVisualizationPanel.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0729-Tree/src/TreeVisualizationPanel.java" />
              <option name="originalContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.geom.Ellipse2D;&#10;import java.awt.geom.Line2D;&#10;import java.util.ArrayList;&#10;&#10;public class TreeVisualizationPanel extends JPanel {&#10;    private Integer[] treeArray;&#10;    private java.util.List&lt;Integer&gt; visitPath;&#10;    private int currentVisitIndex;&#10;    private static final int NODE_RADIUS = 20;&#10;    private static final int LEVEL_HEIGHT = 80;&#10;    private static final int MIN_HORIZONTAL_SPACING = 50;&#10;&#10;    public TreeVisualizationPanel() {&#10;        setBackground(new Color(248, 249, 250));&#10;        setPreferredSize(new Dimension(600, 400));&#10;        visitPath = new ArrayList&lt;&gt;();&#10;        currentVisitIndex = -1;&#10;    }&#10;&#10;    public void setTreeArray(Integer[] arr) {&#10;        this.treeArray = arr;&#10;        clearVisitPath();&#10;        repaint();&#10;    }&#10;&#10;    public void setVisitPath(java.util.List&lt;Integer&gt; path) {&#10;        this.visitPath = path;&#10;        this.currentVisitIndex = -1;&#10;        repaint();&#10;    }&#10;&#10;    public void showNextVisitStep() {&#10;        if (currentVisitIndex &lt; visitPath.size() - 1) {&#10;            currentVisitIndex++;&#10;            repaint();&#10;        }&#10;    }&#10;&#10;    public void clearVisitPath() {&#10;        this.visitPath.clear();&#10;        this.currentVisitIndex = -1;&#10;        repaint();&#10;    }&#10;&#10;    public boolean hasMoreSteps() {&#10;        return currentVisitIndex &lt; visitPath.size() - 1;&#10;    }&#10;&#10;    @Override&#10;    protected void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;        if (treeArray == null || treeArray.length &lt;= 1) return;&#10;&#10;        Graphics2D g2d = (Graphics2D) g.create();&#10;        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;        g2d.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;&#10;        // 計算樹的最大層數&#10;        int maxLevel = (int) (Math.log(treeArray.length - 1) / Math.log(2)) + 1;&#10;&#10;        // 先畫連接線，再畫節點（避免線條覆蓋節點）&#10;        drawConnections(g2d, maxLevel);&#10;        drawNodes(g2d, maxLevel);&#10;&#10;        g2d.dispose();&#10;    }&#10;&#10;    private void drawConnections(Graphics2D g2d, int maxLevel) {&#10;        g2d.setColor(Color.BLACK);&#10;        g2d.setStroke(new BasicStroke(2));&#10;&#10;        for (int i = 1; i &lt; treeArray.length; i++) {&#10;            if (treeArray[i] == null) continue;&#10;&#10;            int leftChild = 2 * i;&#10;            int rightChild = 2 * i + 1;&#10;&#10;            Point parentPos = getNodePosition(i, maxLevel);&#10;&#10;            // 畫左子節點連線&#10;            if (leftChild &lt; treeArray.length &amp;&amp; treeArray[leftChild] != null) {&#10;                Point leftPos = getNodePosition(leftChild, maxLevel);&#10;                g2d.draw(new Line2D.Double(parentPos.x, parentPos.y, leftPos.x, leftPos.y));&#10;            }&#10;&#10;            // 畫右子節點連線&#10;            if (rightChild &lt; treeArray.length &amp;&amp; treeArray[rightChild] != null) {&#10;                Point rightPos = getNodePosition(rightChild, maxLevel);&#10;                g2d.draw(new Line2D.Double(parentPos.x, parentPos.y, rightPos.x, rightPos.y));&#10;            }&#10;        }&#10;    }&#10;&#10;    private void drawNodes(Graphics2D g2d, int maxLevel) {&#10;        for (int i = 1; i &lt; treeArray.length; i++) {&#10;            if (treeArray[i] == null) continue;&#10;&#10;            Point pos = getNodePosition(i, maxLevel);&#10;            boolean isRoot = (i == 1);&#10;            boolean isLeaf = isLeafNode(i);&#10;            boolean isCurrentVisit = currentVisitIndex &gt;= 0 &amp;&amp; currentVisitIndex &lt; visitPath.size()&#10;                                   &amp;&amp; visitPath.get(currentVisitIndex).equals(treeArray[i]);&#10;            boolean isVisited = isNodeVisited(treeArray[i]);&#10;&#10;            // 設定節點顏色&#10;            if (isCurrentVisit) {&#10;                g2d.setColor(new Color(255, 215, 0));  // 當前走訪節點：金黃色&#10;            } else if (isVisited) {&#10;                g2d.setColor(new Color(144, 238, 144));  // 已走訪節點：淡綠色&#10;            } else if (isRoot) {&#10;                g2d.setColor(Color.BLACK);  // 根節點黑色背景&#10;            } else if (isLeaf) {&#10;                g2d.setColor(Color.WHITE);  // 葉節點白色背景&#10;            } else {&#10;                g2d.setColor(new Color(200, 200, 200));  // 中間節點灰色背景&#10;            }&#10;&#10;            // 畫節點圓圈&#10;            Ellipse2D circle = new Ellipse2D.Double(&#10;                pos.x - NODE_RADIUS, pos.y - NODE_RADIUS,&#10;                2 * NODE_RADIUS, 2 * NODE_RADIUS&#10;            );&#10;            g2d.fill(circle);&#10;&#10;            // 畫節點邊框&#10;            if (isCurrentVisit) {&#10;                g2d.setColor(new Color(255, 140, 0));  // 當前節點橙色邊框&#10;                g2d.setStroke(new BasicStroke(4));&#10;            } else {&#10;                g2d.setColor(Color.BLACK);&#10;                g2d.setStroke(new BasicStroke(2));&#10;            }&#10;            g2d.draw(circle);&#10;&#10;            // 設定文字顏色&#10;            if (isRoot &amp;&amp; !isCurrentVisit &amp;&amp; !isVisited) {&#10;                g2d.setColor(Color.WHITE);  // 根節點白色文字&#10;            } else {&#10;                g2d.setColor(Color.BLACK);  // 其他節點黑色文字&#10;            }&#10;&#10;            // 畫節點值&#10;            String text = treeArray[i].toString();&#10;            FontMetrics fm = g2d.getFontMetrics();&#10;            int textWidth = fm.stringWidth(text);&#10;            int textHeight = fm.getAscent();&#10;            g2d.drawString(text,&#10;                pos.x - textWidth / 2,&#10;                pos.y + textHeight / 2 - 2);&#10;        }&#10;    }&#10;&#10;    private boolean isNodeVisited(Integer value) {&#10;        for (int i = 0; i &lt;= currentVisitIndex &amp;&amp; i &lt; visitPath.size(); i++) {&#10;            if (visitPath.get(i).equals(value)) {&#10;                return true;&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;&#10;    private Point getNodePosition(int index, int maxLevel) {&#10;        int level = (int) (Math.log(index) / Math.log(2));&#10;        int nodesInLevel = 1 &lt;&lt; level;&#10;        int positionInLevel = index - (1 &lt;&lt; level);&#10;&#10;        int panelWidth = getWidth();&#10;        int panelHeight = getHeight();&#10;&#10;        // 計算水平位置&#10;        int totalWidth = panelWidth - 2 * NODE_RADIUS;&#10;        int spacing = Math.max(MIN_HORIZONTAL_SPACING, totalWidth / (nodesInLevel + 1));&#10;        int x = NODE_RADIUS + spacing * (positionInLevel + 1);&#10;&#10;        // 確保節點在面板範圍內&#10;        if (nodesInLevel &gt; 1) {&#10;            x = NODE_RADIUS + (totalWidth * (positionInLevel + 1)) / (nodesInLevel + 1);&#10;        } else {&#10;            x = panelWidth / 2;&#10;        }&#10;&#10;        // 計算垂直位置&#10;        int y = NODE_RADIUS + 30 + level * LEVEL_HEIGHT;&#10;&#10;        return new Point(x, y);&#10;    }&#10;&#10;    private boolean isLeafNode(int index) {&#10;        int leftChild = 2 * index;&#10;        int rightChild = 2 * index + 1;&#10;&#10;        boolean hasLeftChild = leftChild &lt; treeArray.length &amp;&amp; treeArray[leftChild] != null;&#10;        boolean hasRightChild = rightChild &lt; treeArray.length &amp;&amp; treeArray[rightChild] != null;&#10;&#10;        return !hasLeftChild &amp;&amp; !hasRightChild;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import javax.swing.*;&#10;import java.awt.*;&#10;import java.awt.geom.Ellipse2D;&#10;import java.awt.geom.Line2D;&#10;import java.util.ArrayList;&#10;&#10;public class TreeVisualizationPanel extends JPanel {&#10;    private Integer[] treeArray;&#10;    private java.util.List&lt;Integer&gt; visitPath;&#10;    private int currentVisitIndex;&#10;    private static final int NODE_RADIUS = 20;&#10;    private static final int LEVEL_HEIGHT = 80;&#10;    private static final int MIN_HORIZONTAL_SPACING = 50;&#10;&#10;    public TreeVisualizationPanel() {&#10;        setBackground(new Color(248, 249, 250));&#10;        setPreferredSize(new Dimension(600, 400));&#10;        visitPath = new ArrayList&lt;&gt;();&#10;        currentVisitIndex = -1;&#10;    }&#10;&#10;    public void setTreeArray(Integer[] arr) {&#10;        this.treeArray = arr;&#10;        clearVisitPath();&#10;        repaint();&#10;    }&#10;&#10;    public void setVisitPath(java.util.List&lt;Integer&gt; path) {&#10;        this.visitPath = path;&#10;        this.currentVisitIndex = -1;&#10;        repaint();&#10;    }&#10;&#10;    public void showNextVisitStep() {&#10;        if (currentVisitIndex &lt; visitPath.size() - 1) {&#10;            currentVisitIndex++;&#10;            repaint();&#10;        }&#10;    }&#10;&#10;    public void clearVisitPath() {&#10;        this.visitPath.clear();&#10;        this.currentVisitIndex = -1;&#10;        repaint();&#10;    }&#10;&#10;    public boolean hasMoreSteps() {&#10;        return currentVisitIndex &lt; visitPath.size() - 1;&#10;    }&#10;&#10;    @Override&#10;    protected void paintComponent(Graphics g) {&#10;        super.paintComponent(g);&#10;        if (treeArray == null || treeArray.length &lt;= 1) return;&#10;&#10;        Graphics2D g2d = (Graphics2D) g.create();&#10;        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;        g2d.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;&#10;        // 計算樹的最大層數&#10;        int maxLevel = (int) (Math.log(treeArray.length - 1) / Math.log(2)) + 1;&#10;&#10;        // 先畫連接線，再畫節點（避免線條覆蓋節點）&#10;        drawConnections(g2d, maxLevel);&#10;        drawNodes(g2d, maxLevel);&#10;&#10;        g2d.dispose();&#10;    }&#10;&#10;    private void drawConnections(Graphics2D g2d, int maxLevel) {&#10;        g2d.setColor(Color.BLACK);&#10;        g2d.setStroke(new BasicStroke(2));&#10;&#10;        for (int i = 1; i &lt; treeArray.length; i++) {&#10;            if (treeArray[i] == null) continue;&#10;&#10;            int leftChild = 2 * i;&#10;            int rightChild = 2 * i + 1;&#10;&#10;            Point parentPos = getNodePosition(i, maxLevel);&#10;&#10;            // 畫左子節點連線&#10;            if (leftChild &lt; treeArray.length &amp;&amp; treeArray[leftChild] != null) {&#10;                Point leftPos = getNodePosition(leftChild, maxLevel);&#10;                g2d.draw(new Line2D.Double(parentPos.x, parentPos.y, leftPos.x, leftPos.y));&#10;            }&#10;&#10;            // 畫右子節點連線&#10;            if (rightChild &lt; treeArray.length &amp;&amp; treeArray[rightChild] != null) {&#10;                Point rightPos = getNodePosition(rightChild, maxLevel);&#10;                g2d.draw(new Line2D.Double(parentPos.x, parentPos.y, rightPos.x, rightPos.y));&#10;            }&#10;        }&#10;    }&#10;&#10;    private void drawNodes(Graphics2D g2d, int maxLevel) {&#10;        for (int i = 1; i &lt; treeArray.length; i++) {&#10;            if (treeArray[i] == null) continue;&#10;&#10;            Point pos = getNodePosition(i, maxLevel);&#10;            boolean isRoot = (i == 1);&#10;            boolean isLeaf = isLeafNode(i);&#10;            boolean isCurrentVisit = currentVisitIndex &gt;= 0 &amp;&amp; currentVisitIndex &lt; visitPath.size()&#10;                                   &amp;&amp; visitPath.get(currentVisitIndex).equals(treeArray[i]);&#10;            boolean isVisited = isNodeVisited(treeArray[i]);&#10;&#10;            // 設定節點顏色&#10;            if (isCurrentVisit) {&#10;                g2d.setColor(new Color(255, 215, 0));  // 當前走訪節點：金黃色&#10;            } else if (isVisited) {&#10;                g2d.setColor(new Color(144, 238, 144));  // 已走訪節點：淡綠色&#10;            } else if (isRoot) {&#10;                g2d.setColor(Color.BLACK);  // 根節點黑色背景&#10;            } else if (isLeaf) {&#10;                g2d.setColor(Color.WHITE);  // 葉節點白色背景&#10;            } else {&#10;                g2d.setColor(new Color(200, 200, 200));  // 中間節點灰色背景&#10;            }&#10;&#10;            // 畫節點圓圈&#10;            Ellipse2D circle = new Ellipse2D.Double(&#10;                pos.x - NODE_RADIUS, pos.y - NODE_RADIUS,&#10;                2 * NODE_RADIUS, 2 * NODE_RADIUS&#10;            );&#10;            g2d.fill(circle);&#10;&#10;            // 畫節點邊框&#10;            if (isCurrentVisit) {&#10;                g2d.setColor(new Color(255, 140, 0));  // 當前節點橙色邊框&#10;                g2d.setStroke(new BasicStroke(4));&#10;            } else {&#10;                g2d.setColor(Color.BLACK);&#10;                g2d.setStroke(new BasicStroke(2));&#10;            }&#10;            g2d.draw(circle);&#10;&#10;            // 設定文字顏色&#10;            if (isRoot &amp;&amp; !isCurrentVisit &amp;&amp; !isVisited) {&#10;                g2d.setColor(Color.WHITE);  // 根節點白色文字&#10;            } else {&#10;                g2d.setColor(Color.BLACK);  // 其他節點黑色文字&#10;            }&#10;&#10;            // 畫節點值&#10;            String text = treeArray[i].toString();&#10;            FontMetrics fm = g2d.getFontMetrics();&#10;            int textWidth = fm.stringWidth(text);&#10;            int textHeight = fm.getAscent();&#10;            g2d.drawString(text,&#10;                pos.x - textWidth / 2,&#10;                pos.y + textHeight / 2 - 2);&#10;&#10;            // 畫陣列編號標示&#10;            g2d.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 10));&#10;            g2d.setColor(new Color(100, 100, 100));  // 灰色文字&#10;            String indexText = &quot;[&quot; + i + &quot;]&quot;;&#10;            FontMetrics indexFm = g2d.getFontMetrics();&#10;            int indexWidth = indexFm.stringWidth(indexText);&#10;            // 將編號放在節點右上角&#10;            g2d.drawString(indexText,&#10;                pos.x + NODE_RADIUS - indexWidth + 8,&#10;                pos.y - NODE_RADIUS + 12);&#10;            &#10;            // 恢復原本字體&#10;            g2d.setFont(new Font(&quot;Arial&quot;, Font.BOLD, 12));&#10;        }&#10;    }&#10;&#10;    private boolean isNodeVisited(Integer value) {&#10;        for (int i = 0; i &lt;= currentVisitIndex &amp;&amp; i &lt; visitPath.size(); i++) {&#10;            if (visitPath.get(i).equals(value)) {&#10;                return true;&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;&#10;    private Point getNodePosition(int index, int maxLevel) {&#10;        int level = (int) (Math.log(index) / Math.log(2));&#10;        int nodesInLevel = 1 &lt;&lt; level;&#10;        int positionInLevel = index - (1 &lt;&lt; level);&#10;&#10;        int panelWidth = getWidth();&#10;        int panelHeight = getHeight();&#10;&#10;        // 計算水平位置&#10;        int totalWidth = panelWidth - 2 * NODE_RADIUS;&#10;        int spacing = Math.max(MIN_HORIZONTAL_SPACING, totalWidth / (nodesInLevel + 1));&#10;        int x = NODE_RADIUS + spacing * (positionInLevel + 1);&#10;&#10;        // 確保節點在面板範圍內&#10;        if (nodesInLevel &gt; 1) {&#10;            x = NODE_RADIUS + (totalWidth * (positionInLevel + 1)) / (nodesInLevel + 1);&#10;        } else {&#10;            x = panelWidth / 2;&#10;        }&#10;&#10;        // 計算垂直位置&#10;        int y = NODE_RADIUS + 30 + level * LEVEL_HEIGHT;&#10;&#10;        return new Point(x, y);&#10;    }&#10;&#10;    private boolean isLeafNode(int index) {&#10;        int leftChild = 2 * index;&#10;        int rightChild = 2 * index + 1;&#10;&#10;        boolean hasLeftChild = leftChild &lt; treeArray.length &amp;&amp; treeArray[leftChild] != null;&#10;        boolean hasRightChild = rightChild &lt; treeArray.length &amp;&amp; treeArray[rightChild] != null;&#10;&#10;        return !hasLeftChild &amp;&amp; !hasRightChild;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0805-Graph/Q1/src/Edge.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0805-Graph/Q1/src/Edge.java" />
              <option name="updatedContent" value="import java.util.Objects;&#10;&#10;public class Edge {&#10;    public String from, to;&#10;    public Edge(String f, String t) { from = f; to = t; }&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        Edge edge = (Edge) o;&#10;        return Objects.equals(from, edge.from) &amp;&amp; Objects.equals(to, edge.to);&#10;    }&#10;    @Override&#10;    public int hashCode() {&#10;        return Objects.hash(from, to);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0805-Graph/Q1/src/Graph.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0805-Graph/Q1/src/Graph.java" />
              <option name="updatedContent" value="import java.awt.*;&#10;import java.util.*;&#10;&#10;public class Graph {&#10;    private Map&lt;String, Point&gt; nodes = new HashMap&lt;&gt;();&#10;    private java.util.List&lt;Edge&gt; edges = new ArrayList&lt;&gt;();&#10;&#10;    public Map&lt;String, Point&gt; getNodes() {&#10;        return nodes;&#10;    }&#10;&#10;    public java.util.List&lt;Edge&gt; getEdges() {&#10;        return edges;&#10;    }&#10;&#10;    public void clear() {&#10;        nodes.clear();&#10;        edges.clear();&#10;    }&#10;&#10;    public void addNode(String name, Point p) {&#10;        nodes.put(name, p);&#10;    }&#10;&#10;    public void removeNode(String name) {&#10;        nodes.remove(name);&#10;        edges.removeIf(edge -&gt; edge.from.equals(name) || edge.to.equals(name));&#10;    }&#10;&#10;    public void addEdge(String from, String to) {&#10;        Edge edge = new Edge(from, to);&#10;        if (!edges.contains(edge)) {&#10;            edges.add(edge);&#10;        }&#10;    }&#10;&#10;    public boolean containsNode(String name) {&#10;        return nodes.containsKey(name);&#10;    }&#10;&#10;    public Map&lt;String, java.util.List&lt;String&gt;&gt; getAdjacencyList() {&#10;        Map&lt;String, java.util.List&lt;String&gt;&gt; graph = new HashMap&lt;&gt;();&#10;        for (String name : nodes.keySet()) {&#10;            graph.put(name, new ArrayList&lt;&gt;());&#10;        }&#10;        for (Edge edge : edges) {&#10;            if (graph.containsKey(edge.from) &amp;&amp; graph.containsKey(edge.to)) {&#10;                graph.get(edge.from).add(edge.to);&#10;                graph.get(edge.to).add(edge.from);&#10;            }&#10;        }&#10;        return graph;&#10;    }&#10;&#10;    public java.util.List&lt;String&gt; dfs(String start) {&#10;        Map&lt;String, java.util.List&lt;String&gt;&gt; graph = getAdjacencyList();&#10;        java.util.List&lt;String&gt; result = new ArrayList&lt;&gt;();&#10;        Set&lt;String&gt; visited = new HashSet&lt;&gt;();&#10;        dfsHelper(start, graph, visited, result);&#10;        return result;&#10;    }&#10;&#10;    private void dfsHelper(String node, Map&lt;String, java.util.List&lt;String&gt;&gt; graph, Set&lt;String&gt; visited, java.util.List&lt;String&gt; result) {&#10;        if (!visited.contains(node)) {&#10;            visited.add(node);&#10;            result.add(node);&#10;            for (String neighbor : graph.get(node)) {&#10;                dfsHelper(neighbor, graph, visited, result);&#10;            }&#10;        }&#10;    }&#10;&#10;    public java.util.List&lt;String&gt; bfs(String start) {&#10;        Map&lt;String, java.util.List&lt;String&gt;&gt; graph = getAdjacencyList();&#10;        java.util.List&lt;String&gt; result = new ArrayList&lt;&gt;();&#10;        Set&lt;String&gt; visited = new HashSet&lt;&gt;();&#10;        Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();&#10;        queue.add(start);&#10;        visited.add(start);&#10;        while (!queue.isEmpty()) {&#10;            String node = queue.poll();&#10;            result.add(node);&#10;            for (String neighbor : graph.get(node)) {&#10;                if (!visited.contains(neighbor)) {&#10;                    queue.add(neighbor);&#10;                    visited.add(neighbor);&#10;                }&#10;            }&#10;        }&#10;        return result;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0805-Graph/Q2/src/Edge.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0805-Graph/Q2/src/Edge.java" />
              <option name="originalContent" value="import java.util.Objects;&#10;&#10;public class Edge {&#10;    public String from, to;&#10;    public Edge(String f, String t) { from = f; to = t; }&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        Edge edge = (Edge) o;&#10;        return Objects.equals(from, edge.from) &amp;&amp; Objects.equals(to, edge.to);&#10;    }&#10;    @Override&#10;    public int hashCode() {&#10;        return Objects.hash(from, to);&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="import java.util.Objects;&#10;&#10;public class Edge {&#10;    public String from, to;&#10;    public int cost;&#10;    public Edge(String f, String t, int c) { from = f; to = t; cost = c; }&#10;    public Edge(String f, String t) { this(f, t, 1); } // 默認 cost=1，兼容舊用法&#10;    @Override&#10;    public boolean equals(Object o) {&#10;        if (this == o) return true;&#10;        if (o == null || getClass() != o.getClass()) return false;&#10;        Edge edge = (Edge) o;&#10;        return Objects.equals(from, edge.from) &amp;&amp; Objects.equals(to, edge.to);&#10;    }&#10;    @Override&#10;    public int hashCode() {&#10;        return Objects.hash(from, to);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0805-Graph/Q2/src/Graph.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0805-Graph/Q2/src/Graph.java" />
              <option name="originalContent" value="import java.awt.*;&#10;import java.util.*;&#10;&#10;public class Graph {&#10;    private Map&lt;String, Point&gt; nodes = new HashMap&lt;&gt;();&#10;    private java.util.List&lt;Edge&gt; edges = new ArrayList&lt;&gt;();&#10;&#10;    public Map&lt;String, Point&gt; getNodes() {&#10;        return nodes;&#10;    }&#10;&#10;    public java.util.List&lt;Edge&gt; getEdges() {&#10;        return edges;&#10;    }&#10;&#10;    public void clear() {&#10;        nodes.clear();&#10;        edges.clear();&#10;    }&#10;&#10;    public void addNode(String name, Point p) {&#10;        nodes.put(name, p);&#10;    }&#10;&#10;    public void removeNode(String name) {&#10;        nodes.remove(name);&#10;        edges.removeIf(edge -&gt; edge.from.equals(name) || edge.to.equals(name));&#10;    }&#10;&#10;    public void addEdge(String from, String to) {&#10;        Random rand = new Random();&#10;        int cost = rand.nextInt(99) + 1; // 1~99&#10;        Edge edge = new Edge(from, to, cost);&#10;        if (!edges.contains(edge)) {&#10;            edges.add(edge);&#10;        }&#10;    }&#10;&#10;    public boolean containsNode(String name) {&#10;        return nodes.containsKey(name);&#10;    }&#10;&#10;    public Map&lt;String, java.util.List&lt;String&gt;&gt; getAdjacencyList() {&#10;        Map&lt;String, java.util.List&lt;String&gt;&gt; graph = new HashMap&lt;&gt;();&#10;        for (String name : nodes.keySet()) {&#10;            graph.put(name, new ArrayList&lt;&gt;());&#10;        }&#10;        for (Edge edge : edges) {&#10;            if (graph.containsKey(edge.from) &amp;&amp; graph.containsKey(edge.to)) {&#10;                graph.get(edge.from).add(edge.to);&#10;                graph.get(edge.to).add(edge.from);&#10;            }&#10;        }&#10;        return graph;&#10;    }&#10;&#10;    public java.util.List&lt;String&gt; dfs(String start) {&#10;        Map&lt;String, java.util.List&lt;String&gt;&gt; graph = getAdjacencyList();&#10;        java.util.List&lt;String&gt; result = new ArrayList&lt;&gt;();&#10;        Set&lt;String&gt; visited = new HashSet&lt;&gt;();&#10;        dfsHelper(start, graph, visited, result);&#10;        return result;&#10;    }&#10;&#10;    private void dfsHelper(String node, Map&lt;String, java.util.List&lt;String&gt;&gt; graph, Set&lt;String&gt; visited, java.util.List&lt;String&gt; result) {&#10;        if (!visited.contains(node)) {&#10;            visited.add(node);&#10;            result.add(node);&#10;            for (String neighbor : graph.get(node)) {&#10;                dfsHelper(neighbor, graph, visited, result);&#10;            }&#10;        }&#10;    }&#10;&#10;    public java.util.List&lt;String&gt; bfs(String start) {&#10;        Map&lt;String, java.util.List&lt;String&gt;&gt; graph = getAdjacencyList();&#10;        java.util.List&lt;String&gt; result = new ArrayList&lt;&gt;();&#10;        Set&lt;String&gt; visited = new HashSet&lt;&gt;();&#10;        Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();&#10;        queue.add(start);&#10;        visited.add(start);&#10;        while (!queue.isEmpty()) {&#10;            String node = queue.poll();&#10;            result.add(node);&#10;            for (String neighbor : graph.get(node)) {&#10;                if (!visited.contains(neighbor)) {&#10;                    queue.add(neighbor);&#10;                    visited.add(neighbor);&#10;                }&#10;            }&#10;        }&#10;        return result;&#10;    }&#10;&#10;    // Kruskal's algorithm for MST&#10;    public List&lt;Edge&gt; getMST() {&#10;        List&lt;Edge&gt; result = new ArrayList&lt;&gt;();&#10;        Map&lt;String, String&gt; parent = new HashMap&lt;&gt;();&#10;        for (String node : nodes.keySet()) parent.put(node, node);&#10;        List&lt;Edge&gt; sortedEdges = new ArrayList&lt;&gt;(edges);&#10;        sortedEdges.sort(Comparator.comparingInt(e -&gt; e.cost));&#10;        int count = 0;&#10;        for (Edge edge : sortedEdges) {&#10;            String root1 = find(parent, edge.from);&#10;            String root2 = find(parent, edge.to);&#10;            if (!root1.equals(root2)) {&#10;                result.add(edge);&#10;                parent.put(root1, root2);&#10;                count++;&#10;                if (count == nodes.size() - 1) break;&#10;            }&#10;        }&#10;        return result;&#10;    }&#10;&#10;    private String find(Map&lt;String, String&gt; parent, String node) {&#10;        if (!parent.get(node).equals(node)) {&#10;            parent.put(node, find(parent, parent.get(node)));&#10;        }&#10;        return parent.get(node);&#10;    }&#10;&#10;    // Dijkstra's algorithm for shortest path&#10;    public List&lt;Edge&gt; getShortestPath(String from, String to) {&#10;        Map&lt;String, Integer&gt; dist = new HashMap&lt;&gt;();&#10;        Map&lt;String, String&gt; prev = new HashMap&lt;&gt;();&#10;        for (String node : nodes.keySet()) dist.put(node, Integer.MAX_VALUE);&#10;        dist.put(from, 0);&#10;        PriorityQueue&lt;String&gt; pq = new PriorityQueue&lt;&gt;(Comparator.comparingInt(dist::get));&#10;        pq.add(from);&#10;&#10;        while (!pq.isEmpty()) {&#10;            String u = pq.poll();&#10;            for (Edge edge : edges) {&#10;                String v = null;&#10;                if (edge.from.equals(u)) v = edge.to;&#10;                else if (edge.to.equals(u)) v = edge.from;&#10;                if (v != null) {&#10;                    int alt = dist.get(u) + edge.cost;&#10;                    if (alt &lt; dist.get(v)) {&#10;                        dist.put(v, alt);&#10;                        prev.put(v, u);&#10;                        pq.add(v);&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // 回溯路徑&#10;        List&lt;Edge&gt; path = new ArrayList&lt;&gt;();&#10;        String curr = to;&#10;        while (prev.containsKey(curr)) {&#10;            String p = prev.get(curr);&#10;            // 找到對應的邊&#10;            for (Edge edge : edges) {&#10;                if ((edge.from.equals(curr) &amp;&amp; edge.to.equals(p)) ||&#10;                    (edge.from.equals(p) &amp;&amp; edge.to.equals(curr))) {&#10;                    path.add(0, edge);&#10;                    break;&#10;                }&#10;            }&#10;            curr = p;&#10;        }&#10;        if (!from.equals(to) &amp;&amp; path.isEmpty()) return null; // 無路徑&#10;        return path;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="import java.awt.*;&#10;import java.util.*;&#10;import java.util.List;&#10;&#10;public class Graph {&#10;    private Map&lt;String, Point&gt; nodes = new HashMap&lt;&gt;();&#10;    private java.util.List&lt;Edge&gt; edges = new ArrayList&lt;&gt;();&#10;&#10;    public Map&lt;String, Point&gt; getNodes() {&#10;        return nodes;&#10;    }&#10;&#10;    public java.util.List&lt;Edge&gt; getEdges() {&#10;        return edges;&#10;    }&#10;&#10;    public void clear() {&#10;        nodes.clear();&#10;        edges.clear();&#10;    }&#10;&#10;    public void addNode(String name, Point p) {&#10;        nodes.put(name, p);&#10;    }&#10;&#10;    public void removeNode(String name) {&#10;        nodes.remove(name);&#10;        edges.removeIf(edge -&gt; edge.from.equals(name) || edge.to.equals(name));&#10;    }&#10;&#10;    public void addEdge(String from, String to) {&#10;        Random rand = new Random();&#10;        int cost = rand.nextInt(99) + 1; // 1~99&#10;        Edge edge = new Edge(from, to, cost);&#10;        if (!edges.contains(edge)) {&#10;            edges.add(edge);&#10;        }&#10;    }&#10;&#10;    public boolean containsNode(String name) {&#10;        return nodes.containsKey(name);&#10;    }&#10;&#10;    public Map&lt;String, java.util.List&lt;String&gt;&gt; getAdjacencyList() {&#10;        Map&lt;String, java.util.List&lt;String&gt;&gt; graph = new HashMap&lt;&gt;();&#10;        for (String name : nodes.keySet()) {&#10;            graph.put(name, new ArrayList&lt;&gt;());&#10;        }&#10;        for (Edge edge : edges) {&#10;            if (graph.containsKey(edge.from) &amp;&amp; graph.containsKey(edge.to)) {&#10;                graph.get(edge.from).add(edge.to);&#10;                graph.get(edge.to).add(edge.from);&#10;            }&#10;        }&#10;        return graph;&#10;    }&#10;&#10;    public java.util.List&lt;String&gt; dfs(String start) {&#10;        Map&lt;String, java.util.List&lt;String&gt;&gt; graph = getAdjacencyList();&#10;        java.util.List&lt;String&gt; result = new ArrayList&lt;&gt;();&#10;        Set&lt;String&gt; visited = new HashSet&lt;&gt;();&#10;        dfsHelper(start, graph, visited, result);&#10;        return result;&#10;    }&#10;&#10;    private void dfsHelper(String node, Map&lt;String, java.util.List&lt;String&gt;&gt; graph, Set&lt;String&gt; visited, java.util.List&lt;String&gt; result) {&#10;        if (!visited.contains(node)) {&#10;            visited.add(node);&#10;            result.add(node);&#10;            for (String neighbor : graph.get(node)) {&#10;                dfsHelper(neighbor, graph, visited, result);&#10;            }&#10;        }&#10;    }&#10;&#10;    public java.util.List&lt;String&gt; bfs(String start) {&#10;        Map&lt;String, java.util.List&lt;String&gt;&gt; graph = getAdjacencyList();&#10;        java.util.List&lt;String&gt; result = new ArrayList&lt;&gt;();&#10;        Set&lt;String&gt; visited = new HashSet&lt;&gt;();&#10;        Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();&#10;        queue.add(start);&#10;        visited.add(start);&#10;        while (!queue.isEmpty()) {&#10;            String node = queue.poll();&#10;            result.add(node);&#10;            for (String neighbor : graph.get(node)) {&#10;                if (!visited.contains(neighbor)) {&#10;                    queue.add(neighbor);&#10;                    visited.add(neighbor);&#10;                }&#10;            }&#10;        }&#10;        return result;&#10;    }&#10;&#10;    // Kruskal's algorithm for MST&#10;    public List&lt;Edge&gt; getMST() {&#10;        List&lt;Edge&gt; result = new ArrayList&lt;&gt;();&#10;        Map&lt;String, String&gt; parent = new HashMap&lt;&gt;();&#10;        for (String node : nodes.keySet()) parent.put(node, node);&#10;        List&lt;Edge&gt; sortedEdges = new ArrayList&lt;&gt;(edges);&#10;        sortedEdges.sort(Comparator.comparingInt(e -&gt; e.cost));&#10;        int count = 0;&#10;        for (Edge edge : sortedEdges) {&#10;            String root1 = find(parent, edge.from);&#10;            String root2 = find(parent, edge.to);&#10;            if (!root1.equals(root2)) {&#10;                result.add(edge);&#10;                parent.put(root1, root2);&#10;                count++;&#10;                if (count == nodes.size() - 1) break;&#10;            }&#10;        }&#10;        return result;&#10;    }&#10;&#10;    private String find(Map&lt;String, String&gt; parent, String node) {&#10;        if (!parent.get(node).equals(node)) {&#10;            parent.put(node, find(parent, parent.get(node)));&#10;        }&#10;        return parent.get(node);&#10;    }&#10;&#10;    // Dijkstra's algorithm for shortest path&#10;    public List&lt;Edge&gt; getShortestPath(String from, String to) {&#10;        Map&lt;String, Integer&gt; dist = new HashMap&lt;&gt;();&#10;        Map&lt;String, String&gt; prev = new HashMap&lt;&gt;();&#10;        for (String node : nodes.keySet()) dist.put(node, Integer.MAX_VALUE);&#10;        dist.put(from, 0);&#10;        PriorityQueue&lt;String&gt; pq = new PriorityQueue&lt;&gt;(Comparator.comparingInt(dist::get));&#10;        pq.add(from);&#10;&#10;        while (!pq.isEmpty()) {&#10;            String u = pq.poll();&#10;            for (Edge edge : edges) {&#10;                String v = null;&#10;                if (edge.from.equals(u)) v = edge.to;&#10;                else if (edge.to.equals(u)) v = edge.from;&#10;                if (v != null) {&#10;                    int alt = dist.get(u) + edge.cost;&#10;                    if (alt &lt; dist.get(v)) {&#10;                        dist.put(v, alt);&#10;                        prev.put(v, u);&#10;                        pq.add(v);&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // 回溯路徑&#10;        List&lt;Edge&gt; path = new ArrayList&lt;&gt;();&#10;        String curr = to;&#10;        while (prev.containsKey(curr)) {&#10;            String p = prev.get(curr);&#10;            // 找到對應的邊&#10;            for (Edge edge : edges) {&#10;                if ((edge.from.equals(curr) &amp;&amp; edge.to.equals(p)) ||&#10;                    (edge.from.equals(p) &amp;&amp; edge.to.equals(curr))) {&#10;                    path.add(0, edge);&#10;                    break;&#10;                }&#10;            }&#10;            curr = p;&#10;        }&#10;        if (!from.equals(to) &amp;&amp; path.isEmpty()) return null; // 無路徑&#10;        return path;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/0805-Graph/Q2/src/GraphGUI.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/0805-Graph/Q2/src/GraphGUI.java" />
              <option name="originalContent" value="import javax.swing.*;&#10;import javax.swing.border.*;&#10;import java.awt.*;&#10;import java.awt.event.*;&#10;import java.util.*;&#10;&#10;public class GraphGUI extends JFrame {&#10;  private Graph graph = new Graph();&#10;  private JTextField nodeNameField = new JTextField(5);&#10;  private JTextField fromField = new JTextField(3);&#10;  private JTextField toField = new JTextField(3);&#10;  private JTextField nodeCountField = new JTextField(3);&#10;  private JTextField edgeCountField = new JTextField(3);&#10;  private JTextField startNodeField = new JTextField(3);&#10;  private JTextField pathFromField = new JTextField(3);&#10;  private JTextField pathToField = new JTextField(3);&#10;  private java.util.List&lt;String&gt; traversalResult = new ArrayList&lt;&gt;();&#10;  private int animationIndex = 0;&#10;  private javax.swing.Timer animationTimer;&#10;&#10;  // Windows 3.1 復古顏色&#10;  private static final Color WIN31_GRAY = new Color(192, 192, 192);&#10;  private static final Color WIN31_DARK_GRAY = new Color(128, 128, 128);&#10;  private static final Color WIN31_LIGHT_GRAY = new Color(224, 224, 224);&#10;  private static final Color WIN31_BLUE = new Color(0, 0, 128);&#10;  private static final Color WIN31_BLACK = Color.BLACK;&#10;  private static final Color WIN31_WHITE = Color.WHITE;&#10;&#10;  // 高亮顯示的邊（MST或最短路徑）&#10;  private java.util.List&lt;Edge&gt; highlightEdges = new ArrayList&lt;&gt;();&#10;  private String highlightType = &quot;&quot;; // &quot;MST&quot; or &quot;PATH&quot;&#10;&#10;  public GraphGUI() {&#10;    setTitle(&quot;Graph Application - Windows 3.1 Style&quot;);&#10;    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;    setSize(1200, 700);&#10;&#10;    // 設置整體外觀&#10;    try {&#10;      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeel());&#10;      setupWin31Colors();&#10;    } catch (Exception e) {&#10;      System.err.println(&quot;Failed to set look and feel: &quot; + e.getMessage());&#10;    }&#10;&#10;    GraphPanel panel = new GraphPanel();&#10;    panel.setBackground(WIN31_WHITE);&#10;    panel.setBorder(new BevelBorder(BevelBorder.LOWERED));&#10;    add(panel, BorderLayout.CENTER);&#10;&#10;    JPanel controlPanel = createControlPanel();&#10;    add(controlPanel, BorderLayout.EAST);&#10;&#10;    setLocationRelativeTo(null);&#10;  }&#10;&#10;  private void setupWin31Colors() {&#10;    UIManager.put(&quot;Panel.background&quot;, WIN31_GRAY);&#10;    UIManager.put(&quot;Button.background&quot;, WIN31_GRAY);&#10;    UIManager.put(&quot;TextField.background&quot;, WIN31_WHITE);&#10;    UIManager.put(&quot;TextArea.background&quot;, WIN31_WHITE);&#10;    UIManager.put(&quot;Label.foreground&quot;, WIN31_BLACK);&#10;    UIManager.put(&quot;Button.font&quot;, new Font(&quot;MS Sans Serif&quot;, Font.PLAIN, 11));&#10;    UIManager.put(&quot;Label.font&quot;, new Font(&quot;MS Sans Serif&quot;, Font.PLAIN, 11));&#10;    UIManager.put(&quot;TextField.font&quot;, new Font(&quot;MS Sans Serif&quot;, Font.PLAIN, 11));&#10;  }&#10;&#10;  private JPanel createControlPanel() {&#10;    JPanel controlPanel = new JPanel();&#10;    controlPanel.setBackground(WIN31_GRAY);&#10;    controlPanel.setBorder(new CompoundBorder(&#10;      new BevelBorder(BevelBorder.RAISED),&#10;      new EmptyBorder(10, 10, 10, 10)&#10;    ));&#10;    controlPanel.setLayout(new BoxLayout(controlPanel, BoxLayout.Y_AXIS));&#10;    controlPanel.setPreferredSize(new Dimension(280, 0));&#10;&#10;    // 節點操作區域&#10;    controlPanel.add(createNodeSection());&#10;    controlPanel.add(Box.createVerticalStrut(10));&#10;&#10;    // 邊操作區域&#10;    controlPanel.add(createEdgeSection());&#10;    controlPanel.add(Box.createVerticalStrut(10));&#10;&#10;    // 自動生成區域&#10;    controlPanel.add(createAutoGenSection());&#10;    controlPanel.add(Box.createVerticalStrut(10));&#10;&#10;    // 遍歷區域&#10;    controlPanel.add(createTraversalSection());&#10;    controlPanel.add(Box.createVerticalStrut(10));&#10;&#10;    // MST和最短路徑區域&#10;    controlPanel.add(createAlgorithmSection());&#10;    controlPanel.add(Box.createVerticalStrut(10));&#10;&#10;    // 輸出區域&#10;    controlPanel.add(createOutputSection());&#10;&#10;    return controlPanel;&#10;  }&#10;&#10;  private JPanel createNodeSection() {&#10;    JPanel panel = createSectionPanel(&quot;Node Operations&quot;);&#10;&#10;    JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;    inputPanel.setBackground(WIN31_GRAY);&#10;    inputPanel.add(new JLabel(&quot;Name:&quot;));&#10;    styleTextField(nodeNameField);&#10;    inputPanel.add(nodeNameField);&#10;    panel.add(inputPanel);&#10;&#10;    JPanel buttonPanel = new JPanel(new FlowLayout());&#10;    buttonPanel.setBackground(WIN31_GRAY);&#10;&#10;    JButton addNodeBtn = createWin31Button(&quot;Add Node&quot;);&#10;    JButton removeNodeBtn = createWin31Button(&quot;Remove&quot;);&#10;&#10;    addNodeBtn.addActionListener(e -&gt; {&#10;      String name = nodeNameField.getText().trim();&#10;      if (!name.isEmpty() &amp;&amp; !graph.containsNode(name)) {&#10;        graph.addNode(name, new Point(0, 0));&#10;        nodeNameField.setText(&quot;&quot;);&#10;        arrangeNodesAsPentagon();&#10;        repaint();&#10;      }&#10;    });&#10;&#10;    removeNodeBtn.addActionListener(e -&gt; {&#10;      String name = nodeNameField.getText().trim();&#10;      if (graph.containsNode(name)) {&#10;        graph.removeNode(name);&#10;        nodeNameField.setText(&quot;&quot;);&#10;        arrangeNodesAsPentagon();&#10;        repaint();&#10;      }&#10;    });&#10;&#10;    buttonPanel.add(addNodeBtn);&#10;    buttonPanel.add(removeNodeBtn);&#10;    panel.add(buttonPanel);&#10;&#10;    return panel;&#10;  }&#10;&#10;  private JPanel createEdgeSection() {&#10;    JPanel panel = createSectionPanel(&quot;Edge Operations&quot;);&#10;&#10;    JPanel inputPanel = new JPanel(new GridLayout(2, 2, 5, 5));&#10;    inputPanel.setBackground(WIN31_GRAY);&#10;&#10;    inputPanel.add(new JLabel(&quot;From:&quot;));&#10;    styleTextField(fromField);&#10;    inputPanel.add(fromField);&#10;    inputPanel.add(new JLabel(&quot;To:&quot;));&#10;    styleTextField(toField);&#10;    inputPanel.add(toField);&#10;&#10;    panel.add(inputPanel);&#10;&#10;    JButton addEdgeBtn = createWin31Button(&quot;Add Edge&quot;);&#10;    addEdgeBtn.addActionListener(e -&gt; {&#10;      String from = fromField.getText().trim();&#10;      String to = toField.getText().trim();&#10;      if (graph.containsNode(from) &amp;&amp; graph.containsNode(to) &amp;&amp; !from.equals(to)) {&#10;        graph.addEdge(from, to);&#10;        fromField.setText(&quot;&quot;);&#10;        toField.setText(&quot;&quot;);&#10;        repaint();&#10;      }&#10;    });&#10;&#10;    JPanel buttonPanel = new JPanel(new FlowLayout());&#10;    buttonPanel.setBackground(WIN31_GRAY);&#10;    buttonPanel.add(addEdgeBtn);&#10;    panel.add(buttonPanel);&#10;&#10;    return panel;&#10;  }&#10;&#10;  private JPanel createAutoGenSection() {&#10;    JPanel panel = createSectionPanel(&quot;Auto Generate&quot;);&#10;&#10;    JPanel inputPanel = new JPanel(new GridLayout(2, 2, 5, 5));&#10;    inputPanel.setBackground(WIN31_GRAY);&#10;&#10;    inputPanel.add(new JLabel(&quot;Nodes:&quot;));&#10;    styleTextField(nodeCountField);&#10;    inputPanel.add(nodeCountField);&#10;    inputPanel.add(new JLabel(&quot;Edges:&quot;));&#10;    styleTextField(edgeCountField);&#10;    inputPanel.add(edgeCountField);&#10;&#10;    panel.add(inputPanel);&#10;&#10;    JButton autoGenBtn = createWin31Button(&quot;Generate Graph&quot;);&#10;    autoGenBtn.addActionListener(e -&gt; {&#10;      autoGenerateGraph();&#10;      arrangeNodesAsPentagon();&#10;      repaint();&#10;    });&#10;&#10;    JPanel buttonPanel = new JPanel(new FlowLayout());&#10;    buttonPanel.setBackground(WIN31_GRAY);&#10;    buttonPanel.add(autoGenBtn);&#10;    panel.add(buttonPanel);&#10;&#10;    return panel;&#10;  }&#10;&#10;  private JPanel createTraversalSection() {&#10;    JPanel panel = createSectionPanel(&quot;Graph Traversal&quot;);&#10;&#10;    JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;    inputPanel.setBackground(WIN31_GRAY);&#10;    inputPanel.add(new JLabel(&quot;Start:&quot;));&#10;    styleTextField(startNodeField);&#10;    inputPanel.add(startNodeField);&#10;    panel.add(inputPanel);&#10;&#10;    JPanel buttonPanel = new JPanel(new FlowLayout());&#10;    buttonPanel.setBackground(WIN31_GRAY);&#10;&#10;    JButton dfsBtn = createWin31Button(&quot;DFS&quot;);&#10;    JButton bfsBtn = createWin31Button(&quot;BFS&quot;);&#10;&#10;    dfsBtn.addActionListener(e -&gt; {&#10;      String start = startNodeField.getText().trim();&#10;      if (!graph.containsNode(start)) {&#10;        showWin31MessageDialog(&quot;Start node does not exist.&quot;, &quot;Error&quot;);&#10;        return;&#10;      }&#10;      traversalResult = graph.dfs(start);&#10;      updateOutputArea(&quot;DFS: &quot; + String.join(&quot; → &quot;, traversalResult));&#10;      startAnimation();&#10;    });&#10;&#10;    bfsBtn.addActionListener(e -&gt; {&#10;      String start = startNodeField.getText().trim();&#10;      if (!graph.containsNode(start)) {&#10;        showWin31MessageDialog(&quot;Start node does not exist.&quot;, &quot;Error&quot;);&#10;        return;&#10;      }&#10;      traversalResult = graph.bfs(start);&#10;      updateOutputArea(&quot;BFS: &quot; + String.join(&quot; → &quot;, traversalResult));&#10;      startAnimation();&#10;    });&#10;&#10;    buttonPanel.add(dfsBtn);&#10;    buttonPanel.add(bfsBtn);&#10;    panel.add(buttonPanel);&#10;&#10;    return panel;&#10;  }&#10;&#10;  private JPanel createAlgorithmSection() {&#10;    JPanel panel = createSectionPanel(&quot;Algorithms&quot;);&#10;&#10;    JButton mstBtn = createWin31Button(&quot;Show MST&quot;);&#10;    mstBtn.addActionListener(e -&gt; {&#10;      highlightEdges = graph.getMST();&#10;      highlightType = &quot;MST&quot;;&#10;      int totalCost = highlightEdges.stream().mapToInt(edge -&gt; edge.cost).sum();&#10;      updateOutputArea(&quot;MST Total Cost: &quot; + totalCost);&#10;      repaint();&#10;    });&#10;&#10;    JPanel mstPanel = new JPanel(new FlowLayout());&#10;    mstPanel.setBackground(WIN31_GRAY);&#10;    mstPanel.add(mstBtn);&#10;    panel.add(mstPanel);&#10;&#10;    // 最短路徑&#10;    JPanel pathInputPanel = new JPanel(new GridLayout(2, 2, 5, 5));&#10;    pathInputPanel.setBackground(WIN31_GRAY);&#10;&#10;    pathInputPanel.add(new JLabel(&quot;From:&quot;));&#10;    styleTextField(pathFromField);&#10;    pathInputPanel.add(pathFromField);&#10;    pathInputPanel.add(new JLabel(&quot;To:&quot;));&#10;    styleTextField(pathToField);&#10;    pathInputPanel.add(pathToField);&#10;&#10;    panel.add(pathInputPanel);&#10;&#10;    JButton pathBtn = createWin31Button(&quot;Find Shortest Path&quot;);&#10;    pathBtn.addActionListener(e -&gt; {&#10;      String from = pathFromField.getText().trim();&#10;      String to = pathToField.getText().trim();&#10;      if (!graph.containsNode(from) || !graph.containsNode(to)) {&#10;        showWin31MessageDialog(&quot;Node not found!&quot;, &quot;Error&quot;);&#10;        return;&#10;      }&#10;      java.util.List&lt;Edge&gt; path = graph.getShortestPath(from, to);&#10;      if (path == null || path.isEmpty()) {&#10;        showWin31MessageDialog(&quot;No path found!&quot;, &quot;Info&quot;);&#10;        highlightEdges = new ArrayList&lt;&gt;();&#10;        highlightType = &quot;PATH&quot;;&#10;        updateOutputArea(&quot;No path from &quot; + from + &quot; to &quot; + to);&#10;      } else {&#10;        highlightEdges = path;&#10;        highlightType = &quot;PATH&quot;;&#10;        int totalCost = path.stream().mapToInt(edge -&gt; edge.cost).sum();&#10;        updateOutputArea(&quot;Shortest Path Cost: &quot; + totalCost + &quot; | Path: &quot; +&#10;          from + &quot; → &quot; + to);&#10;      }&#10;      repaint();&#10;    });&#10;&#10;    JPanel pathButtonPanel = new JPanel(new FlowLayout());&#10;    pathButtonPanel.setBackground(WIN31_GRAY);&#10;    pathButtonPanel.add(pathBtn);&#10;    panel.add(pathButtonPanel);&#10;&#10;    return panel;&#10;  }&#10;&#10;  private JPanel createOutputSection() {&#10;    JPanel panel = createSectionPanel(&quot;Output&quot;);&#10;&#10;    JTextArea outputArea = new JTextArea(8, 20);&#10;    outputArea.setEditable(false);&#10;    outputArea.setLineWrap(true);&#10;    outputArea.setWrapStyleWord(true);&#10;    outputArea.setBackground(WIN31_WHITE);&#10;    outputArea.setForeground(WIN31_BLACK);&#10;    outputArea.setFont(new Font(&quot;Courier New&quot;, Font.PLAIN, 11));&#10;    outputArea.setBorder(new BevelBorder(BevelBorder.LOWERED));&#10;&#10;    JScrollPane scrollPane = new JScrollPane(outputArea);&#10;    scrollPane.setBorder(new BevelBorder(BevelBorder.LOWERED));&#10;    panel.add(scrollPane);&#10;&#10;    this.outputArea = outputArea; // 儲存引用&#10;&#10;    return panel;&#10;  }&#10;&#10;  private JTextArea outputArea;&#10;&#10;  private void updateOutputArea(String text) {&#10;    if (outputArea != null) {&#10;      outputArea.setText(text);&#10;    }&#10;  }&#10;&#10;  private JPanel createSectionPanel(String title) {&#10;    JPanel panel = new JPanel();&#10;    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));&#10;    panel.setBackground(WIN31_GRAY);&#10;    panel.setBorder(new CompoundBorder(&#10;      new TitledBorder(new EtchedBorder(), title,&#10;        TitledBorder.LEFT, TitledBorder.TOP,&#10;        new Font(&quot;MS Sans Serif&quot;, Font.BOLD, 11), WIN31_BLACK),&#10;      new EmptyBorder(5, 5, 5, 5)&#10;    ));&#10;    return panel;&#10;  }&#10;&#10;  private JButton createWin31Button(String text) {&#10;    JButton button = new JButton(text);&#10;    button.setBackground(WIN31_GRAY);&#10;    button.setForeground(WIN31_BLACK);&#10;    button.setFont(new Font(&quot;MS Sans Serif&quot;, Font.PLAIN, 11));&#10;    button.setBorder(new BevelBorder(BevelBorder.RAISED));&#10;    button.setFocusPainted(false);&#10;&#10;    // 添加 hover 效果&#10;    button.addMouseListener(new MouseAdapter() {&#10;      public void mouseEntered(MouseEvent e) {&#10;        button.setBackground(WIN31_LIGHT_GRAY);&#10;      }&#10;      public void mouseExited(MouseEvent e) {&#10;        button.setBackground(WIN31_GRAY);&#10;      }&#10;      public void mousePressed(MouseEvent e) {&#10;        button.setBorder(new BevelBorder(BevelBorder.LOWERED));&#10;      }&#10;      public void mouseReleased(MouseEvent e) {&#10;        button.setBorder(new BevelBorder(BevelBorder.RAISED));&#10;      }&#10;    });&#10;&#10;    return button;&#10;  }&#10;&#10;  private void styleTextField(JTextField field) {&#10;    field.setBackground(WIN31_WHITE);&#10;    field.setForeground(WIN31_BLACK);&#10;    field.setFont(new Font(&quot;MS Sans Serif&quot;, Font.PLAIN, 11));&#10;    field.setBorder(new BevelBorder(BevelBorder.LOWERED));&#10;  }&#10;&#10;  private void showWin31MessageDialog(String message, String title) {&#10;    JOptionPane optionPane = new JOptionPane(message,&#10;      title.equals(&quot;Error&quot;) ? JOptionPane.ERROR_MESSAGE : JOptionPane.INFORMATION_MESSAGE);&#10;    JDialog dialog = optionPane.createDialog(this, title);&#10;    dialog.setModal(true);&#10;    dialog.setVisible(true);&#10;  }&#10;&#10;  class GraphPanel extends JPanel {&#10;    protected void paintComponent(Graphics g) {&#10;      super.paintComponent(g);&#10;      Graphics2D g2d = (Graphics2D) g;&#10;      g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;&#10;      // 先畫所有邊&#10;      for (Edge edge : graph.getEdges()) {&#10;        Point p1 = graph.getNodes().get(edge.from);&#10;        Point p2 = graph.getNodes().get(edge.to);&#10;        if (p1 != null &amp;&amp; p2 != null) {&#10;          // 若為高亮邊則稍後畫&#10;          if (highlightEdges.contains(edge)) continue;&#10;          g2d.setColor(WIN31_DARK_GRAY);&#10;          g2d.setStroke(new BasicStroke(1));&#10;          g2d.drawLine(p1.x, p1.y, p2.x, p2.y);&#10;&#10;          // 在邊的中點顯示 cost&#10;          int mx = (p1.x + p2.x) / 2;&#10;          int my = (p1.y + p2.y) / 2;&#10;          g2d.setColor(WIN31_BLUE);&#10;          g2d.setFont(new Font(&quot;MS Sans Serif&quot;, Font.BOLD, 10));&#10;&#10;          // 添加白色背景使文字更清晰&#10;          FontMetrics fm = g2d.getFontMetrics();&#10;          String costStr = String.valueOf(edge.cost);&#10;          int strWidth = fm.stringWidth(costStr);&#10;          int strHeight = fm.getHeight();&#10;          g2d.setColor(WIN31_WHITE);&#10;          g2d.fillRect(mx - strWidth/2 - 2, my - strHeight/2 - 1,&#10;                      strWidth + 4, strHeight + 2);&#10;          g2d.setColor(WIN31_BLUE);&#10;          g2d.drawString(costStr, mx - strWidth/2, my + fm.getAscent()/2);&#10;        }&#10;      }&#10;&#10;      // 畫高亮邊&#10;      for (Edge edge : highlightEdges) {&#10;        Point p1 = graph.getNodes().get(edge.from);&#10;        Point p2 = graph.getNodes().get(edge.to);&#10;        if (p1 != null &amp;&amp; p2 != null) {&#10;          Color highlightColor = highlightType.equals(&quot;MST&quot;) ?&#10;            new Color(255, 165, 0) : new Color(255, 20, 147); // 橘色 MST, 粉紅色路徑&#10;          g2d.setColor(highlightColor);&#10;          g2d.setStroke(new BasicStroke(3));&#10;          g2d.drawLine(p1.x, p1.y, p2.x, p2.y);&#10;&#10;          // 高亮邊的 cost&#10;          int mx = (p1.x + p2.x) / 2;&#10;          int my = (p1.y + p2.y) / 2;&#10;          g2d.setFont(new Font(&quot;MS Sans Serif&quot;, Font.BOLD, 12));&#10;&#10;          FontMetrics fm = g2d.getFontMetrics();&#10;          String costStr = String.valueOf(edge.cost);&#10;          int strWidth = fm.stringWidth(costStr);&#10;          int strHeight = fm.getHeight();&#10;          g2d.setColor(Color.YELLOW);&#10;          g2d.fillRect(mx - strWidth/2 - 3, my - strHeight/2 - 2,&#10;                      strWidth + 6, strHeight + 4);&#10;          g2d.setColor(Color.RED);&#10;          g2d.drawString(costStr, mx - strWidth/2, my + fm.getAscent()/2);&#10;        }&#10;      }&#10;&#10;      // 畫節點&#10;      for (String name : graph.getNodes().keySet()) {&#10;        Point p = graph.getNodes().get(name);&#10;        int idx = traversalResult.indexOf(name);&#10;&#10;        // 節點顏色&#10;        if (!traversalResult.isEmpty() &amp;&amp; idx &gt;= 0 &amp;&amp; idx &lt; animationIndex) {&#10;          if (idx == 0)&#10;            g2d.setColor(new Color(255, 0, 0)); // 起始節點紅色&#10;          else&#10;            g2d.setColor(new Color(0, 128, 0)); // 訪問過的節點綠色&#10;        } else {&#10;          g2d.setColor(WIN31_GRAY); // 未訪問節點灰色&#10;        }&#10;&#10;        // 畫節點圓形 - 3D 效果&#10;        g2d.fillOval(p.x - 22, p.y - 22, 44, 44);&#10;        g2d.setColor(WIN31_DARK_GRAY);&#10;        g2d.setStroke(new BasicStroke(2));&#10;        g2d.drawOval(p.x - 22, p.y - 22, 44, 44);&#10;&#10;        // 添加高光效果&#10;        g2d.setColor(WIN31_WHITE);&#10;        g2d.setStroke(new BasicStroke(1));&#10;        g2d.drawArc(p.x - 18, p.y - 18, 12, 12, 45, 180);&#10;&#10;        // 節點文字&#10;        g2d.setColor(WIN31_BLACK);&#10;        g2d.setFont(new Font(&quot;MS Sans Serif&quot;, Font.BOLD, 14));&#10;        FontMetrics fm = g2d.getFontMetrics();&#10;        int textWidth = fm.stringWidth(name);&#10;        g2d.drawString(name, p.x - textWidth/2, p.y + fm.getAscent()/2 - 2);&#10;      }&#10;    }&#10;  }&#10;&#10;  // ...existing code...&#10;&#10;  private void startAnimation() {&#10;    animationIndex = 0;&#10;    if (animationTimer != null &amp;&amp; animationTimer.isRunning()) {&#10;      animationTimer.stop();&#10;    }&#10;    animationTimer = new javax.swing.Timer(800, new ActionListener() {&#10;      public void actionPerformed(ActionEvent e) {&#10;        animationIndex++;&#10;        if (animationIndex &gt; traversalResult.size()) {&#10;          animationTimer.stop();&#10;        }&#10;        repaint();&#10;      }&#10;    });&#10;    animationTimer.start();&#10;  }&#10;&#10;  private void arrangeNodesAsPentagon() {&#10;    int n = graph.getNodes().size();&#10;    if (n == 0) return;&#10;    int centerX = 400, centerY = 300, radius = 180;&#10;    java.util.List&lt;String&gt; names = new ArrayList&lt;&gt;(graph.getNodes().keySet());&#10;    for (int i = 0; i &lt; n; i++) {&#10;      double angle = 2 * Math.PI * i / n - Math.PI / 2;&#10;      int x = centerX + (int)(radius * Math.cos(angle));&#10;      int y = centerY + (int)(radius * Math.sin(angle));&#10;      graph.getNodes().put(names.get(i), new Point(x, y));&#10;    }&#10;  }&#10;&#10;  private void autoGenerateGraph() {&#10;    int nNodes, nEdges;&#10;    try {&#10;      nNodes = Integer.parseInt(nodeCountField.getText().trim());&#10;      nEdges = Integer.parseInt(edgeCountField.getText().trim());&#10;    } catch (NumberFormatException ex) {&#10;      showWin31MessageDialog(&quot;Please enter valid numbers!&quot;, &quot;Error&quot;);&#10;      return;&#10;    }&#10;    if (nNodes &lt; 2 || nEdges &lt; 1) {&#10;      showWin31MessageDialog(&quot;At least 2 nodes and 1 edge required!&quot;, &quot;Error&quot;);&#10;      return;&#10;    }&#10;    graph.clear();&#10;&#10;    // 生成節點&#10;    for (int i = 0; i &lt; nNodes; ++i) {&#10;      String name = &quot;N&quot; + i;&#10;      graph.addNode(name, new Point(0, 0));&#10;    }&#10;&#10;    // 生成邊&#10;    Set&lt;Edge&gt; generatedEdges = new HashSet&lt;&gt;();&#10;    java.util.List&lt;String&gt; names = new ArrayList&lt;&gt;(graph.getNodes().keySet());&#10;    Random rand = new Random();&#10;    while (generatedEdges.size() &lt; nEdges &amp;&amp; generatedEdges.size() &lt; nNodes * (nNodes - 1) / 2) {&#10;      String from = names.get(rand.nextInt(names.size()));&#10;      String to = names.get(rand.nextInt(names.size()));&#10;      if (!from.equals(to)) {&#10;        Edge edge = new Edge(from, to);&#10;        if (!generatedEdges.contains(edge)) {&#10;          generatedEdges.add(edge);&#10;        }&#10;      }&#10;    }&#10;    for (Edge edge : generatedEdges) {&#10;      graph.addEdge(edge.from, edge.to);&#10;    }&#10;  }&#10;&#10;  public static void main(String[] args) {&#10;    SwingUtilities.invokeLater(() -&gt; new GraphGUI().setVisible(true));&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="import javax.swing.*;&#10;import javax.swing.border.*;&#10;import java.awt.*;&#10;import java.awt.event.*;&#10;import java.util.*;&#10;&#10;public class GraphGUI extends JFrame {&#10;  private Graph graph = new Graph();&#10;  private JTextField nodeNameField = new JTextField(5);&#10;  private JTextField fromField = new JTextField(3);&#10;  private JTextField toField = new JTextField(3);&#10;  private JTextField nodeCountField = new JTextField(3);&#10;  private JTextField edgeCountField = new JTextField(3);&#10;  private JTextField startNodeField = new JTextField(3);&#10;  private JTextField pathFromField = new JTextField(3);&#10;  private JTextField pathToField = new JTextField(3);&#10;  private java.util.List&lt;String&gt; traversalResult = new ArrayList&lt;&gt;();&#10;  private int animationIndex = 0;&#10;  private javax.swing.Timer animationTimer;&#10;&#10;  // Windows 3.1 復古顏色&#10;  private static final Color WIN31_GRAY = new Color(192, 192, 192);&#10;  private static final Color WIN31_DARK_GRAY = new Color(128, 128, 128);&#10;  private static final Color WIN31_LIGHT_GRAY = new Color(224, 224, 224);&#10;  private static final Color WIN31_BLUE = new Color(0, 0, 128);&#10;  private static final Color WIN31_BLACK = Color.BLACK;&#10;  private static final Color WIN31_WHITE = Color.WHITE;&#10;&#10;  // 高亮顯示的邊（MST或最短路徑）&#10;  private java.util.List&lt;Edge&gt; highlightEdges = new ArrayList&lt;&gt;();&#10;  private String highlightType = &quot;&quot;; // &quot;MST&quot; or &quot;PATH&quot;&#10;&#10;  public GraphGUI() {&#10;    setTitle(&quot;Graph Application - Windows 3.1 Style&quot;);&#10;    setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);&#10;    setSize(1200, 700);&#10;&#10;    // 設置整體外觀&#10;    try {&#10;      UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());&#10;      setupWin31Colors();&#10;    } catch (Exception e) {&#10;      System.err.println(&quot;Failed to set look and feel: &quot; + e.getMessage());&#10;    }&#10;&#10;    GraphPanel panel = new GraphPanel();&#10;    panel.setBackground(WIN31_WHITE);&#10;    panel.setBorder(new BevelBorder(BevelBorder.LOWERED));&#10;    add(panel, BorderLayout.CENTER);&#10;&#10;    JPanel controlPanel = createControlPanel();&#10;    add(controlPanel, BorderLayout.EAST);&#10;&#10;    setLocationRelativeTo(null);&#10;  }&#10;&#10;  private void setupWin31Colors() {&#10;    UIManager.put(&quot;Panel.background&quot;, WIN31_GRAY);&#10;    UIManager.put(&quot;Button.background&quot;, WIN31_GRAY);&#10;    UIManager.put(&quot;TextField.background&quot;, WIN31_WHITE);&#10;    UIManager.put(&quot;TextArea.background&quot;, WIN31_WHITE);&#10;    UIManager.put(&quot;Label.foreground&quot;, WIN31_BLACK);&#10;    UIManager.put(&quot;Button.font&quot;, new Font(&quot;MS Sans Serif&quot;, Font.PLAIN, 11));&#10;    UIManager.put(&quot;Label.font&quot;, new Font(&quot;MS Sans Serif&quot;, Font.PLAIN, 11));&#10;    UIManager.put(&quot;TextField.font&quot;, new Font(&quot;MS Sans Serif&quot;, Font.PLAIN, 11));&#10;  }&#10;&#10;  private JPanel createControlPanel() {&#10;    JPanel controlPanel = new JPanel();&#10;    controlPanel.setBackground(WIN31_GRAY);&#10;    controlPanel.setBorder(new CompoundBorder(&#10;      new BevelBorder(BevelBorder.RAISED),&#10;      new EmptyBorder(10, 10, 10, 10)&#10;    ));&#10;    controlPanel.setLayout(new BoxLayout(controlPanel, BoxLayout.Y_AXIS));&#10;    controlPanel.setPreferredSize(new Dimension(280, 0));&#10;&#10;    // 節點操作區域&#10;    controlPanel.add(createNodeSection());&#10;    controlPanel.add(Box.createVerticalStrut(10));&#10;&#10;    // 邊操作區域&#10;    controlPanel.add(createEdgeSection());&#10;    controlPanel.add(Box.createVerticalStrut(10));&#10;&#10;    // 自動生成區域&#10;    controlPanel.add(createAutoGenSection());&#10;    controlPanel.add(Box.createVerticalStrut(10));&#10;&#10;    // 遍歷區域&#10;    controlPanel.add(createTraversalSection());&#10;    controlPanel.add(Box.createVerticalStrut(10));&#10;&#10;    // MST和最短路徑區域&#10;    controlPanel.add(createAlgorithmSection());&#10;    controlPanel.add(Box.createVerticalStrut(10));&#10;&#10;    // 輸出區域&#10;    controlPanel.add(createOutputSection());&#10;&#10;    return controlPanel;&#10;  }&#10;&#10;  private JPanel createNodeSection() {&#10;    JPanel panel = createSectionPanel(&quot;Node Operations&quot;);&#10;&#10;    JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;    inputPanel.setBackground(WIN31_GRAY);&#10;    inputPanel.add(new JLabel(&quot;Name:&quot;));&#10;    styleTextField(nodeNameField);&#10;    inputPanel.add(nodeNameField);&#10;    panel.add(inputPanel);&#10;&#10;    JPanel buttonPanel = new JPanel(new FlowLayout());&#10;    buttonPanel.setBackground(WIN31_GRAY);&#10;&#10;    JButton addNodeBtn = createWin31Button(&quot;Add Node&quot;);&#10;    JButton removeNodeBtn = createWin31Button(&quot;Remove&quot;);&#10;&#10;    addNodeBtn.addActionListener(e -&gt; {&#10;      String name = nodeNameField.getText().trim();&#10;      if (!name.isEmpty() &amp;&amp; !graph.containsNode(name)) {&#10;        graph.addNode(name, new Point(0, 0));&#10;        nodeNameField.setText(&quot;&quot;);&#10;        arrangeNodesAsPentagon();&#10;        repaint();&#10;      }&#10;    });&#10;&#10;    removeNodeBtn.addActionListener(e -&gt; {&#10;      String name = nodeNameField.getText().trim();&#10;      if (graph.containsNode(name)) {&#10;        graph.removeNode(name);&#10;        nodeNameField.setText(&quot;&quot;);&#10;        arrangeNodesAsPentagon();&#10;        repaint();&#10;      }&#10;    });&#10;&#10;    buttonPanel.add(addNodeBtn);&#10;    buttonPanel.add(removeNodeBtn);&#10;    panel.add(buttonPanel);&#10;&#10;    return panel;&#10;  }&#10;&#10;  private JPanel createEdgeSection() {&#10;    JPanel panel = createSectionPanel(&quot;Edge Operations&quot;);&#10;&#10;    JPanel inputPanel = new JPanel(new GridLayout(2, 2, 5, 5));&#10;    inputPanel.setBackground(WIN31_GRAY);&#10;&#10;    inputPanel.add(new JLabel(&quot;From:&quot;));&#10;    styleTextField(fromField);&#10;    inputPanel.add(fromField);&#10;    inputPanel.add(new JLabel(&quot;To:&quot;));&#10;    styleTextField(toField);&#10;    inputPanel.add(toField);&#10;&#10;    panel.add(inputPanel);&#10;&#10;    JButton addEdgeBtn = createWin31Button(&quot;Add Edge&quot;);&#10;    addEdgeBtn.addActionListener(e -&gt; {&#10;      String from = fromField.getText().trim();&#10;      String to = toField.getText().trim();&#10;      if (graph.containsNode(from) &amp;&amp; graph.containsNode(to) &amp;&amp; !from.equals(to)) {&#10;        graph.addEdge(from, to);&#10;        fromField.setText(&quot;&quot;);&#10;        toField.setText(&quot;&quot;);&#10;        repaint();&#10;      }&#10;    });&#10;&#10;    JPanel buttonPanel = new JPanel(new FlowLayout());&#10;    buttonPanel.setBackground(WIN31_GRAY);&#10;    buttonPanel.add(addEdgeBtn);&#10;    panel.add(buttonPanel);&#10;&#10;    return panel;&#10;  }&#10;&#10;  private JPanel createAutoGenSection() {&#10;    JPanel panel = createSectionPanel(&quot;Auto Generate&quot;);&#10;&#10;    JPanel inputPanel = new JPanel(new GridLayout(2, 2, 5, 5));&#10;    inputPanel.setBackground(WIN31_GRAY);&#10;&#10;    inputPanel.add(new JLabel(&quot;Nodes:&quot;));&#10;    styleTextField(nodeCountField);&#10;    inputPanel.add(nodeCountField);&#10;    inputPanel.add(new JLabel(&quot;Edges:&quot;));&#10;    styleTextField(edgeCountField);&#10;    inputPanel.add(edgeCountField);&#10;&#10;    panel.add(inputPanel);&#10;&#10;    JButton autoGenBtn = createWin31Button(&quot;Generate Graph&quot;);&#10;    autoGenBtn.addActionListener(e -&gt; {&#10;      autoGenerateGraph();&#10;      arrangeNodesAsPentagon();&#10;      repaint();&#10;    });&#10;&#10;    JPanel buttonPanel = new JPanel(new FlowLayout());&#10;    buttonPanel.setBackground(WIN31_GRAY);&#10;    buttonPanel.add(autoGenBtn);&#10;    panel.add(buttonPanel);&#10;&#10;    return panel;&#10;  }&#10;&#10;  private JPanel createTraversalSection() {&#10;    JPanel panel = createSectionPanel(&quot;Graph Traversal&quot;);&#10;&#10;    JPanel inputPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));&#10;    inputPanel.setBackground(WIN31_GRAY);&#10;    inputPanel.add(new JLabel(&quot;Start:&quot;));&#10;    styleTextField(startNodeField);&#10;    inputPanel.add(startNodeField);&#10;    panel.add(inputPanel);&#10;&#10;    JPanel buttonPanel = new JPanel(new FlowLayout());&#10;    buttonPanel.setBackground(WIN31_GRAY);&#10;&#10;    JButton dfsBtn = createWin31Button(&quot;DFS&quot;);&#10;    JButton bfsBtn = createWin31Button(&quot;BFS&quot;);&#10;&#10;    dfsBtn.addActionListener(e -&gt; {&#10;      String start = startNodeField.getText().trim();&#10;      if (!graph.containsNode(start)) {&#10;        showWin31MessageDialog(&quot;Start node does not exist.&quot;, &quot;Error&quot;);&#10;        return;&#10;      }&#10;      traversalResult = graph.dfs(start);&#10;      updateOutputArea(&quot;DFS: &quot; + String.join(&quot; → &quot;, traversalResult));&#10;      startAnimation();&#10;    });&#10;&#10;    bfsBtn.addActionListener(e -&gt; {&#10;      String start = startNodeField.getText().trim();&#10;      if (!graph.containsNode(start)) {&#10;        showWin31MessageDialog(&quot;Start node does not exist.&quot;, &quot;Error&quot;);&#10;        return;&#10;      }&#10;      traversalResult = graph.bfs(start);&#10;      updateOutputArea(&quot;BFS: &quot; + String.join(&quot; → &quot;, traversalResult));&#10;      startAnimation();&#10;    });&#10;&#10;    buttonPanel.add(dfsBtn);&#10;    buttonPanel.add(bfsBtn);&#10;    panel.add(buttonPanel);&#10;&#10;    return panel;&#10;  }&#10;&#10;  private JPanel createAlgorithmSection() {&#10;    JPanel panel = createSectionPanel(&quot;Algorithms&quot;);&#10;&#10;    JButton mstBtn = createWin31Button(&quot;Show MST&quot;);&#10;    mstBtn.addActionListener(e -&gt; {&#10;      highlightEdges = graph.getMST();&#10;      highlightType = &quot;MST&quot;;&#10;      int totalCost = highlightEdges.stream().mapToInt(edge -&gt; edge.cost).sum();&#10;      updateOutputArea(&quot;MST Total Cost: &quot; + totalCost);&#10;      repaint();&#10;    });&#10;&#10;    JPanel mstPanel = new JPanel(new FlowLayout());&#10;    mstPanel.setBackground(WIN31_GRAY);&#10;    mstPanel.add(mstBtn);&#10;    panel.add(mstPanel);&#10;&#10;    // 最短路徑&#10;    JPanel pathInputPanel = new JPanel(new GridLayout(2, 2, 5, 5));&#10;    pathInputPanel.setBackground(WIN31_GRAY);&#10;&#10;    pathInputPanel.add(new JLabel(&quot;From:&quot;));&#10;    styleTextField(pathFromField);&#10;    pathInputPanel.add(pathFromField);&#10;    pathInputPanel.add(new JLabel(&quot;To:&quot;));&#10;    styleTextField(pathToField);&#10;    pathInputPanel.add(pathToField);&#10;&#10;    panel.add(pathInputPanel);&#10;&#10;    JButton pathBtn = createWin31Button(&quot;Find Shortest Path&quot;);&#10;    pathBtn.addActionListener(e -&gt; {&#10;      String from = pathFromField.getText().trim();&#10;      String to = pathToField.getText().trim();&#10;      if (!graph.containsNode(from) || !graph.containsNode(to)) {&#10;        showWin31MessageDialog(&quot;Node not found!&quot;, &quot;Error&quot;);&#10;        return;&#10;      }&#10;      java.util.List&lt;Edge&gt; path = graph.getShortestPath(from, to);&#10;      if (path == null || path.isEmpty()) {&#10;        showWin31MessageDialog(&quot;No path found!&quot;, &quot;Info&quot;);&#10;        highlightEdges = new ArrayList&lt;&gt;();&#10;        highlightType = &quot;PATH&quot;;&#10;        updateOutputArea(&quot;No path from &quot; + from + &quot; to &quot; + to);&#10;      } else {&#10;        highlightEdges = path;&#10;        highlightType = &quot;PATH&quot;;&#10;        int totalCost = path.stream().mapToInt(edge -&gt; edge.cost).sum();&#10;        updateOutputArea(&quot;Shortest Path Cost: &quot; + totalCost + &quot; | Path: &quot; +&#10;          from + &quot; → &quot; + to);&#10;      }&#10;      repaint();&#10;    });&#10;&#10;    JPanel pathButtonPanel = new JPanel(new FlowLayout());&#10;    pathButtonPanel.setBackground(WIN31_GRAY);&#10;    pathButtonPanel.add(pathBtn);&#10;    panel.add(pathButtonPanel);&#10;&#10;    return panel;&#10;  }&#10;&#10;  private JPanel createOutputSection() {&#10;    JPanel panel = createSectionPanel(&quot;Output&quot;);&#10;&#10;    JTextArea outputArea = new JTextArea(8, 20);&#10;    outputArea.setEditable(false);&#10;    outputArea.setLineWrap(true);&#10;    outputArea.setWrapStyleWord(true);&#10;    outputArea.setBackground(WIN31_WHITE);&#10;    outputArea.setForeground(WIN31_BLACK);&#10;    outputArea.setFont(new Font(&quot;Courier New&quot;, Font.PLAIN, 11));&#10;    outputArea.setBorder(new BevelBorder(BevelBorder.LOWERED));&#10;&#10;    JScrollPane scrollPane = new JScrollPane(outputArea);&#10;    scrollPane.setBorder(new BevelBorder(BevelBorder.LOWERED));&#10;    panel.add(scrollPane);&#10;&#10;    this.outputArea = outputArea; // 儲存引用&#10;&#10;    return panel;&#10;  }&#10;&#10;  private JTextArea outputArea;&#10;&#10;  private void updateOutputArea(String text) {&#10;    if (outputArea != null) {&#10;      outputArea.setText(text);&#10;    }&#10;  }&#10;&#10;  private JPanel createSectionPanel(String title) {&#10;    JPanel panel = new JPanel();&#10;    panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));&#10;    panel.setBackground(WIN31_GRAY);&#10;    panel.setBorder(new CompoundBorder(&#10;      new TitledBorder(new EtchedBorder(), title,&#10;        TitledBorder.LEFT, TitledBorder.TOP,&#10;        new Font(&quot;MS Sans Serif&quot;, Font.BOLD, 11), WIN31_BLACK),&#10;      new EmptyBorder(5, 5, 5, 5)&#10;    ));&#10;    return panel;&#10;  }&#10;&#10;  private JButton createWin31Button(String text) {&#10;    JButton button = new JButton(text);&#10;    button.setBackground(WIN31_GRAY);&#10;    button.setForeground(WIN31_BLACK);&#10;    button.setFont(new Font(&quot;MS Sans Serif&quot;, Font.PLAIN, 11));&#10;    button.setBorder(new BevelBorder(BevelBorder.RAISED));&#10;    button.setFocusPainted(false);&#10;&#10;    // 添加 hover 效果&#10;    button.addMouseListener(new MouseAdapter() {&#10;      public void mouseEntered(MouseEvent e) {&#10;        button.setBackground(WIN31_LIGHT_GRAY);&#10;      }&#10;      public void mouseExited(MouseEvent e) {&#10;        button.setBackground(WIN31_GRAY);&#10;      }&#10;      public void mousePressed(MouseEvent e) {&#10;        button.setBorder(new BevelBorder(BevelBorder.LOWERED));&#10;      }&#10;      public void mouseReleased(MouseEvent e) {&#10;        button.setBorder(new BevelBorder(BevelBorder.RAISED));&#10;      }&#10;    });&#10;&#10;    return button;&#10;  }&#10;&#10;  private void styleTextField(JTextField field) {&#10;    field.setBackground(WIN31_WHITE);&#10;    field.setForeground(WIN31_BLACK);&#10;    field.setFont(new Font(&quot;MS Sans Serif&quot;, Font.PLAIN, 11));&#10;    field.setBorder(new BevelBorder(BevelBorder.LOWERED));&#10;  }&#10;&#10;  private void showWin31MessageDialog(String message, String title) {&#10;    JOptionPane optionPane = new JOptionPane(message,&#10;      title.equals(&quot;Error&quot;) ? JOptionPane.ERROR_MESSAGE : JOptionPane.INFORMATION_MESSAGE);&#10;    JDialog dialog = optionPane.createDialog(this, title);&#10;    dialog.setModal(true);&#10;    dialog.setVisible(true);&#10;  }&#10;&#10;  class GraphPanel extends JPanel {&#10;    protected void paintComponent(Graphics g) {&#10;      super.paintComponent(g);&#10;      Graphics2D g2d = (Graphics2D) g;&#10;      g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);&#10;&#10;      // 先畫所有邊&#10;      for (Edge edge : graph.getEdges()) {&#10;        Point p1 = graph.getNodes().get(edge.from);&#10;        Point p2 = graph.getNodes().get(edge.to);&#10;        if (p1 != null &amp;&amp; p2 != null) {&#10;          // 若為高亮邊則稍後畫&#10;          if (highlightEdges.contains(edge)) continue;&#10;          g2d.setColor(WIN31_DARK_GRAY);&#10;          g2d.setStroke(new BasicStroke(1));&#10;          g2d.drawLine(p1.x, p1.y, p2.x, p2.y);&#10;&#10;          // 在邊的中點顯示 cost&#10;          int mx = (p1.x + p2.x) / 2;&#10;          int my = (p1.y + p2.y) / 2;&#10;          g2d.setColor(WIN31_BLUE);&#10;          g2d.setFont(new Font(&quot;MS Sans Serif&quot;, Font.BOLD, 10));&#10;&#10;          // 添加白色背景使文字更清晰&#10;          FontMetrics fm = g2d.getFontMetrics();&#10;          String costStr = String.valueOf(edge.cost);&#10;          int strWidth = fm.stringWidth(costStr);&#10;          int strHeight = fm.getHeight();&#10;          g2d.setColor(WIN31_WHITE);&#10;          g2d.fillRect(mx - strWidth/2 - 2, my - strHeight/2 - 1,&#10;                      strWidth + 4, strHeight + 2);&#10;          g2d.setColor(WIN31_BLUE);&#10;          g2d.drawString(costStr, mx - strWidth/2, my + fm.getAscent()/2);&#10;        }&#10;      }&#10;&#10;      // 畫高亮邊&#10;      for (Edge edge : highlightEdges) {&#10;        Point p1 = graph.getNodes().get(edge.from);&#10;        Point p2 = graph.getNodes().get(edge.to);&#10;        if (p1 != null &amp;&amp; p2 != null) {&#10;          Color highlightColor = highlightType.equals(&quot;MST&quot;) ?&#10;            new Color(255, 165, 0) : new Color(255, 20, 147); // 橘色 MST, 粉紅色路徑&#10;          g2d.setColor(highlightColor);&#10;          g2d.setStroke(new BasicStroke(3));&#10;          g2d.drawLine(p1.x, p1.y, p2.x, p2.y);&#10;&#10;          // 高亮邊的 cost&#10;          int mx = (p1.x + p2.x) / 2;&#10;          int my = (p1.y + p2.y) / 2;&#10;          g2d.setFont(new Font(&quot;MS Sans Serif&quot;, Font.BOLD, 12));&#10;&#10;          FontMetrics fm = g2d.getFontMetrics();&#10;          String costStr = String.valueOf(edge.cost);&#10;          int strWidth = fm.stringWidth(costStr);&#10;          int strHeight = fm.getHeight();&#10;          g2d.setColor(Color.YELLOW);&#10;          g2d.fillRect(mx - strWidth/2 - 3, my - strHeight/2 - 2,&#10;                      strWidth + 6, strHeight + 4);&#10;          g2d.setColor(Color.RED);&#10;          g2d.drawString(costStr, mx - strWidth/2, my + fm.getAscent()/2);&#10;        }&#10;      }&#10;&#10;      // 畫節點&#10;      for (String name : graph.getNodes().keySet()) {&#10;        Point p = graph.getNodes().get(name);&#10;        int idx = traversalResult.indexOf(name);&#10;&#10;        // 節點顏色&#10;        if (!traversalResult.isEmpty() &amp;&amp; idx &gt;= 0 &amp;&amp; idx &lt; animationIndex) {&#10;          if (idx == 0)&#10;            g2d.setColor(new Color(255, 0, 0)); // 起始節點紅色&#10;          else&#10;            g2d.setColor(new Color(0, 128, 0)); // 訪問過的節點綠色&#10;        } else {&#10;          g2d.setColor(WIN31_GRAY); // 未訪問節點灰色&#10;        }&#10;&#10;        // 畫節點圓形 - 3D 效果&#10;        g2d.fillOval(p.x - 22, p.y - 22, 44, 44);&#10;        g2d.setColor(WIN31_DARK_GRAY);&#10;        g2d.setStroke(new BasicStroke(2));&#10;        g2d.drawOval(p.x - 22, p.y - 22, 44, 44);&#10;&#10;        // 添加高光效果&#10;        g2d.setColor(WIN31_WHITE);&#10;        g2d.setStroke(new BasicStroke(1));&#10;        g2d.drawArc(p.x - 18, p.y - 18, 12, 12, 45, 180);&#10;&#10;        // 節點文字&#10;        g2d.setColor(WIN31_BLACK);&#10;        g2d.setFont(new Font(&quot;MS Sans Serif&quot;, Font.BOLD, 14));&#10;        FontMetrics fm = g2d.getFontMetrics();&#10;        int textWidth = fm.stringWidth(name);&#10;        g2d.drawString(name, p.x - textWidth/2, p.y + fm.getAscent()/2 - 2);&#10;      }&#10;    }&#10;  }&#10;&#10;  // ...existing code...&#10;&#10;  private void startAnimation() {&#10;    animationIndex = 0;&#10;    if (animationTimer != null &amp;&amp; animationTimer.isRunning()) {&#10;      animationTimer.stop();&#10;    }&#10;    animationTimer = new javax.swing.Timer(800, new ActionListener() {&#10;      public void actionPerformed(ActionEvent e) {&#10;        animationIndex++;&#10;        if (animationIndex &gt; traversalResult.size()) {&#10;          animationTimer.stop();&#10;        }&#10;        repaint();&#10;      }&#10;    });&#10;    animationTimer.start();&#10;  }&#10;&#10;  private void arrangeNodesAsPentagon() {&#10;    int n = graph.getNodes().size();&#10;    if (n == 0) return;&#10;    int centerX = 400, centerY = 300, radius = 180;&#10;    java.util.List&lt;String&gt; names = new ArrayList&lt;&gt;(graph.getNodes().keySet());&#10;    for (int i = 0; i &lt; n; i++) {&#10;      double angle = 2 * Math.PI * i / n - Math.PI / 2;&#10;      int x = centerX + (int)(radius * Math.cos(angle));&#10;      int y = centerY + (int)(radius * Math.sin(angle));&#10;      graph.getNodes().put(names.get(i), new Point(x, y));&#10;    }&#10;  }&#10;&#10;  private void autoGenerateGraph() {&#10;    int nNodes, nEdges;&#10;    try {&#10;      nNodes = Integer.parseInt(nodeCountField.getText().trim());&#10;      nEdges = Integer.parseInt(edgeCountField.getText().trim());&#10;    } catch (NumberFormatException ex) {&#10;      showWin31MessageDialog(&quot;Please enter valid numbers!&quot;, &quot;Error&quot;);&#10;      return;&#10;    }&#10;    if (nNodes &lt; 2 || nEdges &lt; 1) {&#10;      showWin31MessageDialog(&quot;At least 2 nodes and 1 edge required!&quot;, &quot;Error&quot;);&#10;      return;&#10;    }&#10;    graph.clear();&#10;&#10;    // 生成節點&#10;    for (int i = 0; i &lt; nNodes; ++i) {&#10;      String name = &quot;N&quot; + i;&#10;      graph.addNode(name, new Point(0, 0));&#10;    }&#10;&#10;    // 生成邊&#10;    Set&lt;Edge&gt; generatedEdges = new HashSet&lt;&gt;();&#10;    java.util.List&lt;String&gt; names = new ArrayList&lt;&gt;(graph.getNodes().keySet());&#10;    Random rand = new Random();&#10;    while (generatedEdges.size() &lt; nEdges &amp;&amp; generatedEdges.size() &lt; nNodes * (nNodes - 1) / 2) {&#10;      String from = names.get(rand.nextInt(names.size()));&#10;      String to = names.get(rand.nextInt(names.size()));&#10;      if (!from.equals(to)) {&#10;        Edge edge = new Edge(from, to);&#10;        if (!generatedEdges.contains(edge)) {&#10;          generatedEdges.add(edge);&#10;        }&#10;      }&#10;    }&#10;    for (Edge edge : generatedEdges) {&#10;      graph.addEdge(edge.from, edge.to);&#10;    }&#10;  }&#10;&#10;  public static void main(String[] args) {&#10;    SwingUtilities.invokeLater(() -&gt; new GraphGUI().setVisible(true));&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>